// Code generated by cmd/codegen. DO NOT EDIT.
// This file is automatically generated and any changes will be overwritten.
// To regenerate this file, run `go generate`.

package generated

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
{{- if gt (len .Properties) 0 }}
	"github.com/hashicorp/terraform-plugin-framework/types"
{{- end }}
	hookdeck "github.com/hookdeck/hookdeck-go-sdk"
)

type {{.NameCamel}}SourceVerification struct {
{{- range $property := .Properties }}
	{{$property.NamePascal}} types.{{$property.TypeString}} `tfsdk:"{{$property.NameSnake}}"`
{{- end }}
}

type {{.NameCamel}}SourceVerificationProvider struct {
}

func (p *{{.NameCamel}}SourceVerificationProvider) getSchemaName() string {
	return "{{.NameSnake}}"
}

func (p *{{.NameCamel}}SourceVerificationProvider) getSchemaValue() schema.SingleNestedAttribute {
	return schema.SingleNestedAttribute{
		Optional: true,
		Attributes: map[string]schema.Attribute{
{{- range $property := .Properties }}
			"{{$property.NameSnake}}": schema.{{$property.TypeString}}Attribute{
				Required:  {{$property.Required}},
				Optional:  {{$property.Optional}},
				Sensitive: {{$property.Sensitive}},
			},
{{- end }}
		},
	}
}

func (p *{{.NameCamel}}SourceVerificationProvider) ToPayload(sourceVerification *SourceVerification) *hookdeck.VerificationConfig {
	if sourceVerification.{{.NamePascal}} == nil {
		return nil
	}
{{- range $property := .Properties }}
{{- if $property.IsEnum}}
	{{$property.NameCamel}}, _ := hookdeck.{{$property.EnumNameString}}(sourceVerification.{{$.NamePascal}}.{{$property.NamePascal}}.Value{{$property.TypeString}}{{$property.PointerString}}());
{{- end}}
{{- end }}
	return hookdeck.NewVerificationConfigFrom{{.NamePascal}}(&hookdeck.Verification{{.NameConfig}}{
		Configs: &hookdeck.Verification{{.NameConfig}}Configs{
{{- range $property := .Properties }}
{{- if and $property.IsEnum $property.Required }}
			{{$property.NamePascal}}: {{$property.NameCamel}},
{{- else if $property.IsEnum }}
			{{$property.NamePascal}}: &{{$property.NameCamel}},
{{- else}}
			{{$property.NamePascal}}: sourceVerification.{{$.NamePascal}}.{{$property.NamePascal}}.Value{{$property.TypeString}}{{$property.PointerString}}(),
{{- end}}
{{- end }}
		},
	})
}

func init() {
	Providers = append(Providers, &{{.NameCamel}}SourceVerificationProvider{})
}
