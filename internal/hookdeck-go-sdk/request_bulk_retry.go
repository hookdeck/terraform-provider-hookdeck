// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/hookdeck/hookdeck-go-sdk/core"
	internal "github.com/hookdeck/hookdeck-go-sdk/internal"
	time "time"
)

type RequestBulkRetryCreateRequest struct {
	// Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)
	Query *core.Optional[RequestBulkRetryCreateRequestQuery] `json:"query,omitempty" url:"-"`
}

type RequestBulkRetryListRequest struct {
	CancelledAt       *time.Time                          `json:"-" url:"cancelled_at,omitempty"`
	CompletedAt       *time.Time                          `json:"-" url:"completed_at,omitempty"`
	CreatedAt         *time.Time                          `json:"-" url:"created_at,omitempty"`
	Id                []*string                           `json:"-" url:"id,omitempty"`
	InProgress        *bool                               `json:"-" url:"in_progress,omitempty"`
	QueryPartialMatch *bool                               `json:"-" url:"query_partial_match,omitempty"`
	OrderBy           *RequestBulkRetryListRequestOrderBy `json:"-" url:"order_by,omitempty"`
	Dir               *RequestBulkRetryListRequestDir     `json:"-" url:"dir,omitempty"`
	Limit             *int                                `json:"-" url:"limit,omitempty"`
	Next              *string                             `json:"-" url:"next,omitempty"`
	Prev              *string                             `json:"-" url:"prev,omitempty"`
}

// Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)
type RequestBulkRetryCreateRequestQuery struct {
	// Filter by requests IDs
	Id *RequestBulkRetryCreateRequestQueryId `json:"id,omitempty" url:"id,omitempty"`
	// Filter by status
	Status *RequestBulkRetryCreateRequestQueryStatus `json:"status,omitempty" url:"status,omitempty"`
	// Filter by rejection cause
	RejectionCause *RequestBulkRetryCreateRequestQueryRejectionCause `json:"rejection_cause,omitempty" url:"rejection_cause,omitempty"`
	// Filter by source IDs
	SourceId *RequestBulkRetryCreateRequestQuerySourceId `json:"source_id,omitempty" url:"source_id,omitempty"`
	// Filter by verification status
	Verified *bool `json:"verified,omitempty" url:"verified,omitempty"`
	// URL Encoded string of the value to match partially to the body, headers, parsed_query or path
	SearchTerm *string `json:"search_term,omitempty" url:"search_term,omitempty"`
	// URL Encoded string of the JSON to match to the data headers
	Headers *RequestBulkRetryCreateRequestQueryHeaders `json:"headers,omitempty" url:"headers,omitempty"`
	// URL Encoded string of the JSON to match to the data body
	Body *RequestBulkRetryCreateRequestQueryBody `json:"body,omitempty" url:"body,omitempty"`
	// URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
	ParsedQuery *RequestBulkRetryCreateRequestQueryParsedQuery `json:"parsed_query,omitempty" url:"parsed_query,omitempty"`
	// URL Encoded string of the value to match partially to the path
	Path *string `json:"path,omitempty" url:"path,omitempty"`
	// Filter by count of ignored events
	IgnoredCount *RequestBulkRetryCreateRequestQueryIgnoredCount `json:"ignored_count,omitempty" url:"ignored_count,omitempty"`
	// Filter by count of events
	EventsCount *RequestBulkRetryCreateRequestQueryEventsCount `json:"events_count,omitempty" url:"events_count,omitempty"`
	// Filter by event ingested date
	IngestedAt  *RequestBulkRetryCreateRequestQueryIngestedAt  `json:"ingested_at,omitempty" url:"ingested_at,omitempty"`
	BulkRetryId *RequestBulkRetryCreateRequestQueryBulkRetryId `json:"bulk_retry_id,omitempty" url:"bulk_retry_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestBulkRetryCreateRequestQuery) GetId() *RequestBulkRetryCreateRequestQueryId {
	if r == nil {
		return nil
	}
	return r.Id
}

func (r *RequestBulkRetryCreateRequestQuery) GetStatus() *RequestBulkRetryCreateRequestQueryStatus {
	if r == nil {
		return nil
	}
	return r.Status
}

func (r *RequestBulkRetryCreateRequestQuery) GetRejectionCause() *RequestBulkRetryCreateRequestQueryRejectionCause {
	if r == nil {
		return nil
	}
	return r.RejectionCause
}

func (r *RequestBulkRetryCreateRequestQuery) GetSourceId() *RequestBulkRetryCreateRequestQuerySourceId {
	if r == nil {
		return nil
	}
	return r.SourceId
}

func (r *RequestBulkRetryCreateRequestQuery) GetVerified() *bool {
	if r == nil {
		return nil
	}
	return r.Verified
}

func (r *RequestBulkRetryCreateRequestQuery) GetSearchTerm() *string {
	if r == nil {
		return nil
	}
	return r.SearchTerm
}

func (r *RequestBulkRetryCreateRequestQuery) GetHeaders() *RequestBulkRetryCreateRequestQueryHeaders {
	if r == nil {
		return nil
	}
	return r.Headers
}

func (r *RequestBulkRetryCreateRequestQuery) GetBody() *RequestBulkRetryCreateRequestQueryBody {
	if r == nil {
		return nil
	}
	return r.Body
}

func (r *RequestBulkRetryCreateRequestQuery) GetParsedQuery() *RequestBulkRetryCreateRequestQueryParsedQuery {
	if r == nil {
		return nil
	}
	return r.ParsedQuery
}

func (r *RequestBulkRetryCreateRequestQuery) GetPath() *string {
	if r == nil {
		return nil
	}
	return r.Path
}

func (r *RequestBulkRetryCreateRequestQuery) GetIgnoredCount() *RequestBulkRetryCreateRequestQueryIgnoredCount {
	if r == nil {
		return nil
	}
	return r.IgnoredCount
}

func (r *RequestBulkRetryCreateRequestQuery) GetEventsCount() *RequestBulkRetryCreateRequestQueryEventsCount {
	if r == nil {
		return nil
	}
	return r.EventsCount
}

func (r *RequestBulkRetryCreateRequestQuery) GetIngestedAt() *RequestBulkRetryCreateRequestQueryIngestedAt {
	if r == nil {
		return nil
	}
	return r.IngestedAt
}

func (r *RequestBulkRetryCreateRequestQuery) GetBulkRetryId() *RequestBulkRetryCreateRequestQueryBulkRetryId {
	if r == nil {
		return nil
	}
	return r.BulkRetryId
}

func (r *RequestBulkRetryCreateRequestQuery) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestBulkRetryCreateRequestQuery) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestBulkRetryCreateRequestQuery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestBulkRetryCreateRequestQuery(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestBulkRetryCreateRequestQuery) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// URL Encoded string of the JSON to match to the data body
type RequestBulkRetryCreateRequestQueryBody struct {
	String                                    string
	RequestBulkRetryCreateRequestQueryBodyOne *RequestBulkRetryCreateRequestQueryBodyOne

	typ string
}

func NewRequestBulkRetryCreateRequestQueryBodyFromString(value string) *RequestBulkRetryCreateRequestQueryBody {
	return &RequestBulkRetryCreateRequestQueryBody{typ: "String", String: value}
}

func NewRequestBulkRetryCreateRequestQueryBodyFromRequestBulkRetryCreateRequestQueryBodyOne(value *RequestBulkRetryCreateRequestQueryBodyOne) *RequestBulkRetryCreateRequestQueryBody {
	return &RequestBulkRetryCreateRequestQueryBody{typ: "RequestBulkRetryCreateRequestQueryBodyOne", RequestBulkRetryCreateRequestQueryBodyOne: value}
}

func (r *RequestBulkRetryCreateRequestQueryBody) GetString() string {
	if r == nil {
		return ""
	}
	return r.String
}

func (r *RequestBulkRetryCreateRequestQueryBody) GetRequestBulkRetryCreateRequestQueryBodyOne() *RequestBulkRetryCreateRequestQueryBodyOne {
	if r == nil {
		return nil
	}
	return r.RequestBulkRetryCreateRequestQueryBodyOne
}

func (r *RequestBulkRetryCreateRequestQueryBody) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typ = "String"
		r.String = valueString
		return nil
	}
	valueRequestBulkRetryCreateRequestQueryBodyOne := new(RequestBulkRetryCreateRequestQueryBodyOne)
	if err := json.Unmarshal(data, &valueRequestBulkRetryCreateRequestQueryBodyOne); err == nil {
		r.typ = "RequestBulkRetryCreateRequestQueryBodyOne"
		r.RequestBulkRetryCreateRequestQueryBodyOne = valueRequestBulkRetryCreateRequestQueryBodyOne
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestBulkRetryCreateRequestQueryBody) MarshalJSON() ([]byte, error) {
	if r.typ == "String" || r.String != "" {
		return json.Marshal(r.String)
	}
	if r.typ == "RequestBulkRetryCreateRequestQueryBodyOne" || r.RequestBulkRetryCreateRequestQueryBodyOne != nil {
		return json.Marshal(r.RequestBulkRetryCreateRequestQueryBodyOne)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQueryBodyVisitor interface {
	VisitString(string) error
	VisitRequestBulkRetryCreateRequestQueryBodyOne(*RequestBulkRetryCreateRequestQueryBodyOne) error
}

func (r *RequestBulkRetryCreateRequestQueryBody) Accept(visitor RequestBulkRetryCreateRequestQueryBodyVisitor) error {
	if r.typ == "String" || r.String != "" {
		return visitor.VisitString(r.String)
	}
	if r.typ == "RequestBulkRetryCreateRequestQueryBodyOne" || r.RequestBulkRetryCreateRequestQueryBodyOne != nil {
		return visitor.VisitRequestBulkRetryCreateRequestQueryBodyOne(r.RequestBulkRetryCreateRequestQueryBodyOne)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQueryBodyOne struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestBulkRetryCreateRequestQueryBodyOne) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestBulkRetryCreateRequestQueryBodyOne) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestBulkRetryCreateRequestQueryBodyOne
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestBulkRetryCreateRequestQueryBodyOne(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestBulkRetryCreateRequestQueryBodyOne) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RequestBulkRetryCreateRequestQueryBulkRetryId struct {
	String     string
	StringList []string

	typ string
}

func NewRequestBulkRetryCreateRequestQueryBulkRetryIdFromString(value string) *RequestBulkRetryCreateRequestQueryBulkRetryId {
	return &RequestBulkRetryCreateRequestQueryBulkRetryId{typ: "String", String: value}
}

func NewRequestBulkRetryCreateRequestQueryBulkRetryIdFromStringList(value []string) *RequestBulkRetryCreateRequestQueryBulkRetryId {
	return &RequestBulkRetryCreateRequestQueryBulkRetryId{typ: "StringList", StringList: value}
}

func (r *RequestBulkRetryCreateRequestQueryBulkRetryId) GetString() string {
	if r == nil {
		return ""
	}
	return r.String
}

func (r *RequestBulkRetryCreateRequestQueryBulkRetryId) GetStringList() []string {
	if r == nil {
		return nil
	}
	return r.StringList
}

func (r *RequestBulkRetryCreateRequestQueryBulkRetryId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typ = "String"
		r.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		r.typ = "StringList"
		r.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestBulkRetryCreateRequestQueryBulkRetryId) MarshalJSON() ([]byte, error) {
	if r.typ == "String" || r.String != "" {
		return json.Marshal(r.String)
	}
	if r.typ == "StringList" || r.StringList != nil {
		return json.Marshal(r.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQueryBulkRetryIdVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (r *RequestBulkRetryCreateRequestQueryBulkRetryId) Accept(visitor RequestBulkRetryCreateRequestQueryBulkRetryIdVisitor) error {
	if r.typ == "String" || r.String != "" {
		return visitor.VisitString(r.String)
	}
	if r.typ == "StringList" || r.StringList != nil {
		return visitor.VisitStringList(r.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// Filter by count of events
type RequestBulkRetryCreateRequestQueryEventsCount struct {
	Integer     int
	Operators   *Operators
	IntegerList []int

	typ string
}

func NewRequestBulkRetryCreateRequestQueryEventsCountFromInteger(value int) *RequestBulkRetryCreateRequestQueryEventsCount {
	return &RequestBulkRetryCreateRequestQueryEventsCount{typ: "Integer", Integer: value}
}

func NewRequestBulkRetryCreateRequestQueryEventsCountFromOperators(value *Operators) *RequestBulkRetryCreateRequestQueryEventsCount {
	return &RequestBulkRetryCreateRequestQueryEventsCount{typ: "Operators", Operators: value}
}

func NewRequestBulkRetryCreateRequestQueryEventsCountFromIntegerList(value []int) *RequestBulkRetryCreateRequestQueryEventsCount {
	return &RequestBulkRetryCreateRequestQueryEventsCount{typ: "IntegerList", IntegerList: value}
}

func (r *RequestBulkRetryCreateRequestQueryEventsCount) GetInteger() int {
	if r == nil {
		return 0
	}
	return r.Integer
}

func (r *RequestBulkRetryCreateRequestQueryEventsCount) GetOperators() *Operators {
	if r == nil {
		return nil
	}
	return r.Operators
}

func (r *RequestBulkRetryCreateRequestQueryEventsCount) GetIntegerList() []int {
	if r == nil {
		return nil
	}
	return r.IntegerList
}

func (r *RequestBulkRetryCreateRequestQueryEventsCount) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		r.typ = "Integer"
		r.Integer = valueInteger
		return nil
	}
	valueOperators := new(Operators)
	if err := json.Unmarshal(data, &valueOperators); err == nil {
		r.typ = "Operators"
		r.Operators = valueOperators
		return nil
	}
	var valueIntegerList []int
	if err := json.Unmarshal(data, &valueIntegerList); err == nil {
		r.typ = "IntegerList"
		r.IntegerList = valueIntegerList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestBulkRetryCreateRequestQueryEventsCount) MarshalJSON() ([]byte, error) {
	if r.typ == "Integer" || r.Integer != 0 {
		return json.Marshal(r.Integer)
	}
	if r.typ == "Operators" || r.Operators != nil {
		return json.Marshal(r.Operators)
	}
	if r.typ == "IntegerList" || r.IntegerList != nil {
		return json.Marshal(r.IntegerList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQueryEventsCountVisitor interface {
	VisitInteger(int) error
	VisitOperators(*Operators) error
	VisitIntegerList([]int) error
}

func (r *RequestBulkRetryCreateRequestQueryEventsCount) Accept(visitor RequestBulkRetryCreateRequestQueryEventsCountVisitor) error {
	if r.typ == "Integer" || r.Integer != 0 {
		return visitor.VisitInteger(r.Integer)
	}
	if r.typ == "Operators" || r.Operators != nil {
		return visitor.VisitOperators(r.Operators)
	}
	if r.typ == "IntegerList" || r.IntegerList != nil {
		return visitor.VisitIntegerList(r.IntegerList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// URL Encoded string of the JSON to match to the data headers
type RequestBulkRetryCreateRequestQueryHeaders struct {
	String                                       string
	RequestBulkRetryCreateRequestQueryHeadersOne *RequestBulkRetryCreateRequestQueryHeadersOne

	typ string
}

func NewRequestBulkRetryCreateRequestQueryHeadersFromString(value string) *RequestBulkRetryCreateRequestQueryHeaders {
	return &RequestBulkRetryCreateRequestQueryHeaders{typ: "String", String: value}
}

func NewRequestBulkRetryCreateRequestQueryHeadersFromRequestBulkRetryCreateRequestQueryHeadersOne(value *RequestBulkRetryCreateRequestQueryHeadersOne) *RequestBulkRetryCreateRequestQueryHeaders {
	return &RequestBulkRetryCreateRequestQueryHeaders{typ: "RequestBulkRetryCreateRequestQueryHeadersOne", RequestBulkRetryCreateRequestQueryHeadersOne: value}
}

func (r *RequestBulkRetryCreateRequestQueryHeaders) GetString() string {
	if r == nil {
		return ""
	}
	return r.String
}

func (r *RequestBulkRetryCreateRequestQueryHeaders) GetRequestBulkRetryCreateRequestQueryHeadersOne() *RequestBulkRetryCreateRequestQueryHeadersOne {
	if r == nil {
		return nil
	}
	return r.RequestBulkRetryCreateRequestQueryHeadersOne
}

func (r *RequestBulkRetryCreateRequestQueryHeaders) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typ = "String"
		r.String = valueString
		return nil
	}
	valueRequestBulkRetryCreateRequestQueryHeadersOne := new(RequestBulkRetryCreateRequestQueryHeadersOne)
	if err := json.Unmarshal(data, &valueRequestBulkRetryCreateRequestQueryHeadersOne); err == nil {
		r.typ = "RequestBulkRetryCreateRequestQueryHeadersOne"
		r.RequestBulkRetryCreateRequestQueryHeadersOne = valueRequestBulkRetryCreateRequestQueryHeadersOne
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestBulkRetryCreateRequestQueryHeaders) MarshalJSON() ([]byte, error) {
	if r.typ == "String" || r.String != "" {
		return json.Marshal(r.String)
	}
	if r.typ == "RequestBulkRetryCreateRequestQueryHeadersOne" || r.RequestBulkRetryCreateRequestQueryHeadersOne != nil {
		return json.Marshal(r.RequestBulkRetryCreateRequestQueryHeadersOne)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQueryHeadersVisitor interface {
	VisitString(string) error
	VisitRequestBulkRetryCreateRequestQueryHeadersOne(*RequestBulkRetryCreateRequestQueryHeadersOne) error
}

func (r *RequestBulkRetryCreateRequestQueryHeaders) Accept(visitor RequestBulkRetryCreateRequestQueryHeadersVisitor) error {
	if r.typ == "String" || r.String != "" {
		return visitor.VisitString(r.String)
	}
	if r.typ == "RequestBulkRetryCreateRequestQueryHeadersOne" || r.RequestBulkRetryCreateRequestQueryHeadersOne != nil {
		return visitor.VisitRequestBulkRetryCreateRequestQueryHeadersOne(r.RequestBulkRetryCreateRequestQueryHeadersOne)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQueryHeadersOne struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestBulkRetryCreateRequestQueryHeadersOne) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestBulkRetryCreateRequestQueryHeadersOne) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestBulkRetryCreateRequestQueryHeadersOne
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestBulkRetryCreateRequestQueryHeadersOne(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestBulkRetryCreateRequestQueryHeadersOne) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Filter by requests IDs
type RequestBulkRetryCreateRequestQueryId struct {
	// Request ID
	String     string
	StringList []string

	typ string
}

func NewRequestBulkRetryCreateRequestQueryIdFromString(value string) *RequestBulkRetryCreateRequestQueryId {
	return &RequestBulkRetryCreateRequestQueryId{typ: "String", String: value}
}

func NewRequestBulkRetryCreateRequestQueryIdFromStringList(value []string) *RequestBulkRetryCreateRequestQueryId {
	return &RequestBulkRetryCreateRequestQueryId{typ: "StringList", StringList: value}
}

func (r *RequestBulkRetryCreateRequestQueryId) GetString() string {
	if r == nil {
		return ""
	}
	return r.String
}

func (r *RequestBulkRetryCreateRequestQueryId) GetStringList() []string {
	if r == nil {
		return nil
	}
	return r.StringList
}

func (r *RequestBulkRetryCreateRequestQueryId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typ = "String"
		r.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		r.typ = "StringList"
		r.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestBulkRetryCreateRequestQueryId) MarshalJSON() ([]byte, error) {
	if r.typ == "String" || r.String != "" {
		return json.Marshal(r.String)
	}
	if r.typ == "StringList" || r.StringList != nil {
		return json.Marshal(r.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQueryIdVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (r *RequestBulkRetryCreateRequestQueryId) Accept(visitor RequestBulkRetryCreateRequestQueryIdVisitor) error {
	if r.typ == "String" || r.String != "" {
		return visitor.VisitString(r.String)
	}
	if r.typ == "StringList" || r.StringList != nil {
		return visitor.VisitStringList(r.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// Filter by count of ignored events
type RequestBulkRetryCreateRequestQueryIgnoredCount struct {
	Integer     int
	Operators   *Operators
	IntegerList []int

	typ string
}

func NewRequestBulkRetryCreateRequestQueryIgnoredCountFromInteger(value int) *RequestBulkRetryCreateRequestQueryIgnoredCount {
	return &RequestBulkRetryCreateRequestQueryIgnoredCount{typ: "Integer", Integer: value}
}

func NewRequestBulkRetryCreateRequestQueryIgnoredCountFromOperators(value *Operators) *RequestBulkRetryCreateRequestQueryIgnoredCount {
	return &RequestBulkRetryCreateRequestQueryIgnoredCount{typ: "Operators", Operators: value}
}

func NewRequestBulkRetryCreateRequestQueryIgnoredCountFromIntegerList(value []int) *RequestBulkRetryCreateRequestQueryIgnoredCount {
	return &RequestBulkRetryCreateRequestQueryIgnoredCount{typ: "IntegerList", IntegerList: value}
}

func (r *RequestBulkRetryCreateRequestQueryIgnoredCount) GetInteger() int {
	if r == nil {
		return 0
	}
	return r.Integer
}

func (r *RequestBulkRetryCreateRequestQueryIgnoredCount) GetOperators() *Operators {
	if r == nil {
		return nil
	}
	return r.Operators
}

func (r *RequestBulkRetryCreateRequestQueryIgnoredCount) GetIntegerList() []int {
	if r == nil {
		return nil
	}
	return r.IntegerList
}

func (r *RequestBulkRetryCreateRequestQueryIgnoredCount) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		r.typ = "Integer"
		r.Integer = valueInteger
		return nil
	}
	valueOperators := new(Operators)
	if err := json.Unmarshal(data, &valueOperators); err == nil {
		r.typ = "Operators"
		r.Operators = valueOperators
		return nil
	}
	var valueIntegerList []int
	if err := json.Unmarshal(data, &valueIntegerList); err == nil {
		r.typ = "IntegerList"
		r.IntegerList = valueIntegerList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestBulkRetryCreateRequestQueryIgnoredCount) MarshalJSON() ([]byte, error) {
	if r.typ == "Integer" || r.Integer != 0 {
		return json.Marshal(r.Integer)
	}
	if r.typ == "Operators" || r.Operators != nil {
		return json.Marshal(r.Operators)
	}
	if r.typ == "IntegerList" || r.IntegerList != nil {
		return json.Marshal(r.IntegerList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQueryIgnoredCountVisitor interface {
	VisitInteger(int) error
	VisitOperators(*Operators) error
	VisitIntegerList([]int) error
}

func (r *RequestBulkRetryCreateRequestQueryIgnoredCount) Accept(visitor RequestBulkRetryCreateRequestQueryIgnoredCountVisitor) error {
	if r.typ == "Integer" || r.Integer != 0 {
		return visitor.VisitInteger(r.Integer)
	}
	if r.typ == "Operators" || r.Operators != nil {
		return visitor.VisitOperators(r.Operators)
	}
	if r.typ == "IntegerList" || r.IntegerList != nil {
		return visitor.VisitIntegerList(r.IntegerList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// Filter by event ingested date
type RequestBulkRetryCreateRequestQueryIngestedAt struct {
	DateTime  time.Time
	Operators *Operators

	typ string
}

func NewRequestBulkRetryCreateRequestQueryIngestedAtFromDateTime(value time.Time) *RequestBulkRetryCreateRequestQueryIngestedAt {
	return &RequestBulkRetryCreateRequestQueryIngestedAt{typ: "DateTime", DateTime: value}
}

func NewRequestBulkRetryCreateRequestQueryIngestedAtFromOperators(value *Operators) *RequestBulkRetryCreateRequestQueryIngestedAt {
	return &RequestBulkRetryCreateRequestQueryIngestedAt{typ: "Operators", Operators: value}
}

func (r *RequestBulkRetryCreateRequestQueryIngestedAt) GetDateTime() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.DateTime
}

func (r *RequestBulkRetryCreateRequestQueryIngestedAt) GetOperators() *Operators {
	if r == nil {
		return nil
	}
	return r.Operators
}

func (r *RequestBulkRetryCreateRequestQueryIngestedAt) UnmarshalJSON(data []byte) error {
	var valueDateTime *internal.DateTime
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		r.typ = "DateTime"
		r.DateTime = valueDateTime.Time()
		return nil
	}
	valueOperators := new(Operators)
	if err := json.Unmarshal(data, &valueOperators); err == nil {
		r.typ = "Operators"
		r.Operators = valueOperators
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestBulkRetryCreateRequestQueryIngestedAt) MarshalJSON() ([]byte, error) {
	if r.typ == "DateTime" || !r.DateTime.IsZero() {
		return json.Marshal(internal.NewDateTime(r.DateTime))
	}
	if r.typ == "Operators" || r.Operators != nil {
		return json.Marshal(r.Operators)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQueryIngestedAtVisitor interface {
	VisitDateTime(time.Time) error
	VisitOperators(*Operators) error
}

func (r *RequestBulkRetryCreateRequestQueryIngestedAt) Accept(visitor RequestBulkRetryCreateRequestQueryIngestedAtVisitor) error {
	if r.typ == "DateTime" || !r.DateTime.IsZero() {
		return visitor.VisitDateTime(r.DateTime)
	}
	if r.typ == "Operators" || r.Operators != nil {
		return visitor.VisitOperators(r.Operators)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type RequestBulkRetryCreateRequestQueryParsedQuery struct {
	String                                           string
	RequestBulkRetryCreateRequestQueryParsedQueryOne *RequestBulkRetryCreateRequestQueryParsedQueryOne

	typ string
}

func NewRequestBulkRetryCreateRequestQueryParsedQueryFromString(value string) *RequestBulkRetryCreateRequestQueryParsedQuery {
	return &RequestBulkRetryCreateRequestQueryParsedQuery{typ: "String", String: value}
}

func NewRequestBulkRetryCreateRequestQueryParsedQueryFromRequestBulkRetryCreateRequestQueryParsedQueryOne(value *RequestBulkRetryCreateRequestQueryParsedQueryOne) *RequestBulkRetryCreateRequestQueryParsedQuery {
	return &RequestBulkRetryCreateRequestQueryParsedQuery{typ: "RequestBulkRetryCreateRequestQueryParsedQueryOne", RequestBulkRetryCreateRequestQueryParsedQueryOne: value}
}

func (r *RequestBulkRetryCreateRequestQueryParsedQuery) GetString() string {
	if r == nil {
		return ""
	}
	return r.String
}

func (r *RequestBulkRetryCreateRequestQueryParsedQuery) GetRequestBulkRetryCreateRequestQueryParsedQueryOne() *RequestBulkRetryCreateRequestQueryParsedQueryOne {
	if r == nil {
		return nil
	}
	return r.RequestBulkRetryCreateRequestQueryParsedQueryOne
}

func (r *RequestBulkRetryCreateRequestQueryParsedQuery) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typ = "String"
		r.String = valueString
		return nil
	}
	valueRequestBulkRetryCreateRequestQueryParsedQueryOne := new(RequestBulkRetryCreateRequestQueryParsedQueryOne)
	if err := json.Unmarshal(data, &valueRequestBulkRetryCreateRequestQueryParsedQueryOne); err == nil {
		r.typ = "RequestBulkRetryCreateRequestQueryParsedQueryOne"
		r.RequestBulkRetryCreateRequestQueryParsedQueryOne = valueRequestBulkRetryCreateRequestQueryParsedQueryOne
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestBulkRetryCreateRequestQueryParsedQuery) MarshalJSON() ([]byte, error) {
	if r.typ == "String" || r.String != "" {
		return json.Marshal(r.String)
	}
	if r.typ == "RequestBulkRetryCreateRequestQueryParsedQueryOne" || r.RequestBulkRetryCreateRequestQueryParsedQueryOne != nil {
		return json.Marshal(r.RequestBulkRetryCreateRequestQueryParsedQueryOne)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQueryParsedQueryVisitor interface {
	VisitString(string) error
	VisitRequestBulkRetryCreateRequestQueryParsedQueryOne(*RequestBulkRetryCreateRequestQueryParsedQueryOne) error
}

func (r *RequestBulkRetryCreateRequestQueryParsedQuery) Accept(visitor RequestBulkRetryCreateRequestQueryParsedQueryVisitor) error {
	if r.typ == "String" || r.String != "" {
		return visitor.VisitString(r.String)
	}
	if r.typ == "RequestBulkRetryCreateRequestQueryParsedQueryOne" || r.RequestBulkRetryCreateRequestQueryParsedQueryOne != nil {
		return visitor.VisitRequestBulkRetryCreateRequestQueryParsedQueryOne(r.RequestBulkRetryCreateRequestQueryParsedQueryOne)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQueryParsedQueryOne struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestBulkRetryCreateRequestQueryParsedQueryOne) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestBulkRetryCreateRequestQueryParsedQueryOne) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestBulkRetryCreateRequestQueryParsedQueryOne
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestBulkRetryCreateRequestQueryParsedQueryOne(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestBulkRetryCreateRequestQueryParsedQueryOne) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Filter by rejection cause
type RequestBulkRetryCreateRequestQueryRejectionCause struct {
	RequestRejectionCause     RequestRejectionCause
	RequestRejectionCauseList []RequestRejectionCause

	typ string
}

func NewRequestBulkRetryCreateRequestQueryRejectionCauseFromRequestRejectionCause(value RequestRejectionCause) *RequestBulkRetryCreateRequestQueryRejectionCause {
	return &RequestBulkRetryCreateRequestQueryRejectionCause{typ: "RequestRejectionCause", RequestRejectionCause: value}
}

func NewRequestBulkRetryCreateRequestQueryRejectionCauseFromRequestRejectionCauseList(value []RequestRejectionCause) *RequestBulkRetryCreateRequestQueryRejectionCause {
	return &RequestBulkRetryCreateRequestQueryRejectionCause{typ: "RequestRejectionCauseList", RequestRejectionCauseList: value}
}

func (r *RequestBulkRetryCreateRequestQueryRejectionCause) GetRequestRejectionCause() RequestRejectionCause {
	if r == nil {
		return ""
	}
	return r.RequestRejectionCause
}

func (r *RequestBulkRetryCreateRequestQueryRejectionCause) GetRequestRejectionCauseList() []RequestRejectionCause {
	if r == nil {
		return nil
	}
	return r.RequestRejectionCauseList
}

func (r *RequestBulkRetryCreateRequestQueryRejectionCause) UnmarshalJSON(data []byte) error {
	var valueRequestRejectionCause RequestRejectionCause
	if err := json.Unmarshal(data, &valueRequestRejectionCause); err == nil {
		r.typ = "RequestRejectionCause"
		r.RequestRejectionCause = valueRequestRejectionCause
		return nil
	}
	var valueRequestRejectionCauseList []RequestRejectionCause
	if err := json.Unmarshal(data, &valueRequestRejectionCauseList); err == nil {
		r.typ = "RequestRejectionCauseList"
		r.RequestRejectionCauseList = valueRequestRejectionCauseList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestBulkRetryCreateRequestQueryRejectionCause) MarshalJSON() ([]byte, error) {
	if r.typ == "RequestRejectionCause" || r.RequestRejectionCause != "" {
		return json.Marshal(r.RequestRejectionCause)
	}
	if r.typ == "RequestRejectionCauseList" || r.RequestRejectionCauseList != nil {
		return json.Marshal(r.RequestRejectionCauseList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQueryRejectionCauseVisitor interface {
	VisitRequestRejectionCause(RequestRejectionCause) error
	VisitRequestRejectionCauseList([]RequestRejectionCause) error
}

func (r *RequestBulkRetryCreateRequestQueryRejectionCause) Accept(visitor RequestBulkRetryCreateRequestQueryRejectionCauseVisitor) error {
	if r.typ == "RequestRejectionCause" || r.RequestRejectionCause != "" {
		return visitor.VisitRequestRejectionCause(r.RequestRejectionCause)
	}
	if r.typ == "RequestRejectionCauseList" || r.RequestRejectionCauseList != nil {
		return visitor.VisitRequestRejectionCauseList(r.RequestRejectionCauseList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// Filter by source IDs
type RequestBulkRetryCreateRequestQuerySourceId struct {
	// Source ID
	String     string
	StringList []string

	typ string
}

func NewRequestBulkRetryCreateRequestQuerySourceIdFromString(value string) *RequestBulkRetryCreateRequestQuerySourceId {
	return &RequestBulkRetryCreateRequestQuerySourceId{typ: "String", String: value}
}

func NewRequestBulkRetryCreateRequestQuerySourceIdFromStringList(value []string) *RequestBulkRetryCreateRequestQuerySourceId {
	return &RequestBulkRetryCreateRequestQuerySourceId{typ: "StringList", StringList: value}
}

func (r *RequestBulkRetryCreateRequestQuerySourceId) GetString() string {
	if r == nil {
		return ""
	}
	return r.String
}

func (r *RequestBulkRetryCreateRequestQuerySourceId) GetStringList() []string {
	if r == nil {
		return nil
	}
	return r.StringList
}

func (r *RequestBulkRetryCreateRequestQuerySourceId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typ = "String"
		r.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		r.typ = "StringList"
		r.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestBulkRetryCreateRequestQuerySourceId) MarshalJSON() ([]byte, error) {
	if r.typ == "String" || r.String != "" {
		return json.Marshal(r.String)
	}
	if r.typ == "StringList" || r.StringList != nil {
		return json.Marshal(r.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RequestBulkRetryCreateRequestQuerySourceIdVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (r *RequestBulkRetryCreateRequestQuerySourceId) Accept(visitor RequestBulkRetryCreateRequestQuerySourceIdVisitor) error {
	if r.typ == "String" || r.String != "" {
		return visitor.VisitString(r.String)
	}
	if r.typ == "StringList" || r.StringList != nil {
		return visitor.VisitStringList(r.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

// Filter by status
type RequestBulkRetryCreateRequestQueryStatus string

const (
	RequestBulkRetryCreateRequestQueryStatusAccepted RequestBulkRetryCreateRequestQueryStatus = "accepted"
	RequestBulkRetryCreateRequestQueryStatusRejected RequestBulkRetryCreateRequestQueryStatus = "rejected"
)

func NewRequestBulkRetryCreateRequestQueryStatusFromString(s string) (RequestBulkRetryCreateRequestQueryStatus, error) {
	switch s {
	case "accepted":
		return RequestBulkRetryCreateRequestQueryStatusAccepted, nil
	case "rejected":
		return RequestBulkRetryCreateRequestQueryStatusRejected, nil
	}
	var t RequestBulkRetryCreateRequestQueryStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestBulkRetryCreateRequestQueryStatus) Ptr() *RequestBulkRetryCreateRequestQueryStatus {
	return &r
}

type RequestBulkRetryListRequestDir string

const (
	RequestBulkRetryListRequestDirAsc  RequestBulkRetryListRequestDir = "asc"
	RequestBulkRetryListRequestDirDesc RequestBulkRetryListRequestDir = "desc"
)

func NewRequestBulkRetryListRequestDirFromString(s string) (RequestBulkRetryListRequestDir, error) {
	switch s {
	case "asc":
		return RequestBulkRetryListRequestDirAsc, nil
	case "desc":
		return RequestBulkRetryListRequestDirDesc, nil
	}
	var t RequestBulkRetryListRequestDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestBulkRetryListRequestDir) Ptr() *RequestBulkRetryListRequestDir {
	return &r
}

type RequestBulkRetryListRequestOrderBy string

const (
	RequestBulkRetryListRequestOrderByCreatedAt RequestBulkRetryListRequestOrderBy = "created_at"
)

func NewRequestBulkRetryListRequestOrderByFromString(s string) (RequestBulkRetryListRequestOrderBy, error) {
	switch s {
	case "created_at":
		return RequestBulkRetryListRequestOrderByCreatedAt, nil
	}
	var t RequestBulkRetryListRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestBulkRetryListRequestOrderBy) Ptr() *RequestBulkRetryListRequestOrderBy {
	return &r
}

type RequestBulkRetryPlanResponse struct {
	// Number of batches required to complete the bulk retry
	EstimatedBatch *int `json:"estimated_batch,omitempty" url:"estimated_batch,omitempty"`
	// Number of estimated events to be retried
	EstimatedCount *int `json:"estimated_count,omitempty" url:"estimated_count,omitempty"`
	// Progression of the batch operations, values 0 - 1
	Progress *float64 `json:"progress,omitempty" url:"progress,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestBulkRetryPlanResponse) GetEstimatedBatch() *int {
	if r == nil {
		return nil
	}
	return r.EstimatedBatch
}

func (r *RequestBulkRetryPlanResponse) GetEstimatedCount() *int {
	if r == nil {
		return nil
	}
	return r.EstimatedCount
}

func (r *RequestBulkRetryPlanResponse) GetProgress() *float64 {
	if r == nil {
		return nil
	}
	return r.Progress
}

func (r *RequestBulkRetryPlanResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestBulkRetryPlanResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestBulkRetryPlanResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestBulkRetryPlanResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestBulkRetryPlanResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
