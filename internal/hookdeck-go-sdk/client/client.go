// This file was auto-generated by Fern from our API Definition.

package client

import (
	attempt "github.com/hookdeck/hookdeck-go-sdk/attempt"
	bookmark "github.com/hookdeck/hookdeck-go-sdk/bookmark"
	connection "github.com/hookdeck/hookdeck-go-sdk/connection"
	core "github.com/hookdeck/hookdeck-go-sdk/core"
	customdomain "github.com/hookdeck/hookdeck-go-sdk/customdomain"
	destination "github.com/hookdeck/hookdeck-go-sdk/destination"
	event "github.com/hookdeck/hookdeck-go-sdk/event"
	eventbulkretry "github.com/hookdeck/hookdeck-go-sdk/eventbulkretry"
	ignoredeventbulkretry "github.com/hookdeck/hookdeck-go-sdk/ignoredeventbulkretry"
	internal "github.com/hookdeck/hookdeck-go-sdk/internal"
	issue "github.com/hookdeck/hookdeck-go-sdk/issue"
	issuetrigger "github.com/hookdeck/hookdeck-go-sdk/issuetrigger"
	notification "github.com/hookdeck/hookdeck-go-sdk/notification"
	option "github.com/hookdeck/hookdeck-go-sdk/option"
	request "github.com/hookdeck/hookdeck-go-sdk/request"
	requestbulkretry "github.com/hookdeck/hookdeck-go-sdk/requestbulkretry"
	source "github.com/hookdeck/hookdeck-go-sdk/source"
	transformation "github.com/hookdeck/hookdeck-go-sdk/transformation"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header

	IssueTrigger          *issuetrigger.Client
	Attempt               *attempt.Client
	Bookmark              *bookmark.Client
	Destination           *destination.Client
	EventBulkRetry        *eventbulkretry.Client
	Event                 *event.Client
	IgnoredEventBulkRetry *ignoredeventbulkretry.Client
	Issue                 *issue.Client
	Request               *request.Client
	RequestBulkRetry      *requestbulkretry.Client
	Source                *source.Client
	Notification          *notification.Client
	CustomDomain          *customdomain.Client
	Transformation        *transformation.Client
	Connection            *connection.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:                options.ToHeader(),
		IssueTrigger:          issuetrigger.NewClient(opts...),
		Attempt:               attempt.NewClient(opts...),
		Bookmark:              bookmark.NewClient(opts...),
		Destination:           destination.NewClient(opts...),
		EventBulkRetry:        eventbulkretry.NewClient(opts...),
		Event:                 event.NewClient(opts...),
		IgnoredEventBulkRetry: ignoredeventbulkretry.NewClient(opts...),
		Issue:                 issue.NewClient(opts...),
		Request:               request.NewClient(opts...),
		RequestBulkRetry:      requestbulkretry.NewClient(opts...),
		Source:                source.NewClient(opts...),
		Notification:          notification.NewClient(opts...),
		CustomDomain:          customdomain.NewClient(opts...),
		Transformation:        transformation.NewClient(opts...),
		Connection:            connection.NewClient(opts...),
	}
}
