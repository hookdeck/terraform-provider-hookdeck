// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/hookdeck/hookdeck-go-sdk/core"
	internal "github.com/hookdeck/hookdeck-go-sdk/internal"
	time "time"
)

type EventBulkRetryCreateRequest struct {
	// Filter properties for the events to be included in the bulk retry
	Query *core.Optional[EventBulkRetryCreateRequestQuery] `json:"query,omitempty" url:"-"`
}

type EventBulkRetryListRequest struct {
	CancelledAt       *time.Time                        `json:"-" url:"cancelled_at,omitempty"`
	CompletedAt       *time.Time                        `json:"-" url:"completed_at,omitempty"`
	CreatedAt         *time.Time                        `json:"-" url:"created_at,omitempty"`
	Id                []*string                         `json:"-" url:"id,omitempty"`
	QueryPartialMatch *bool                             `json:"-" url:"query_partial_match,omitempty"`
	InProgress        *bool                             `json:"-" url:"in_progress,omitempty"`
	OrderBy           *EventBulkRetryListRequestOrderBy `json:"-" url:"order_by,omitempty"`
	Dir               *EventBulkRetryListRequestDir     `json:"-" url:"dir,omitempty"`
	Limit             *int                              `json:"-" url:"limit,omitempty"`
	Next              *string                           `json:"-" url:"next,omitempty"`
	Prev              *string                           `json:"-" url:"prev,omitempty"`
}

// Filter properties for the events to be included in the bulk retry
type EventBulkRetryCreateRequestQuery struct {
	// Filter by event IDs
	Id *EventBulkRetryCreateRequestQueryId `json:"id,omitempty" url:"id,omitempty"`
	// Lifecyle status of the event
	Status *EventBulkRetryCreateRequestQueryStatus `json:"status,omitempty" url:"status,omitempty"`
	// Filter by webhook connection IDs
	WebhookId *EventBulkRetryCreateRequestQueryWebhookId `json:"webhook_id,omitempty" url:"webhook_id,omitempty"`
	// Filter by destination IDs
	DestinationId *EventBulkRetryCreateRequestQueryDestinationId `json:"destination_id,omitempty" url:"destination_id,omitempty"`
	// Filter by source IDs
	SourceId *EventBulkRetryCreateRequestQuerySourceId `json:"source_id,omitempty" url:"source_id,omitempty"`
	// Filter by number of attempts
	Attempts *EventBulkRetryCreateRequestQueryAttempts `json:"attempts,omitempty" url:"attempts,omitempty"`
	// Filter by HTTP response status code
	ResponseStatus *EventBulkRetryCreateRequestQueryResponseStatus `json:"response_status,omitempty" url:"response_status,omitempty"`
	// Filter by `successful_at` date using a date operator
	SuccessfulAt *EventBulkRetryCreateRequestQuerySuccessfulAt `json:"successful_at,omitempty" url:"successful_at,omitempty"`
	// Filter by `created_at` date using a date operator
	CreatedAt *EventBulkRetryCreateRequestQueryCreatedAt `json:"created_at,omitempty" url:"created_at,omitempty"`
	// Filter by error code code
	ErrorCode *EventBulkRetryCreateRequestQueryErrorCode `json:"error_code,omitempty" url:"error_code,omitempty"`
	// Filter by CLI IDs. `?[any]=true` operator for any CLI.
	CliId *EventBulkRetryCreateRequestQueryCliId `json:"cli_id,omitempty" url:"cli_id,omitempty"`
	// Filter by `last_attempt_at` date using a date operator
	LastAttemptAt *EventBulkRetryCreateRequestQueryLastAttemptAt `json:"last_attempt_at,omitempty" url:"last_attempt_at,omitempty"`
	// URL Encoded string of the value to match partially to the body, headers, parsed_query or path
	SearchTerm *string `json:"search_term,omitempty" url:"search_term,omitempty"`
	// URL Encoded string of the JSON to match to the data headers
	Headers *EventBulkRetryCreateRequestQueryHeaders `json:"headers,omitempty" url:"headers,omitempty"`
	// URL Encoded string of the JSON to match to the data body
	Body *EventBulkRetryCreateRequestQueryBody `json:"body,omitempty" url:"body,omitempty"`
	// URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
	ParsedQuery *EventBulkRetryCreateRequestQueryParsedQuery `json:"parsed_query,omitempty" url:"parsed_query,omitempty"`
	// URL Encoded string of the value to match partially to the path
	Path        *string                                      `json:"path,omitempty" url:"path,omitempty"`
	CliUserId   *EventBulkRetryCreateRequestQueryCliUserId   `json:"cli_user_id,omitempty" url:"cli_user_id,omitempty"`
	IssueId     *EventBulkRetryCreateRequestQueryIssueId     `json:"issue_id,omitempty" url:"issue_id,omitempty"`
	EventDataId *EventBulkRetryCreateRequestQueryEventDataId `json:"event_data_id,omitempty" url:"event_data_id,omitempty"`
	BulkRetryId *EventBulkRetryCreateRequestQueryBulkRetryId `json:"bulk_retry_id,omitempty" url:"bulk_retry_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventBulkRetryCreateRequestQuery) GetId() *EventBulkRetryCreateRequestQueryId {
	if e == nil {
		return nil
	}
	return e.Id
}

func (e *EventBulkRetryCreateRequestQuery) GetStatus() *EventBulkRetryCreateRequestQueryStatus {
	if e == nil {
		return nil
	}
	return e.Status
}

func (e *EventBulkRetryCreateRequestQuery) GetWebhookId() *EventBulkRetryCreateRequestQueryWebhookId {
	if e == nil {
		return nil
	}
	return e.WebhookId
}

func (e *EventBulkRetryCreateRequestQuery) GetDestinationId() *EventBulkRetryCreateRequestQueryDestinationId {
	if e == nil {
		return nil
	}
	return e.DestinationId
}

func (e *EventBulkRetryCreateRequestQuery) GetSourceId() *EventBulkRetryCreateRequestQuerySourceId {
	if e == nil {
		return nil
	}
	return e.SourceId
}

func (e *EventBulkRetryCreateRequestQuery) GetAttempts() *EventBulkRetryCreateRequestQueryAttempts {
	if e == nil {
		return nil
	}
	return e.Attempts
}

func (e *EventBulkRetryCreateRequestQuery) GetResponseStatus() *EventBulkRetryCreateRequestQueryResponseStatus {
	if e == nil {
		return nil
	}
	return e.ResponseStatus
}

func (e *EventBulkRetryCreateRequestQuery) GetSuccessfulAt() *EventBulkRetryCreateRequestQuerySuccessfulAt {
	if e == nil {
		return nil
	}
	return e.SuccessfulAt
}

func (e *EventBulkRetryCreateRequestQuery) GetCreatedAt() *EventBulkRetryCreateRequestQueryCreatedAt {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *EventBulkRetryCreateRequestQuery) GetErrorCode() *EventBulkRetryCreateRequestQueryErrorCode {
	if e == nil {
		return nil
	}
	return e.ErrorCode
}

func (e *EventBulkRetryCreateRequestQuery) GetCliId() *EventBulkRetryCreateRequestQueryCliId {
	if e == nil {
		return nil
	}
	return e.CliId
}

func (e *EventBulkRetryCreateRequestQuery) GetLastAttemptAt() *EventBulkRetryCreateRequestQueryLastAttemptAt {
	if e == nil {
		return nil
	}
	return e.LastAttemptAt
}

func (e *EventBulkRetryCreateRequestQuery) GetSearchTerm() *string {
	if e == nil {
		return nil
	}
	return e.SearchTerm
}

func (e *EventBulkRetryCreateRequestQuery) GetHeaders() *EventBulkRetryCreateRequestQueryHeaders {
	if e == nil {
		return nil
	}
	return e.Headers
}

func (e *EventBulkRetryCreateRequestQuery) GetBody() *EventBulkRetryCreateRequestQueryBody {
	if e == nil {
		return nil
	}
	return e.Body
}

func (e *EventBulkRetryCreateRequestQuery) GetParsedQuery() *EventBulkRetryCreateRequestQueryParsedQuery {
	if e == nil {
		return nil
	}
	return e.ParsedQuery
}

func (e *EventBulkRetryCreateRequestQuery) GetPath() *string {
	if e == nil {
		return nil
	}
	return e.Path
}

func (e *EventBulkRetryCreateRequestQuery) GetCliUserId() *EventBulkRetryCreateRequestQueryCliUserId {
	if e == nil {
		return nil
	}
	return e.CliUserId
}

func (e *EventBulkRetryCreateRequestQuery) GetIssueId() *EventBulkRetryCreateRequestQueryIssueId {
	if e == nil {
		return nil
	}
	return e.IssueId
}

func (e *EventBulkRetryCreateRequestQuery) GetEventDataId() *EventBulkRetryCreateRequestQueryEventDataId {
	if e == nil {
		return nil
	}
	return e.EventDataId
}

func (e *EventBulkRetryCreateRequestQuery) GetBulkRetryId() *EventBulkRetryCreateRequestQueryBulkRetryId {
	if e == nil {
		return nil
	}
	return e.BulkRetryId
}

func (e *EventBulkRetryCreateRequestQuery) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventBulkRetryCreateRequestQuery) UnmarshalJSON(data []byte) error {
	type unmarshaler EventBulkRetryCreateRequestQuery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventBulkRetryCreateRequestQuery(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventBulkRetryCreateRequestQuery) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Filter by number of attempts
type EventBulkRetryCreateRequestQueryAttempts struct {
	Integer   int
	Operators *Operators

	typ string
}

func NewEventBulkRetryCreateRequestQueryAttemptsFromInteger(value int) *EventBulkRetryCreateRequestQueryAttempts {
	return &EventBulkRetryCreateRequestQueryAttempts{typ: "Integer", Integer: value}
}

func NewEventBulkRetryCreateRequestQueryAttemptsFromOperators(value *Operators) *EventBulkRetryCreateRequestQueryAttempts {
	return &EventBulkRetryCreateRequestQueryAttempts{typ: "Operators", Operators: value}
}

func (e *EventBulkRetryCreateRequestQueryAttempts) GetInteger() int {
	if e == nil {
		return 0
	}
	return e.Integer
}

func (e *EventBulkRetryCreateRequestQueryAttempts) GetOperators() *Operators {
	if e == nil {
		return nil
	}
	return e.Operators
}

func (e *EventBulkRetryCreateRequestQueryAttempts) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		e.typ = "Integer"
		e.Integer = valueInteger
		return nil
	}
	valueOperators := new(Operators)
	if err := json.Unmarshal(data, &valueOperators); err == nil {
		e.typ = "Operators"
		e.Operators = valueOperators
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryAttempts) MarshalJSON() ([]byte, error) {
	if e.typ == "Integer" || e.Integer != 0 {
		return json.Marshal(e.Integer)
	}
	if e.typ == "Operators" || e.Operators != nil {
		return json.Marshal(e.Operators)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryAttemptsVisitor interface {
	VisitInteger(int) error
	VisitOperators(*Operators) error
}

func (e *EventBulkRetryCreateRequestQueryAttempts) Accept(visitor EventBulkRetryCreateRequestQueryAttemptsVisitor) error {
	if e.typ == "Integer" || e.Integer != 0 {
		return visitor.VisitInteger(e.Integer)
	}
	if e.typ == "Operators" || e.Operators != nil {
		return visitor.VisitOperators(e.Operators)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// URL Encoded string of the JSON to match to the data body
type EventBulkRetryCreateRequestQueryBody struct {
	String                                  string
	EventBulkRetryCreateRequestQueryBodyOne *EventBulkRetryCreateRequestQueryBodyOne

	typ string
}

func NewEventBulkRetryCreateRequestQueryBodyFromString(value string) *EventBulkRetryCreateRequestQueryBody {
	return &EventBulkRetryCreateRequestQueryBody{typ: "String", String: value}
}

func NewEventBulkRetryCreateRequestQueryBodyFromEventBulkRetryCreateRequestQueryBodyOne(value *EventBulkRetryCreateRequestQueryBodyOne) *EventBulkRetryCreateRequestQueryBody {
	return &EventBulkRetryCreateRequestQueryBody{typ: "EventBulkRetryCreateRequestQueryBodyOne", EventBulkRetryCreateRequestQueryBodyOne: value}
}

func (e *EventBulkRetryCreateRequestQueryBody) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EventBulkRetryCreateRequestQueryBody) GetEventBulkRetryCreateRequestQueryBodyOne() *EventBulkRetryCreateRequestQueryBodyOne {
	if e == nil {
		return nil
	}
	return e.EventBulkRetryCreateRequestQueryBodyOne
}

func (e *EventBulkRetryCreateRequestQueryBody) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valueEventBulkRetryCreateRequestQueryBodyOne := new(EventBulkRetryCreateRequestQueryBodyOne)
	if err := json.Unmarshal(data, &valueEventBulkRetryCreateRequestQueryBodyOne); err == nil {
		e.typ = "EventBulkRetryCreateRequestQueryBodyOne"
		e.EventBulkRetryCreateRequestQueryBodyOne = valueEventBulkRetryCreateRequestQueryBodyOne
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryBody) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "EventBulkRetryCreateRequestQueryBodyOne" || e.EventBulkRetryCreateRequestQueryBodyOne != nil {
		return json.Marshal(e.EventBulkRetryCreateRequestQueryBodyOne)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryBodyVisitor interface {
	VisitString(string) error
	VisitEventBulkRetryCreateRequestQueryBodyOne(*EventBulkRetryCreateRequestQueryBodyOne) error
}

func (e *EventBulkRetryCreateRequestQueryBody) Accept(visitor EventBulkRetryCreateRequestQueryBodyVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "EventBulkRetryCreateRequestQueryBodyOne" || e.EventBulkRetryCreateRequestQueryBodyOne != nil {
		return visitor.VisitEventBulkRetryCreateRequestQueryBodyOne(e.EventBulkRetryCreateRequestQueryBodyOne)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryBodyOne struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventBulkRetryCreateRequestQueryBodyOne) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventBulkRetryCreateRequestQueryBodyOne) UnmarshalJSON(data []byte) error {
	type unmarshaler EventBulkRetryCreateRequestQueryBodyOne
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventBulkRetryCreateRequestQueryBodyOne(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventBulkRetryCreateRequestQueryBodyOne) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventBulkRetryCreateRequestQueryBulkRetryId struct {
	String     string
	StringList []string

	typ string
}

func NewEventBulkRetryCreateRequestQueryBulkRetryIdFromString(value string) *EventBulkRetryCreateRequestQueryBulkRetryId {
	return &EventBulkRetryCreateRequestQueryBulkRetryId{typ: "String", String: value}
}

func NewEventBulkRetryCreateRequestQueryBulkRetryIdFromStringList(value []string) *EventBulkRetryCreateRequestQueryBulkRetryId {
	return &EventBulkRetryCreateRequestQueryBulkRetryId{typ: "StringList", StringList: value}
}

func (e *EventBulkRetryCreateRequestQueryBulkRetryId) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EventBulkRetryCreateRequestQueryBulkRetryId) GetStringList() []string {
	if e == nil {
		return nil
	}
	return e.StringList
}

func (e *EventBulkRetryCreateRequestQueryBulkRetryId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		e.typ = "StringList"
		e.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryBulkRetryId) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return json.Marshal(e.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryBulkRetryIdVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (e *EventBulkRetryCreateRequestQueryBulkRetryId) Accept(visitor EventBulkRetryCreateRequestQueryBulkRetryIdVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return visitor.VisitStringList(e.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// Filter by CLI IDs. `?[any]=true` operator for any CLI.
type EventBulkRetryCreateRequestQueryCliId struct {
	String                                   string
	EventBulkRetryCreateRequestQueryCliIdAll *EventBulkRetryCreateRequestQueryCliIdAll
	StringList                               []string

	typ string
}

func NewEventBulkRetryCreateRequestQueryCliIdFromString(value string) *EventBulkRetryCreateRequestQueryCliId {
	return &EventBulkRetryCreateRequestQueryCliId{typ: "String", String: value}
}

func NewEventBulkRetryCreateRequestQueryCliIdFromEventBulkRetryCreateRequestQueryCliIdAll(value *EventBulkRetryCreateRequestQueryCliIdAll) *EventBulkRetryCreateRequestQueryCliId {
	return &EventBulkRetryCreateRequestQueryCliId{typ: "EventBulkRetryCreateRequestQueryCliIdAll", EventBulkRetryCreateRequestQueryCliIdAll: value}
}

func NewEventBulkRetryCreateRequestQueryCliIdFromStringList(value []string) *EventBulkRetryCreateRequestQueryCliId {
	return &EventBulkRetryCreateRequestQueryCliId{typ: "StringList", StringList: value}
}

func (e *EventBulkRetryCreateRequestQueryCliId) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EventBulkRetryCreateRequestQueryCliId) GetEventBulkRetryCreateRequestQueryCliIdAll() *EventBulkRetryCreateRequestQueryCliIdAll {
	if e == nil {
		return nil
	}
	return e.EventBulkRetryCreateRequestQueryCliIdAll
}

func (e *EventBulkRetryCreateRequestQueryCliId) GetStringList() []string {
	if e == nil {
		return nil
	}
	return e.StringList
}

func (e *EventBulkRetryCreateRequestQueryCliId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valueEventBulkRetryCreateRequestQueryCliIdAll := new(EventBulkRetryCreateRequestQueryCliIdAll)
	if err := json.Unmarshal(data, &valueEventBulkRetryCreateRequestQueryCliIdAll); err == nil {
		e.typ = "EventBulkRetryCreateRequestQueryCliIdAll"
		e.EventBulkRetryCreateRequestQueryCliIdAll = valueEventBulkRetryCreateRequestQueryCliIdAll
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		e.typ = "StringList"
		e.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryCliId) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "EventBulkRetryCreateRequestQueryCliIdAll" || e.EventBulkRetryCreateRequestQueryCliIdAll != nil {
		return json.Marshal(e.EventBulkRetryCreateRequestQueryCliIdAll)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return json.Marshal(e.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryCliIdVisitor interface {
	VisitString(string) error
	VisitEventBulkRetryCreateRequestQueryCliIdAll(*EventBulkRetryCreateRequestQueryCliIdAll) error
	VisitStringList([]string) error
}

func (e *EventBulkRetryCreateRequestQueryCliId) Accept(visitor EventBulkRetryCreateRequestQueryCliIdVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "EventBulkRetryCreateRequestQueryCliIdAll" || e.EventBulkRetryCreateRequestQueryCliIdAll != nil {
		return visitor.VisitEventBulkRetryCreateRequestQueryCliIdAll(e.EventBulkRetryCreateRequestQueryCliIdAll)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return visitor.VisitStringList(e.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryCliIdAll struct {
	Any *bool `json:"any,omitempty" url:"any,omitempty"`
	All *bool `json:"all,omitempty" url:"all,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventBulkRetryCreateRequestQueryCliIdAll) GetAny() *bool {
	if e == nil {
		return nil
	}
	return e.Any
}

func (e *EventBulkRetryCreateRequestQueryCliIdAll) GetAll() *bool {
	if e == nil {
		return nil
	}
	return e.All
}

func (e *EventBulkRetryCreateRequestQueryCliIdAll) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventBulkRetryCreateRequestQueryCliIdAll) UnmarshalJSON(data []byte) error {
	type unmarshaler EventBulkRetryCreateRequestQueryCliIdAll
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventBulkRetryCreateRequestQueryCliIdAll(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventBulkRetryCreateRequestQueryCliIdAll) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventBulkRetryCreateRequestQueryCliUserId struct {
	String     string
	StringList []string

	typ string
}

func NewEventBulkRetryCreateRequestQueryCliUserIdFromString(value string) *EventBulkRetryCreateRequestQueryCliUserId {
	return &EventBulkRetryCreateRequestQueryCliUserId{typ: "String", String: value}
}

func NewEventBulkRetryCreateRequestQueryCliUserIdFromStringList(value []string) *EventBulkRetryCreateRequestQueryCliUserId {
	return &EventBulkRetryCreateRequestQueryCliUserId{typ: "StringList", StringList: value}
}

func (e *EventBulkRetryCreateRequestQueryCliUserId) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EventBulkRetryCreateRequestQueryCliUserId) GetStringList() []string {
	if e == nil {
		return nil
	}
	return e.StringList
}

func (e *EventBulkRetryCreateRequestQueryCliUserId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		e.typ = "StringList"
		e.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryCliUserId) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return json.Marshal(e.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryCliUserIdVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (e *EventBulkRetryCreateRequestQueryCliUserId) Accept(visitor EventBulkRetryCreateRequestQueryCliUserIdVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return visitor.VisitStringList(e.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// Filter by `created_at` date using a date operator
type EventBulkRetryCreateRequestQueryCreatedAt struct {
	DateTime  time.Time
	Operators *Operators

	typ string
}

func NewEventBulkRetryCreateRequestQueryCreatedAtFromDateTime(value time.Time) *EventBulkRetryCreateRequestQueryCreatedAt {
	return &EventBulkRetryCreateRequestQueryCreatedAt{typ: "DateTime", DateTime: value}
}

func NewEventBulkRetryCreateRequestQueryCreatedAtFromOperators(value *Operators) *EventBulkRetryCreateRequestQueryCreatedAt {
	return &EventBulkRetryCreateRequestQueryCreatedAt{typ: "Operators", Operators: value}
}

func (e *EventBulkRetryCreateRequestQueryCreatedAt) GetDateTime() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.DateTime
}

func (e *EventBulkRetryCreateRequestQueryCreatedAt) GetOperators() *Operators {
	if e == nil {
		return nil
	}
	return e.Operators
}

func (e *EventBulkRetryCreateRequestQueryCreatedAt) UnmarshalJSON(data []byte) error {
	var valueDateTime *internal.DateTime
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		e.typ = "DateTime"
		e.DateTime = valueDateTime.Time()
		return nil
	}
	valueOperators := new(Operators)
	if err := json.Unmarshal(data, &valueOperators); err == nil {
		e.typ = "Operators"
		e.Operators = valueOperators
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryCreatedAt) MarshalJSON() ([]byte, error) {
	if e.typ == "DateTime" || !e.DateTime.IsZero() {
		return json.Marshal(internal.NewDateTime(e.DateTime))
	}
	if e.typ == "Operators" || e.Operators != nil {
		return json.Marshal(e.Operators)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryCreatedAtVisitor interface {
	VisitDateTime(time.Time) error
	VisitOperators(*Operators) error
}

func (e *EventBulkRetryCreateRequestQueryCreatedAt) Accept(visitor EventBulkRetryCreateRequestQueryCreatedAtVisitor) error {
	if e.typ == "DateTime" || !e.DateTime.IsZero() {
		return visitor.VisitDateTime(e.DateTime)
	}
	if e.typ == "Operators" || e.Operators != nil {
		return visitor.VisitOperators(e.Operators)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// Filter by destination IDs
type EventBulkRetryCreateRequestQueryDestinationId struct {
	// Destination ID
	String     string
	StringList []string

	typ string
}

func NewEventBulkRetryCreateRequestQueryDestinationIdFromString(value string) *EventBulkRetryCreateRequestQueryDestinationId {
	return &EventBulkRetryCreateRequestQueryDestinationId{typ: "String", String: value}
}

func NewEventBulkRetryCreateRequestQueryDestinationIdFromStringList(value []string) *EventBulkRetryCreateRequestQueryDestinationId {
	return &EventBulkRetryCreateRequestQueryDestinationId{typ: "StringList", StringList: value}
}

func (e *EventBulkRetryCreateRequestQueryDestinationId) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EventBulkRetryCreateRequestQueryDestinationId) GetStringList() []string {
	if e == nil {
		return nil
	}
	return e.StringList
}

func (e *EventBulkRetryCreateRequestQueryDestinationId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		e.typ = "StringList"
		e.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryDestinationId) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return json.Marshal(e.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryDestinationIdVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (e *EventBulkRetryCreateRequestQueryDestinationId) Accept(visitor EventBulkRetryCreateRequestQueryDestinationIdVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return visitor.VisitStringList(e.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// Filter by error code code
type EventBulkRetryCreateRequestQueryErrorCode struct {
	AttemptErrorCodes     AttemptErrorCodes
	AttemptErrorCodesList []AttemptErrorCodes

	typ string
}

func NewEventBulkRetryCreateRequestQueryErrorCodeFromAttemptErrorCodes(value AttemptErrorCodes) *EventBulkRetryCreateRequestQueryErrorCode {
	return &EventBulkRetryCreateRequestQueryErrorCode{typ: "AttemptErrorCodes", AttemptErrorCodes: value}
}

func NewEventBulkRetryCreateRequestQueryErrorCodeFromAttemptErrorCodesList(value []AttemptErrorCodes) *EventBulkRetryCreateRequestQueryErrorCode {
	return &EventBulkRetryCreateRequestQueryErrorCode{typ: "AttemptErrorCodesList", AttemptErrorCodesList: value}
}

func (e *EventBulkRetryCreateRequestQueryErrorCode) GetAttemptErrorCodes() AttemptErrorCodes {
	if e == nil {
		return ""
	}
	return e.AttemptErrorCodes
}

func (e *EventBulkRetryCreateRequestQueryErrorCode) GetAttemptErrorCodesList() []AttemptErrorCodes {
	if e == nil {
		return nil
	}
	return e.AttemptErrorCodesList
}

func (e *EventBulkRetryCreateRequestQueryErrorCode) UnmarshalJSON(data []byte) error {
	var valueAttemptErrorCodes AttemptErrorCodes
	if err := json.Unmarshal(data, &valueAttemptErrorCodes); err == nil {
		e.typ = "AttemptErrorCodes"
		e.AttemptErrorCodes = valueAttemptErrorCodes
		return nil
	}
	var valueAttemptErrorCodesList []AttemptErrorCodes
	if err := json.Unmarshal(data, &valueAttemptErrorCodesList); err == nil {
		e.typ = "AttemptErrorCodesList"
		e.AttemptErrorCodesList = valueAttemptErrorCodesList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryErrorCode) MarshalJSON() ([]byte, error) {
	if e.typ == "AttemptErrorCodes" || e.AttemptErrorCodes != "" {
		return json.Marshal(e.AttemptErrorCodes)
	}
	if e.typ == "AttemptErrorCodesList" || e.AttemptErrorCodesList != nil {
		return json.Marshal(e.AttemptErrorCodesList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryErrorCodeVisitor interface {
	VisitAttemptErrorCodes(AttemptErrorCodes) error
	VisitAttemptErrorCodesList([]AttemptErrorCodes) error
}

func (e *EventBulkRetryCreateRequestQueryErrorCode) Accept(visitor EventBulkRetryCreateRequestQueryErrorCodeVisitor) error {
	if e.typ == "AttemptErrorCodes" || e.AttemptErrorCodes != "" {
		return visitor.VisitAttemptErrorCodes(e.AttemptErrorCodes)
	}
	if e.typ == "AttemptErrorCodesList" || e.AttemptErrorCodesList != nil {
		return visitor.VisitAttemptErrorCodesList(e.AttemptErrorCodesList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryEventDataId struct {
	String     string
	StringList []string

	typ string
}

func NewEventBulkRetryCreateRequestQueryEventDataIdFromString(value string) *EventBulkRetryCreateRequestQueryEventDataId {
	return &EventBulkRetryCreateRequestQueryEventDataId{typ: "String", String: value}
}

func NewEventBulkRetryCreateRequestQueryEventDataIdFromStringList(value []string) *EventBulkRetryCreateRequestQueryEventDataId {
	return &EventBulkRetryCreateRequestQueryEventDataId{typ: "StringList", StringList: value}
}

func (e *EventBulkRetryCreateRequestQueryEventDataId) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EventBulkRetryCreateRequestQueryEventDataId) GetStringList() []string {
	if e == nil {
		return nil
	}
	return e.StringList
}

func (e *EventBulkRetryCreateRequestQueryEventDataId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		e.typ = "StringList"
		e.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryEventDataId) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return json.Marshal(e.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryEventDataIdVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (e *EventBulkRetryCreateRequestQueryEventDataId) Accept(visitor EventBulkRetryCreateRequestQueryEventDataIdVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return visitor.VisitStringList(e.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// URL Encoded string of the JSON to match to the data headers
type EventBulkRetryCreateRequestQueryHeaders struct {
	String                                     string
	EventBulkRetryCreateRequestQueryHeadersOne *EventBulkRetryCreateRequestQueryHeadersOne

	typ string
}

func NewEventBulkRetryCreateRequestQueryHeadersFromString(value string) *EventBulkRetryCreateRequestQueryHeaders {
	return &EventBulkRetryCreateRequestQueryHeaders{typ: "String", String: value}
}

func NewEventBulkRetryCreateRequestQueryHeadersFromEventBulkRetryCreateRequestQueryHeadersOne(value *EventBulkRetryCreateRequestQueryHeadersOne) *EventBulkRetryCreateRequestQueryHeaders {
	return &EventBulkRetryCreateRequestQueryHeaders{typ: "EventBulkRetryCreateRequestQueryHeadersOne", EventBulkRetryCreateRequestQueryHeadersOne: value}
}

func (e *EventBulkRetryCreateRequestQueryHeaders) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EventBulkRetryCreateRequestQueryHeaders) GetEventBulkRetryCreateRequestQueryHeadersOne() *EventBulkRetryCreateRequestQueryHeadersOne {
	if e == nil {
		return nil
	}
	return e.EventBulkRetryCreateRequestQueryHeadersOne
}

func (e *EventBulkRetryCreateRequestQueryHeaders) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valueEventBulkRetryCreateRequestQueryHeadersOne := new(EventBulkRetryCreateRequestQueryHeadersOne)
	if err := json.Unmarshal(data, &valueEventBulkRetryCreateRequestQueryHeadersOne); err == nil {
		e.typ = "EventBulkRetryCreateRequestQueryHeadersOne"
		e.EventBulkRetryCreateRequestQueryHeadersOne = valueEventBulkRetryCreateRequestQueryHeadersOne
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryHeaders) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "EventBulkRetryCreateRequestQueryHeadersOne" || e.EventBulkRetryCreateRequestQueryHeadersOne != nil {
		return json.Marshal(e.EventBulkRetryCreateRequestQueryHeadersOne)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryHeadersVisitor interface {
	VisitString(string) error
	VisitEventBulkRetryCreateRequestQueryHeadersOne(*EventBulkRetryCreateRequestQueryHeadersOne) error
}

func (e *EventBulkRetryCreateRequestQueryHeaders) Accept(visitor EventBulkRetryCreateRequestQueryHeadersVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "EventBulkRetryCreateRequestQueryHeadersOne" || e.EventBulkRetryCreateRequestQueryHeadersOne != nil {
		return visitor.VisitEventBulkRetryCreateRequestQueryHeadersOne(e.EventBulkRetryCreateRequestQueryHeadersOne)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryHeadersOne struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventBulkRetryCreateRequestQueryHeadersOne) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventBulkRetryCreateRequestQueryHeadersOne) UnmarshalJSON(data []byte) error {
	type unmarshaler EventBulkRetryCreateRequestQueryHeadersOne
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventBulkRetryCreateRequestQueryHeadersOne(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventBulkRetryCreateRequestQueryHeadersOne) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Filter by event IDs
type EventBulkRetryCreateRequestQueryId struct {
	// Event ID
	String     string
	StringList []string

	typ string
}

func NewEventBulkRetryCreateRequestQueryIdFromString(value string) *EventBulkRetryCreateRequestQueryId {
	return &EventBulkRetryCreateRequestQueryId{typ: "String", String: value}
}

func NewEventBulkRetryCreateRequestQueryIdFromStringList(value []string) *EventBulkRetryCreateRequestQueryId {
	return &EventBulkRetryCreateRequestQueryId{typ: "StringList", StringList: value}
}

func (e *EventBulkRetryCreateRequestQueryId) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EventBulkRetryCreateRequestQueryId) GetStringList() []string {
	if e == nil {
		return nil
	}
	return e.StringList
}

func (e *EventBulkRetryCreateRequestQueryId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		e.typ = "StringList"
		e.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryId) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return json.Marshal(e.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryIdVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (e *EventBulkRetryCreateRequestQueryId) Accept(visitor EventBulkRetryCreateRequestQueryIdVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return visitor.VisitStringList(e.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryIssueId struct {
	String     string
	StringList []string

	typ string
}

func NewEventBulkRetryCreateRequestQueryIssueIdFromString(value string) *EventBulkRetryCreateRequestQueryIssueId {
	return &EventBulkRetryCreateRequestQueryIssueId{typ: "String", String: value}
}

func NewEventBulkRetryCreateRequestQueryIssueIdFromStringList(value []string) *EventBulkRetryCreateRequestQueryIssueId {
	return &EventBulkRetryCreateRequestQueryIssueId{typ: "StringList", StringList: value}
}

func (e *EventBulkRetryCreateRequestQueryIssueId) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EventBulkRetryCreateRequestQueryIssueId) GetStringList() []string {
	if e == nil {
		return nil
	}
	return e.StringList
}

func (e *EventBulkRetryCreateRequestQueryIssueId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		e.typ = "StringList"
		e.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryIssueId) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return json.Marshal(e.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryIssueIdVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (e *EventBulkRetryCreateRequestQueryIssueId) Accept(visitor EventBulkRetryCreateRequestQueryIssueIdVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return visitor.VisitStringList(e.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// Filter by `last_attempt_at` date using a date operator
type EventBulkRetryCreateRequestQueryLastAttemptAt struct {
	DateTime  time.Time
	Operators *Operators

	typ string
}

func NewEventBulkRetryCreateRequestQueryLastAttemptAtFromDateTime(value time.Time) *EventBulkRetryCreateRequestQueryLastAttemptAt {
	return &EventBulkRetryCreateRequestQueryLastAttemptAt{typ: "DateTime", DateTime: value}
}

func NewEventBulkRetryCreateRequestQueryLastAttemptAtFromOperators(value *Operators) *EventBulkRetryCreateRequestQueryLastAttemptAt {
	return &EventBulkRetryCreateRequestQueryLastAttemptAt{typ: "Operators", Operators: value}
}

func (e *EventBulkRetryCreateRequestQueryLastAttemptAt) GetDateTime() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.DateTime
}

func (e *EventBulkRetryCreateRequestQueryLastAttemptAt) GetOperators() *Operators {
	if e == nil {
		return nil
	}
	return e.Operators
}

func (e *EventBulkRetryCreateRequestQueryLastAttemptAt) UnmarshalJSON(data []byte) error {
	var valueDateTime *internal.DateTime
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		e.typ = "DateTime"
		e.DateTime = valueDateTime.Time()
		return nil
	}
	valueOperators := new(Operators)
	if err := json.Unmarshal(data, &valueOperators); err == nil {
		e.typ = "Operators"
		e.Operators = valueOperators
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryLastAttemptAt) MarshalJSON() ([]byte, error) {
	if e.typ == "DateTime" || !e.DateTime.IsZero() {
		return json.Marshal(internal.NewDateTime(e.DateTime))
	}
	if e.typ == "Operators" || e.Operators != nil {
		return json.Marshal(e.Operators)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryLastAttemptAtVisitor interface {
	VisitDateTime(time.Time) error
	VisitOperators(*Operators) error
}

func (e *EventBulkRetryCreateRequestQueryLastAttemptAt) Accept(visitor EventBulkRetryCreateRequestQueryLastAttemptAtVisitor) error {
	if e.typ == "DateTime" || !e.DateTime.IsZero() {
		return visitor.VisitDateTime(e.DateTime)
	}
	if e.typ == "Operators" || e.Operators != nil {
		return visitor.VisitOperators(e.Operators)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type EventBulkRetryCreateRequestQueryParsedQuery struct {
	String                                         string
	EventBulkRetryCreateRequestQueryParsedQueryOne *EventBulkRetryCreateRequestQueryParsedQueryOne

	typ string
}

func NewEventBulkRetryCreateRequestQueryParsedQueryFromString(value string) *EventBulkRetryCreateRequestQueryParsedQuery {
	return &EventBulkRetryCreateRequestQueryParsedQuery{typ: "String", String: value}
}

func NewEventBulkRetryCreateRequestQueryParsedQueryFromEventBulkRetryCreateRequestQueryParsedQueryOne(value *EventBulkRetryCreateRequestQueryParsedQueryOne) *EventBulkRetryCreateRequestQueryParsedQuery {
	return &EventBulkRetryCreateRequestQueryParsedQuery{typ: "EventBulkRetryCreateRequestQueryParsedQueryOne", EventBulkRetryCreateRequestQueryParsedQueryOne: value}
}

func (e *EventBulkRetryCreateRequestQueryParsedQuery) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EventBulkRetryCreateRequestQueryParsedQuery) GetEventBulkRetryCreateRequestQueryParsedQueryOne() *EventBulkRetryCreateRequestQueryParsedQueryOne {
	if e == nil {
		return nil
	}
	return e.EventBulkRetryCreateRequestQueryParsedQueryOne
}

func (e *EventBulkRetryCreateRequestQueryParsedQuery) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	valueEventBulkRetryCreateRequestQueryParsedQueryOne := new(EventBulkRetryCreateRequestQueryParsedQueryOne)
	if err := json.Unmarshal(data, &valueEventBulkRetryCreateRequestQueryParsedQueryOne); err == nil {
		e.typ = "EventBulkRetryCreateRequestQueryParsedQueryOne"
		e.EventBulkRetryCreateRequestQueryParsedQueryOne = valueEventBulkRetryCreateRequestQueryParsedQueryOne
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryParsedQuery) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "EventBulkRetryCreateRequestQueryParsedQueryOne" || e.EventBulkRetryCreateRequestQueryParsedQueryOne != nil {
		return json.Marshal(e.EventBulkRetryCreateRequestQueryParsedQueryOne)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryParsedQueryVisitor interface {
	VisitString(string) error
	VisitEventBulkRetryCreateRequestQueryParsedQueryOne(*EventBulkRetryCreateRequestQueryParsedQueryOne) error
}

func (e *EventBulkRetryCreateRequestQueryParsedQuery) Accept(visitor EventBulkRetryCreateRequestQueryParsedQueryVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "EventBulkRetryCreateRequestQueryParsedQueryOne" || e.EventBulkRetryCreateRequestQueryParsedQueryOne != nil {
		return visitor.VisitEventBulkRetryCreateRequestQueryParsedQueryOne(e.EventBulkRetryCreateRequestQueryParsedQueryOne)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryParsedQueryOne struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventBulkRetryCreateRequestQueryParsedQueryOne) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventBulkRetryCreateRequestQueryParsedQueryOne) UnmarshalJSON(data []byte) error {
	type unmarshaler EventBulkRetryCreateRequestQueryParsedQueryOne
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventBulkRetryCreateRequestQueryParsedQueryOne(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventBulkRetryCreateRequestQueryParsedQueryOne) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Filter by HTTP response status code
type EventBulkRetryCreateRequestQueryResponseStatus struct {
	Integer     int
	Operators   *Operators
	IntegerList []int

	typ string
}

func NewEventBulkRetryCreateRequestQueryResponseStatusFromInteger(value int) *EventBulkRetryCreateRequestQueryResponseStatus {
	return &EventBulkRetryCreateRequestQueryResponseStatus{typ: "Integer", Integer: value}
}

func NewEventBulkRetryCreateRequestQueryResponseStatusFromOperators(value *Operators) *EventBulkRetryCreateRequestQueryResponseStatus {
	return &EventBulkRetryCreateRequestQueryResponseStatus{typ: "Operators", Operators: value}
}

func NewEventBulkRetryCreateRequestQueryResponseStatusFromIntegerList(value []int) *EventBulkRetryCreateRequestQueryResponseStatus {
	return &EventBulkRetryCreateRequestQueryResponseStatus{typ: "IntegerList", IntegerList: value}
}

func (e *EventBulkRetryCreateRequestQueryResponseStatus) GetInteger() int {
	if e == nil {
		return 0
	}
	return e.Integer
}

func (e *EventBulkRetryCreateRequestQueryResponseStatus) GetOperators() *Operators {
	if e == nil {
		return nil
	}
	return e.Operators
}

func (e *EventBulkRetryCreateRequestQueryResponseStatus) GetIntegerList() []int {
	if e == nil {
		return nil
	}
	return e.IntegerList
}

func (e *EventBulkRetryCreateRequestQueryResponseStatus) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		e.typ = "Integer"
		e.Integer = valueInteger
		return nil
	}
	valueOperators := new(Operators)
	if err := json.Unmarshal(data, &valueOperators); err == nil {
		e.typ = "Operators"
		e.Operators = valueOperators
		return nil
	}
	var valueIntegerList []int
	if err := json.Unmarshal(data, &valueIntegerList); err == nil {
		e.typ = "IntegerList"
		e.IntegerList = valueIntegerList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryResponseStatus) MarshalJSON() ([]byte, error) {
	if e.typ == "Integer" || e.Integer != 0 {
		return json.Marshal(e.Integer)
	}
	if e.typ == "Operators" || e.Operators != nil {
		return json.Marshal(e.Operators)
	}
	if e.typ == "IntegerList" || e.IntegerList != nil {
		return json.Marshal(e.IntegerList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryResponseStatusVisitor interface {
	VisitInteger(int) error
	VisitOperators(*Operators) error
	VisitIntegerList([]int) error
}

func (e *EventBulkRetryCreateRequestQueryResponseStatus) Accept(visitor EventBulkRetryCreateRequestQueryResponseStatusVisitor) error {
	if e.typ == "Integer" || e.Integer != 0 {
		return visitor.VisitInteger(e.Integer)
	}
	if e.typ == "Operators" || e.Operators != nil {
		return visitor.VisitOperators(e.Operators)
	}
	if e.typ == "IntegerList" || e.IntegerList != nil {
		return visitor.VisitIntegerList(e.IntegerList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// Filter by source IDs
type EventBulkRetryCreateRequestQuerySourceId struct {
	// Source ID
	String     string
	StringList []string

	typ string
}

func NewEventBulkRetryCreateRequestQuerySourceIdFromString(value string) *EventBulkRetryCreateRequestQuerySourceId {
	return &EventBulkRetryCreateRequestQuerySourceId{typ: "String", String: value}
}

func NewEventBulkRetryCreateRequestQuerySourceIdFromStringList(value []string) *EventBulkRetryCreateRequestQuerySourceId {
	return &EventBulkRetryCreateRequestQuerySourceId{typ: "StringList", StringList: value}
}

func (e *EventBulkRetryCreateRequestQuerySourceId) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EventBulkRetryCreateRequestQuerySourceId) GetStringList() []string {
	if e == nil {
		return nil
	}
	return e.StringList
}

func (e *EventBulkRetryCreateRequestQuerySourceId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		e.typ = "StringList"
		e.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQuerySourceId) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return json.Marshal(e.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQuerySourceIdVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (e *EventBulkRetryCreateRequestQuerySourceId) Accept(visitor EventBulkRetryCreateRequestQuerySourceIdVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return visitor.VisitStringList(e.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// Lifecyle status of the event
type EventBulkRetryCreateRequestQueryStatus struct {
	EventStatus     EventStatus
	EventStatusList []EventStatus

	typ string
}

func NewEventBulkRetryCreateRequestQueryStatusFromEventStatus(value EventStatus) *EventBulkRetryCreateRequestQueryStatus {
	return &EventBulkRetryCreateRequestQueryStatus{typ: "EventStatus", EventStatus: value}
}

func NewEventBulkRetryCreateRequestQueryStatusFromEventStatusList(value []EventStatus) *EventBulkRetryCreateRequestQueryStatus {
	return &EventBulkRetryCreateRequestQueryStatus{typ: "EventStatusList", EventStatusList: value}
}

func (e *EventBulkRetryCreateRequestQueryStatus) GetEventStatus() EventStatus {
	if e == nil {
		return ""
	}
	return e.EventStatus
}

func (e *EventBulkRetryCreateRequestQueryStatus) GetEventStatusList() []EventStatus {
	if e == nil {
		return nil
	}
	return e.EventStatusList
}

func (e *EventBulkRetryCreateRequestQueryStatus) UnmarshalJSON(data []byte) error {
	var valueEventStatus EventStatus
	if err := json.Unmarshal(data, &valueEventStatus); err == nil {
		e.typ = "EventStatus"
		e.EventStatus = valueEventStatus
		return nil
	}
	var valueEventStatusList []EventStatus
	if err := json.Unmarshal(data, &valueEventStatusList); err == nil {
		e.typ = "EventStatusList"
		e.EventStatusList = valueEventStatusList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryStatus) MarshalJSON() ([]byte, error) {
	if e.typ == "EventStatus" || e.EventStatus != "" {
		return json.Marshal(e.EventStatus)
	}
	if e.typ == "EventStatusList" || e.EventStatusList != nil {
		return json.Marshal(e.EventStatusList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryStatusVisitor interface {
	VisitEventStatus(EventStatus) error
	VisitEventStatusList([]EventStatus) error
}

func (e *EventBulkRetryCreateRequestQueryStatus) Accept(visitor EventBulkRetryCreateRequestQueryStatusVisitor) error {
	if e.typ == "EventStatus" || e.EventStatus != "" {
		return visitor.VisitEventStatus(e.EventStatus)
	}
	if e.typ == "EventStatusList" || e.EventStatusList != nil {
		return visitor.VisitEventStatusList(e.EventStatusList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// Filter by `successful_at` date using a date operator
type EventBulkRetryCreateRequestQuerySuccessfulAt struct {
	DateTime  time.Time
	Operators *Operators

	typ string
}

func NewEventBulkRetryCreateRequestQuerySuccessfulAtFromDateTime(value time.Time) *EventBulkRetryCreateRequestQuerySuccessfulAt {
	return &EventBulkRetryCreateRequestQuerySuccessfulAt{typ: "DateTime", DateTime: value}
}

func NewEventBulkRetryCreateRequestQuerySuccessfulAtFromOperators(value *Operators) *EventBulkRetryCreateRequestQuerySuccessfulAt {
	return &EventBulkRetryCreateRequestQuerySuccessfulAt{typ: "Operators", Operators: value}
}

func (e *EventBulkRetryCreateRequestQuerySuccessfulAt) GetDateTime() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.DateTime
}

func (e *EventBulkRetryCreateRequestQuerySuccessfulAt) GetOperators() *Operators {
	if e == nil {
		return nil
	}
	return e.Operators
}

func (e *EventBulkRetryCreateRequestQuerySuccessfulAt) UnmarshalJSON(data []byte) error {
	var valueDateTime *internal.DateTime
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		e.typ = "DateTime"
		e.DateTime = valueDateTime.Time()
		return nil
	}
	valueOperators := new(Operators)
	if err := json.Unmarshal(data, &valueOperators); err == nil {
		e.typ = "Operators"
		e.Operators = valueOperators
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQuerySuccessfulAt) MarshalJSON() ([]byte, error) {
	if e.typ == "DateTime" || !e.DateTime.IsZero() {
		return json.Marshal(internal.NewDateTime(e.DateTime))
	}
	if e.typ == "Operators" || e.Operators != nil {
		return json.Marshal(e.Operators)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQuerySuccessfulAtVisitor interface {
	VisitDateTime(time.Time) error
	VisitOperators(*Operators) error
}

func (e *EventBulkRetryCreateRequestQuerySuccessfulAt) Accept(visitor EventBulkRetryCreateRequestQuerySuccessfulAtVisitor) error {
	if e.typ == "DateTime" || !e.DateTime.IsZero() {
		return visitor.VisitDateTime(e.DateTime)
	}
	if e.typ == "Operators" || e.Operators != nil {
		return visitor.VisitOperators(e.Operators)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// Filter by webhook connection IDs
type EventBulkRetryCreateRequestQueryWebhookId struct {
	// Webhook ID
	String     string
	StringList []string

	typ string
}

func NewEventBulkRetryCreateRequestQueryWebhookIdFromString(value string) *EventBulkRetryCreateRequestQueryWebhookId {
	return &EventBulkRetryCreateRequestQueryWebhookId{typ: "String", String: value}
}

func NewEventBulkRetryCreateRequestQueryWebhookIdFromStringList(value []string) *EventBulkRetryCreateRequestQueryWebhookId {
	return &EventBulkRetryCreateRequestQueryWebhookId{typ: "StringList", StringList: value}
}

func (e *EventBulkRetryCreateRequestQueryWebhookId) GetString() string {
	if e == nil {
		return ""
	}
	return e.String
}

func (e *EventBulkRetryCreateRequestQueryWebhookId) GetStringList() []string {
	if e == nil {
		return nil
	}
	return e.StringList
}

func (e *EventBulkRetryCreateRequestQueryWebhookId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typ = "String"
		e.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		e.typ = "StringList"
		e.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBulkRetryCreateRequestQueryWebhookId) MarshalJSON() ([]byte, error) {
	if e.typ == "String" || e.String != "" {
		return json.Marshal(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return json.Marshal(e.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryCreateRequestQueryWebhookIdVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (e *EventBulkRetryCreateRequestQueryWebhookId) Accept(visitor EventBulkRetryCreateRequestQueryWebhookIdVisitor) error {
	if e.typ == "String" || e.String != "" {
		return visitor.VisitString(e.String)
	}
	if e.typ == "StringList" || e.StringList != nil {
		return visitor.VisitStringList(e.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBulkRetryListRequestDir string

const (
	EventBulkRetryListRequestDirAsc  EventBulkRetryListRequestDir = "asc"
	EventBulkRetryListRequestDirDesc EventBulkRetryListRequestDir = "desc"
)

func NewEventBulkRetryListRequestDirFromString(s string) (EventBulkRetryListRequestDir, error) {
	switch s {
	case "asc":
		return EventBulkRetryListRequestDirAsc, nil
	case "desc":
		return EventBulkRetryListRequestDirDesc, nil
	}
	var t EventBulkRetryListRequestDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventBulkRetryListRequestDir) Ptr() *EventBulkRetryListRequestDir {
	return &e
}

type EventBulkRetryListRequestOrderBy string

const (
	EventBulkRetryListRequestOrderByCreatedAt EventBulkRetryListRequestOrderBy = "created_at"
)

func NewEventBulkRetryListRequestOrderByFromString(s string) (EventBulkRetryListRequestOrderBy, error) {
	switch s {
	case "created_at":
		return EventBulkRetryListRequestOrderByCreatedAt, nil
	}
	var t EventBulkRetryListRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventBulkRetryListRequestOrderBy) Ptr() *EventBulkRetryListRequestOrderBy {
	return &e
}

type EventBulkRetryPlanResponse struct {
	// Number of batches required to complete the bulk retry
	EstimatedBatch *int `json:"estimated_batch,omitempty" url:"estimated_batch,omitempty"`
	// Number of estimated events to be retried
	EstimatedCount *int `json:"estimated_count,omitempty" url:"estimated_count,omitempty"`
	// Progression of the batch operations, values 0 - 1
	Progress *float64 `json:"progress,omitempty" url:"progress,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventBulkRetryPlanResponse) GetEstimatedBatch() *int {
	if e == nil {
		return nil
	}
	return e.EstimatedBatch
}

func (e *EventBulkRetryPlanResponse) GetEstimatedCount() *int {
	if e == nil {
		return nil
	}
	return e.EstimatedCount
}

func (e *EventBulkRetryPlanResponse) GetProgress() *float64 {
	if e == nil {
		return nil
	}
	return e.Progress
}

func (e *EventBulkRetryPlanResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventBulkRetryPlanResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EventBulkRetryPlanResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventBulkRetryPlanResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventBulkRetryPlanResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}
