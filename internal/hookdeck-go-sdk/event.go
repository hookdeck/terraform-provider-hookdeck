// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/hookdeck/hookdeck-go-sdk/internal"
	time "time"
)

type EventListRequest struct {
	Id             []*string                `json:"-" url:"id,omitempty"`
	Status         *EventStatus             `json:"-" url:"status,omitempty"`
	WebhookId      []*string                `json:"-" url:"webhook_id,omitempty"`
	DestinationId  []*string                `json:"-" url:"destination_id,omitempty"`
	SourceId       []*string                `json:"-" url:"source_id,omitempty"`
	Attempts       *int                     `json:"-" url:"attempts,omitempty"`
	ResponseStatus *int                     `json:"-" url:"response_status,omitempty"`
	SuccessfulAt   *time.Time               `json:"-" url:"successful_at,omitempty"`
	CreatedAt      *time.Time               `json:"-" url:"created_at,omitempty"`
	ErrorCode      *AttemptErrorCodes       `json:"-" url:"error_code,omitempty"`
	CliId          *string                  `json:"-" url:"cli_id,omitempty"`
	LastAttemptAt  *time.Time               `json:"-" url:"last_attempt_at,omitempty"`
	SearchTerm     *string                  `json:"-" url:"search_term,omitempty"`
	Headers        *string                  `json:"-" url:"headers,omitempty"`
	Body           *string                  `json:"-" url:"body,omitempty"`
	ParsedQuery    *string                  `json:"-" url:"parsed_query,omitempty"`
	Path           *string                  `json:"-" url:"path,omitempty"`
	CliUserId      []*string                `json:"-" url:"cli_user_id,omitempty"`
	IssueId        []*string                `json:"-" url:"issue_id,omitempty"`
	EventDataId    []*string                `json:"-" url:"event_data_id,omitempty"`
	BulkRetryId    []*string                `json:"-" url:"bulk_retry_id,omitempty"`
	Include        *string                  `json:"-" url:"include,omitempty"`
	OrderBy        *EventListRequestOrderBy `json:"-" url:"order_by,omitempty"`
	Dir            *EventListRequestDir     `json:"-" url:"dir,omitempty"`
	Limit          *int                     `json:"-" url:"limit,omitempty"`
	Next           *string                  `json:"-" url:"next,omitempty"`
	Prev           *string                  `json:"-" url:"prev,omitempty"`
}

type RetriedEvent struct {
	// ID of the event
	Id string `json:"id" url:"id"`
	// ID of the project
	TeamId string `json:"team_id" url:"team_id"`
	// ID of the associated connection
	WebhookId string `json:"webhook_id" url:"webhook_id"`
	// ID of the associated source
	SourceId string `json:"source_id" url:"source_id"`
	// ID of the associated destination
	DestinationId string `json:"destination_id" url:"destination_id"`
	// ID of the event data
	EventDataId string `json:"event_data_id" url:"event_data_id"`
	// ID of the request that created the event
	RequestId string `json:"request_id" url:"request_id"`
	// Number of delivery attempts made
	Attempts int `json:"attempts" url:"attempts"`
	// Date of the most recently attempted retry
	LastAttemptAt *time.Time `json:"last_attempt_at,omitempty" url:"last_attempt_at,omitempty"`
	// Date of the next scheduled retry
	NextAttemptAt *time.Time `json:"next_attempt_at,omitempty" url:"next_attempt_at,omitempty"`
	// Event status
	ResponseStatus *int               `json:"response_status,omitempty" url:"response_status,omitempty"`
	ErrorCode      *AttemptErrorCodes `json:"error_code,omitempty" url:"error_code,omitempty"`
	Status         EventStatus        `json:"status" url:"status"`
	// Date of the latest successful attempt
	SuccessfulAt *time.Time `json:"successful_at,omitempty" url:"successful_at,omitempty"`
	// ID of the CLI the event is sent to
	CliId *string `json:"cli_id,omitempty" url:"cli_id,omitempty"`
	// Date the event was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the event was created
	CreatedAt time.Time       `json:"created_at" url:"created_at"`
	Data      *ShortEventData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RetriedEvent) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *RetriedEvent) GetTeamId() string {
	if r == nil {
		return ""
	}
	return r.TeamId
}

func (r *RetriedEvent) GetWebhookId() string {
	if r == nil {
		return ""
	}
	return r.WebhookId
}

func (r *RetriedEvent) GetSourceId() string {
	if r == nil {
		return ""
	}
	return r.SourceId
}

func (r *RetriedEvent) GetDestinationId() string {
	if r == nil {
		return ""
	}
	return r.DestinationId
}

func (r *RetriedEvent) GetEventDataId() string {
	if r == nil {
		return ""
	}
	return r.EventDataId
}

func (r *RetriedEvent) GetRequestId() string {
	if r == nil {
		return ""
	}
	return r.RequestId
}

func (r *RetriedEvent) GetAttempts() int {
	if r == nil {
		return 0
	}
	return r.Attempts
}

func (r *RetriedEvent) GetLastAttemptAt() *time.Time {
	if r == nil {
		return nil
	}
	return r.LastAttemptAt
}

func (r *RetriedEvent) GetNextAttemptAt() *time.Time {
	if r == nil {
		return nil
	}
	return r.NextAttemptAt
}

func (r *RetriedEvent) GetResponseStatus() *int {
	if r == nil {
		return nil
	}
	return r.ResponseStatus
}

func (r *RetriedEvent) GetErrorCode() *AttemptErrorCodes {
	if r == nil {
		return nil
	}
	return r.ErrorCode
}

func (r *RetriedEvent) GetStatus() EventStatus {
	if r == nil {
		return ""
	}
	return r.Status
}

func (r *RetriedEvent) GetSuccessfulAt() *time.Time {
	if r == nil {
		return nil
	}
	return r.SuccessfulAt
}

func (r *RetriedEvent) GetCliId() *string {
	if r == nil {
		return nil
	}
	return r.CliId
}

func (r *RetriedEvent) GetUpdatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.UpdatedAt
}

func (r *RetriedEvent) GetCreatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.CreatedAt
}

func (r *RetriedEvent) GetData() *ShortEventData {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *RetriedEvent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetriedEvent) UnmarshalJSON(data []byte) error {
	type embed RetriedEvent
	var unmarshaler = struct {
		embed
		LastAttemptAt *internal.DateTime `json:"last_attempt_at,omitempty"`
		NextAttemptAt *internal.DateTime `json:"next_attempt_at,omitempty"`
		SuccessfulAt  *internal.DateTime `json:"successful_at,omitempty"`
		UpdatedAt     *internal.DateTime `json:"updated_at"`
		CreatedAt     *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RetriedEvent(unmarshaler.embed)
	r.LastAttemptAt = unmarshaler.LastAttemptAt.TimePtr()
	r.NextAttemptAt = unmarshaler.NextAttemptAt.TimePtr()
	r.SuccessfulAt = unmarshaler.SuccessfulAt.TimePtr()
	r.UpdatedAt = unmarshaler.UpdatedAt.Time()
	r.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetriedEvent) MarshalJSON() ([]byte, error) {
	type embed RetriedEvent
	var marshaler = struct {
		embed
		LastAttemptAt *internal.DateTime `json:"last_attempt_at,omitempty"`
		NextAttemptAt *internal.DateTime `json:"next_attempt_at,omitempty"`
		SuccessfulAt  *internal.DateTime `json:"successful_at,omitempty"`
		UpdatedAt     *internal.DateTime `json:"updated_at"`
		CreatedAt     *internal.DateTime `json:"created_at"`
	}{
		embed:         embed(*r),
		LastAttemptAt: internal.NewOptionalDateTime(r.LastAttemptAt),
		NextAttemptAt: internal.NewOptionalDateTime(r.NextAttemptAt),
		SuccessfulAt:  internal.NewOptionalDateTime(r.SuccessfulAt),
		UpdatedAt:     internal.NewDateTime(r.UpdatedAt),
		CreatedAt:     internal.NewDateTime(r.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (r *RetriedEvent) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Sort direction
type EventListRequestDir string

const (
	EventListRequestDirAsc  EventListRequestDir = "asc"
	EventListRequestDirDesc EventListRequestDir = "desc"
)

func NewEventListRequestDirFromString(s string) (EventListRequestDir, error) {
	switch s {
	case "asc":
		return EventListRequestDirAsc, nil
	case "desc":
		return EventListRequestDirDesc, nil
	}
	var t EventListRequestDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventListRequestDir) Ptr() *EventListRequestDir {
	return &e
}

// Sort key
type EventListRequestOrderBy string

const (
	EventListRequestOrderByLastAttemptAt EventListRequestOrderBy = "last_attempt_at"
	EventListRequestOrderByCreatedAt     EventListRequestOrderBy = "created_at"
)

func NewEventListRequestOrderByFromString(s string) (EventListRequestOrderBy, error) {
	switch s {
	case "last_attempt_at":
		return EventListRequestOrderByLastAttemptAt, nil
	case "created_at":
		return EventListRequestOrderByCreatedAt, nil
	}
	var t EventListRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventListRequestOrderBy) Ptr() *EventListRequestOrderBy {
	return &e
}
