// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/hookdeck/hookdeck-go-sdk/internal"
	time "time"
)

type RequestListRequest struct {
	Id             []*string                  `json:"-" url:"id,omitempty"`
	Status         *RequestListRequestStatus  `json:"-" url:"status,omitempty"`
	RejectionCause *RequestRejectionCause     `json:"-" url:"rejection_cause,omitempty"`
	SourceId       []*string                  `json:"-" url:"source_id,omitempty"`
	Verified       *bool                      `json:"-" url:"verified,omitempty"`
	SearchTerm     *string                    `json:"-" url:"search_term,omitempty"`
	Headers        *string                    `json:"-" url:"headers,omitempty"`
	Body           *string                    `json:"-" url:"body,omitempty"`
	ParsedQuery    *string                    `json:"-" url:"parsed_query,omitempty"`
	Path           *string                    `json:"-" url:"path,omitempty"`
	IgnoredCount   *int                       `json:"-" url:"ignored_count,omitempty"`
	EventsCount    *int                       `json:"-" url:"events_count,omitempty"`
	IngestedAt     *time.Time                 `json:"-" url:"ingested_at,omitempty"`
	BulkRetryId    []*string                  `json:"-" url:"bulk_retry_id,omitempty"`
	Include        *string                    `json:"-" url:"include,omitempty"`
	OrderBy        *RequestListRequestOrderBy `json:"-" url:"order_by,omitempty"`
	Dir            *RequestListRequestDir     `json:"-" url:"dir,omitempty"`
	Limit          *int                       `json:"-" url:"limit,omitempty"`
	Next           *string                    `json:"-" url:"next,omitempty"`
	Prev           *string                    `json:"-" url:"prev,omitempty"`
}

type RequestListEventRequest struct {
	Id             []*string                       `json:"-" url:"id,omitempty"`
	Status         *EventStatus                    `json:"-" url:"status,omitempty"`
	WebhookId      []*string                       `json:"-" url:"webhook_id,omitempty"`
	DestinationId  []*string                       `json:"-" url:"destination_id,omitempty"`
	SourceId       []*string                       `json:"-" url:"source_id,omitempty"`
	Attempts       *int                            `json:"-" url:"attempts,omitempty"`
	ResponseStatus *int                            `json:"-" url:"response_status,omitempty"`
	SuccessfulAt   *time.Time                      `json:"-" url:"successful_at,omitempty"`
	CreatedAt      *time.Time                      `json:"-" url:"created_at,omitempty"`
	ErrorCode      *AttemptErrorCodes              `json:"-" url:"error_code,omitempty"`
	CliId          *string                         `json:"-" url:"cli_id,omitempty"`
	LastAttemptAt  *time.Time                      `json:"-" url:"last_attempt_at,omitempty"`
	SearchTerm     *string                         `json:"-" url:"search_term,omitempty"`
	Headers        *string                         `json:"-" url:"headers,omitempty"`
	Body           *string                         `json:"-" url:"body,omitempty"`
	ParsedQuery    *string                         `json:"-" url:"parsed_query,omitempty"`
	Path           *string                         `json:"-" url:"path,omitempty"`
	CliUserId      []*string                       `json:"-" url:"cli_user_id,omitempty"`
	IssueId        []*string                       `json:"-" url:"issue_id,omitempty"`
	EventDataId    []*string                       `json:"-" url:"event_data_id,omitempty"`
	BulkRetryId    []*string                       `json:"-" url:"bulk_retry_id,omitempty"`
	Include        *string                         `json:"-" url:"include,omitempty"`
	OrderBy        *RequestListEventRequestOrderBy `json:"-" url:"order_by,omitempty"`
	Dir            *RequestListEventRequestDir     `json:"-" url:"dir,omitempty"`
	Limit          *int                            `json:"-" url:"limit,omitempty"`
	Next           *string                         `json:"-" url:"next,omitempty"`
	Prev           *string                         `json:"-" url:"prev,omitempty"`
}

type RequestListIgnoredEventRequest struct {
	Id      []*string                              `json:"-" url:"id,omitempty"`
	OrderBy *RequestListIgnoredEventRequestOrderBy `json:"-" url:"order_by,omitempty"`
	Dir     *RequestListIgnoredEventRequestDir     `json:"-" url:"dir,omitempty"`
	Limit   *int                                   `json:"-" url:"limit,omitempty"`
	Next    *string                                `json:"-" url:"next,omitempty"`
	Prev    *string                                `json:"-" url:"prev,omitempty"`
}

type RequestRetryRequest struct {
	// Subset of webhook_ids to re-run the event logic on. Useful to retry only specific ignored_events
	WebhookIds []string `json:"webhook_ids,omitempty" url:"-"`
}

type FilteredMeta = []FilteredMetaItem

type FilteredMetaItem string

const (
	FilteredMetaItemBody    FilteredMetaItem = "body"
	FilteredMetaItemHeaders FilteredMetaItem = "headers"
	FilteredMetaItemPath    FilteredMetaItem = "path"
	FilteredMetaItemQuery   FilteredMetaItem = "query"
)

func NewFilteredMetaItemFromString(s string) (FilteredMetaItem, error) {
	switch s {
	case "body":
		return FilteredMetaItemBody, nil
	case "headers":
		return FilteredMetaItemHeaders, nil
	case "path":
		return FilteredMetaItemPath, nil
	case "query":
		return FilteredMetaItemQuery, nil
	}
	var t FilteredMetaItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilteredMetaItem) Ptr() *FilteredMetaItem {
	return &f
}

type IgnoredEvent struct {
	Id string `json:"id" url:"id"`
	// ID of the project
	TeamId    string            `json:"team_id" url:"team_id"`
	WebhookId string            `json:"webhook_id" url:"webhook_id"`
	Cause     IgnoredEventCause `json:"cause" url:"cause"`
	RequestId string            `json:"request_id" url:"request_id"`
	Meta      *IgnoredEventMeta `json:"meta,omitempty" url:"meta,omitempty"`
	CreatedAt time.Time         `json:"created_at" url:"created_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IgnoredEvent) GetId() string {
	if i == nil {
		return ""
	}
	return i.Id
}

func (i *IgnoredEvent) GetTeamId() string {
	if i == nil {
		return ""
	}
	return i.TeamId
}

func (i *IgnoredEvent) GetWebhookId() string {
	if i == nil {
		return ""
	}
	return i.WebhookId
}

func (i *IgnoredEvent) GetCause() IgnoredEventCause {
	if i == nil {
		return ""
	}
	return i.Cause
}

func (i *IgnoredEvent) GetRequestId() string {
	if i == nil {
		return ""
	}
	return i.RequestId
}

func (i *IgnoredEvent) GetMeta() *IgnoredEventMeta {
	if i == nil {
		return nil
	}
	return i.Meta
}

func (i *IgnoredEvent) GetCreatedAt() time.Time {
	if i == nil {
		return time.Time{}
	}
	return i.CreatedAt
}

func (i *IgnoredEvent) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IgnoredEvent) UnmarshalJSON(data []byte) error {
	type embed IgnoredEvent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = IgnoredEvent(unmarshaler.embed)
	i.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IgnoredEvent) MarshalJSON() ([]byte, error) {
	type embed IgnoredEvent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed:     embed(*i),
		CreatedAt: internal.NewDateTime(i.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (i *IgnoredEvent) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IgnoredEventCause string

const (
	IgnoredEventCauseDisabled             IgnoredEventCause = "DISABLED"
	IgnoredEventCauseFiltered             IgnoredEventCause = "FILTERED"
	IgnoredEventCauseTransformationFailed IgnoredEventCause = "TRANSFORMATION_FAILED"
	IgnoredEventCauseCliDisconnected      IgnoredEventCause = "CLI_DISCONNECTED"
)

func NewIgnoredEventCauseFromString(s string) (IgnoredEventCause, error) {
	switch s {
	case "DISABLED":
		return IgnoredEventCauseDisabled, nil
	case "FILTERED":
		return IgnoredEventCauseFiltered, nil
	case "TRANSFORMATION_FAILED":
		return IgnoredEventCauseTransformationFailed, nil
	case "CLI_DISCONNECTED":
		return IgnoredEventCauseCliDisconnected, nil
	}
	var t IgnoredEventCause
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IgnoredEventCause) Ptr() *IgnoredEventCause {
	return &i
}

type IgnoredEventMeta struct {
	FilteredMeta             FilteredMeta
	TransformationFailedMeta *TransformationFailedMeta

	typ string
}

func NewIgnoredEventMetaFromFilteredMeta(value FilteredMeta) *IgnoredEventMeta {
	return &IgnoredEventMeta{typ: "FilteredMeta", FilteredMeta: value}
}

func NewIgnoredEventMetaFromTransformationFailedMeta(value *TransformationFailedMeta) *IgnoredEventMeta {
	return &IgnoredEventMeta{typ: "TransformationFailedMeta", TransformationFailedMeta: value}
}

func (i *IgnoredEventMeta) GetFilteredMeta() FilteredMeta {
	if i == nil {
		return nil
	}
	return i.FilteredMeta
}

func (i *IgnoredEventMeta) GetTransformationFailedMeta() *TransformationFailedMeta {
	if i == nil {
		return nil
	}
	return i.TransformationFailedMeta
}

func (i *IgnoredEventMeta) UnmarshalJSON(data []byte) error {
	var valueFilteredMeta FilteredMeta
	if err := json.Unmarshal(data, &valueFilteredMeta); err == nil {
		i.typ = "FilteredMeta"
		i.FilteredMeta = valueFilteredMeta
		return nil
	}
	valueTransformationFailedMeta := new(TransformationFailedMeta)
	if err := json.Unmarshal(data, &valueTransformationFailedMeta); err == nil {
		i.typ = "TransformationFailedMeta"
		i.TransformationFailedMeta = valueTransformationFailedMeta
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IgnoredEventMeta) MarshalJSON() ([]byte, error) {
	if i.typ == "FilteredMeta" || i.FilteredMeta != nil {
		return json.Marshal(i.FilteredMeta)
	}
	if i.typ == "TransformationFailedMeta" || i.TransformationFailedMeta != nil {
		return json.Marshal(i.TransformationFailedMeta)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IgnoredEventMetaVisitor interface {
	VisitFilteredMeta(FilteredMeta) error
	VisitTransformationFailedMeta(*TransformationFailedMeta) error
}

func (i *IgnoredEventMeta) Accept(visitor IgnoredEventMetaVisitor) error {
	if i.typ == "FilteredMeta" || i.FilteredMeta != nil {
		return visitor.VisitFilteredMeta(i.FilteredMeta)
	}
	if i.typ == "TransformationFailedMeta" || i.TransformationFailedMeta != nil {
		return visitor.VisitTransformationFailedMeta(i.TransformationFailedMeta)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IgnoredEventPaginatedResult struct {
	Pagination *SeekPagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Count      *int            `json:"count,omitempty" url:"count,omitempty"`
	Models     []*IgnoredEvent `json:"models,omitempty" url:"models,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IgnoredEventPaginatedResult) GetPagination() *SeekPagination {
	if i == nil {
		return nil
	}
	return i.Pagination
}

func (i *IgnoredEventPaginatedResult) GetCount() *int {
	if i == nil {
		return nil
	}
	return i.Count
}

func (i *IgnoredEventPaginatedResult) GetModels() []*IgnoredEvent {
	if i == nil {
		return nil
	}
	return i.Models
}

func (i *IgnoredEventPaginatedResult) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IgnoredEventPaginatedResult) UnmarshalJSON(data []byte) error {
	type unmarshaler IgnoredEventPaginatedResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IgnoredEventPaginatedResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IgnoredEventPaginatedResult) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type Request struct {
	// ID of the request
	Id string `json:"id" url:"id"`
	// ID of the project
	TeamId string `json:"team_id" url:"team_id"`
	// Whether or not the request was verified when received
	Verified *bool `json:"verified,omitempty" url:"verified,omitempty"`
	// ID of the request data
	OriginalEventDataId *string               `json:"original_event_data_id,omitempty" url:"original_event_data_id,omitempty"`
	RejectionCause      RequestRejectionCause `json:"rejection_cause" url:"rejection_cause"`
	// The priority attributed to the request when received
	IngestPriority *RequestIngestPriority `json:"ingest_priority,omitempty" url:"ingest_priority,omitempty"`
	// The time the request was originally received
	IngestedAt *time.Time `json:"ingested_at,omitempty" url:"ingested_at,omitempty"`
	// ID of the associated source
	SourceId string `json:"source_id" url:"source_id"`
	// The count of events created from this request (CLI events not included)
	EventsCount *int `json:"events_count,omitempty" url:"events_count,omitempty"`
	// The count of CLI events created from this request
	CliEventsCount *int `json:"cli_events_count,omitempty" url:"cli_events_count,omitempty"`
	IgnoredCount   *int `json:"ignored_count,omitempty" url:"ignored_count,omitempty"`
	// Date the event was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the event was created
	CreatedAt time.Time       `json:"created_at" url:"created_at"`
	Data      *ShortEventData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *Request) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *Request) GetTeamId() string {
	if r == nil {
		return ""
	}
	return r.TeamId
}

func (r *Request) GetVerified() *bool {
	if r == nil {
		return nil
	}
	return r.Verified
}

func (r *Request) GetOriginalEventDataId() *string {
	if r == nil {
		return nil
	}
	return r.OriginalEventDataId
}

func (r *Request) GetRejectionCause() RequestRejectionCause {
	if r == nil {
		return ""
	}
	return r.RejectionCause
}

func (r *Request) GetIngestPriority() *RequestIngestPriority {
	if r == nil {
		return nil
	}
	return r.IngestPriority
}

func (r *Request) GetIngestedAt() *time.Time {
	if r == nil {
		return nil
	}
	return r.IngestedAt
}

func (r *Request) GetSourceId() string {
	if r == nil {
		return ""
	}
	return r.SourceId
}

func (r *Request) GetEventsCount() *int {
	if r == nil {
		return nil
	}
	return r.EventsCount
}

func (r *Request) GetCliEventsCount() *int {
	if r == nil {
		return nil
	}
	return r.CliEventsCount
}

func (r *Request) GetIgnoredCount() *int {
	if r == nil {
		return nil
	}
	return r.IgnoredCount
}

func (r *Request) GetUpdatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.UpdatedAt
}

func (r *Request) GetCreatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.CreatedAt
}

func (r *Request) GetData() *ShortEventData {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *Request) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Request) UnmarshalJSON(data []byte) error {
	type embed Request
	var unmarshaler = struct {
		embed
		IngestedAt *internal.DateTime `json:"ingested_at,omitempty"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
		CreatedAt  *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = Request(unmarshaler.embed)
	r.IngestedAt = unmarshaler.IngestedAt.TimePtr()
	r.UpdatedAt = unmarshaler.UpdatedAt.Time()
	r.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *Request) MarshalJSON() ([]byte, error) {
	type embed Request
	var marshaler = struct {
		embed
		IngestedAt *internal.DateTime `json:"ingested_at,omitempty"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
		CreatedAt  *internal.DateTime `json:"created_at"`
	}{
		embed:      embed(*r),
		IngestedAt: internal.NewOptionalDateTime(r.IngestedAt),
		UpdatedAt:  internal.NewDateTime(r.UpdatedAt),
		CreatedAt:  internal.NewDateTime(r.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (r *Request) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The priority attributed to the request when received
type RequestIngestPriority string

const (
	RequestIngestPriorityNormal RequestIngestPriority = "NORMAL"
	RequestIngestPriorityLow    RequestIngestPriority = "LOW"
)

func NewRequestIngestPriorityFromString(s string) (RequestIngestPriority, error) {
	switch s {
	case "NORMAL":
		return RequestIngestPriorityNormal, nil
	case "LOW":
		return RequestIngestPriorityLow, nil
	}
	var t RequestIngestPriority
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestIngestPriority) Ptr() *RequestIngestPriority {
	return &r
}

type RequestPaginatedResult struct {
	Pagination *SeekPagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Count      *int            `json:"count,omitempty" url:"count,omitempty"`
	Models     []*Request      `json:"models,omitempty" url:"models,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequestPaginatedResult) GetPagination() *SeekPagination {
	if r == nil {
		return nil
	}
	return r.Pagination
}

func (r *RequestPaginatedResult) GetCount() *int {
	if r == nil {
		return nil
	}
	return r.Count
}

func (r *RequestPaginatedResult) GetModels() []*Request {
	if r == nil {
		return nil
	}
	return r.Models
}

func (r *RequestPaginatedResult) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestPaginatedResult) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestPaginatedResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestPaginatedResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequestPaginatedResult) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RetryRequest struct {
	Request *Request `json:"request,omitempty" url:"request,omitempty"`
	Events  []*Event `json:"events,omitempty" url:"events,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RetryRequest) GetRequest() *Request {
	if r == nil {
		return nil
	}
	return r.Request
}

func (r *RetryRequest) GetEvents() []*Event {
	if r == nil {
		return nil
	}
	return r.Events
}

func (r *RetryRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetryRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RetryRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetryRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetryRequest) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type TransformationFailedMeta struct {
	TransformationId string `json:"transformation_id" url:"transformation_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransformationFailedMeta) GetTransformationId() string {
	if t == nil {
		return ""
	}
	return t.TransformationId
}

func (t *TransformationFailedMeta) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransformationFailedMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler TransformationFailedMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransformationFailedMeta(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransformationFailedMeta) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Sort direction
type RequestListEventRequestDir string

const (
	RequestListEventRequestDirAsc  RequestListEventRequestDir = "asc"
	RequestListEventRequestDirDesc RequestListEventRequestDir = "desc"
)

func NewRequestListEventRequestDirFromString(s string) (RequestListEventRequestDir, error) {
	switch s {
	case "asc":
		return RequestListEventRequestDirAsc, nil
	case "desc":
		return RequestListEventRequestDirDesc, nil
	}
	var t RequestListEventRequestDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestListEventRequestDir) Ptr() *RequestListEventRequestDir {
	return &r
}

// Sort key
type RequestListEventRequestOrderBy string

const (
	RequestListEventRequestOrderByLastAttemptAt RequestListEventRequestOrderBy = "last_attempt_at"
	RequestListEventRequestOrderByCreatedAt     RequestListEventRequestOrderBy = "created_at"
)

func NewRequestListEventRequestOrderByFromString(s string) (RequestListEventRequestOrderBy, error) {
	switch s {
	case "last_attempt_at":
		return RequestListEventRequestOrderByLastAttemptAt, nil
	case "created_at":
		return RequestListEventRequestOrderByCreatedAt, nil
	}
	var t RequestListEventRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestListEventRequestOrderBy) Ptr() *RequestListEventRequestOrderBy {
	return &r
}

type RequestListIgnoredEventRequestDir string

const (
	RequestListIgnoredEventRequestDirAsc  RequestListIgnoredEventRequestDir = "asc"
	RequestListIgnoredEventRequestDirDesc RequestListIgnoredEventRequestDir = "desc"
)

func NewRequestListIgnoredEventRequestDirFromString(s string) (RequestListIgnoredEventRequestDir, error) {
	switch s {
	case "asc":
		return RequestListIgnoredEventRequestDirAsc, nil
	case "desc":
		return RequestListIgnoredEventRequestDirDesc, nil
	}
	var t RequestListIgnoredEventRequestDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestListIgnoredEventRequestDir) Ptr() *RequestListIgnoredEventRequestDir {
	return &r
}

type RequestListIgnoredEventRequestOrderBy string

const (
	RequestListIgnoredEventRequestOrderByCreatedAt RequestListIgnoredEventRequestOrderBy = "created_at"
)

func NewRequestListIgnoredEventRequestOrderByFromString(s string) (RequestListIgnoredEventRequestOrderBy, error) {
	switch s {
	case "created_at":
		return RequestListIgnoredEventRequestOrderByCreatedAt, nil
	}
	var t RequestListIgnoredEventRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestListIgnoredEventRequestOrderBy) Ptr() *RequestListIgnoredEventRequestOrderBy {
	return &r
}

// Sort direction
type RequestListRequestDir string

const (
	RequestListRequestDirAsc  RequestListRequestDir = "asc"
	RequestListRequestDirDesc RequestListRequestDir = "desc"
)

func NewRequestListRequestDirFromString(s string) (RequestListRequestDir, error) {
	switch s {
	case "asc":
		return RequestListRequestDirAsc, nil
	case "desc":
		return RequestListRequestDirDesc, nil
	}
	var t RequestListRequestDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestListRequestDir) Ptr() *RequestListRequestDir {
	return &r
}

// Sort key
type RequestListRequestOrderBy string

const (
	RequestListRequestOrderByIngestedAt RequestListRequestOrderBy = "ingested_at"
	RequestListRequestOrderByCreatedAt  RequestListRequestOrderBy = "created_at"
)

func NewRequestListRequestOrderByFromString(s string) (RequestListRequestOrderBy, error) {
	switch s {
	case "ingested_at":
		return RequestListRequestOrderByIngestedAt, nil
	case "created_at":
		return RequestListRequestOrderByCreatedAt, nil
	}
	var t RequestListRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestListRequestOrderBy) Ptr() *RequestListRequestOrderBy {
	return &r
}

// Filter by status
type RequestListRequestStatus string

const (
	RequestListRequestStatusAccepted RequestListRequestStatus = "accepted"
	RequestListRequestStatusRejected RequestListRequestStatus = "rejected"
)

func NewRequestListRequestStatusFromString(s string) (RequestListRequestStatus, error) {
	switch s {
	case "accepted":
		return RequestListRequestStatusAccepted, nil
	case "rejected":
		return RequestListRequestStatusRejected, nil
	}
	var t RequestListRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestListRequestStatus) Ptr() *RequestListRequestStatus {
	return &r
}
