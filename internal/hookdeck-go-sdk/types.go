// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/hookdeck/hookdeck-go-sdk/internal"
	time "time"
)

// Error response model
type ApiErrorResponse struct {
	// Error code
	Code string `json:"code" url:"code"`
	// Status code
	Status float64 `json:"status" url:"status"`
	// Error description
	Message string                `json:"message" url:"message"`
	Data    *ApiErrorResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApiErrorResponse) GetCode() string {
	if a == nil {
		return ""
	}
	return a.Code
}

func (a *ApiErrorResponse) GetStatus() float64 {
	if a == nil {
		return 0
	}
	return a.Status
}

func (a *ApiErrorResponse) GetMessage() string {
	if a == nil {
		return ""
	}
	return a.Message
}

func (a *ApiErrorResponse) GetData() *ApiErrorResponseData {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *ApiErrorResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiErrorResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiErrorResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiErrorResponseData struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApiErrorResponseData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiErrorResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiErrorResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiErrorResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiErrorResponseData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiKeyIntegrationConfigs struct {
	HeaderKey string `json:"header_key" url:"header_key"`
	ApiKey    string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApiKeyIntegrationConfigs) GetHeaderKey() string {
	if a == nil {
		return ""
	}
	return a.HeaderKey
}

func (a *ApiKeyIntegrationConfigs) GetApiKey() string {
	if a == nil {
		return ""
	}
	return a.ApiKey
}

func (a *ApiKeyIntegrationConfigs) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiKeyIntegrationConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiKeyIntegrationConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiKeyIntegrationConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiKeyIntegrationConfigs) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AttachedIntegrationToSource struct {
	Success bool `json:"success" url:"success"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AttachedIntegrationToSource) GetSuccess() bool {
	if a == nil {
		return false
	}
	return a.Success
}

func (a *AttachedIntegrationToSource) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttachedIntegrationToSource) UnmarshalJSON(data []byte) error {
	type unmarshaler AttachedIntegrationToSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttachedIntegrationToSource(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttachedIntegrationToSource) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Error code of the delivery attempt
type AttemptErrorCodes string

const (
	AttemptErrorCodesCancelled                AttemptErrorCodes = "CANCELLED"
	AttemptErrorCodesTimeout                  AttemptErrorCodes = "TIMEOUT"
	AttemptErrorCodesNotFound                 AttemptErrorCodes = "NOT_FOUND"
	AttemptErrorCodesConnectionRefused        AttemptErrorCodes = "CONNECTION_REFUSED"
	AttemptErrorCodesConnectionReset          AttemptErrorCodes = "CONNECTION_RESET"
	AttemptErrorCodesMissingUrl               AttemptErrorCodes = "MISSING_URL"
	AttemptErrorCodesCli                      AttemptErrorCodes = "CLI"
	AttemptErrorCodesCliUnavailable           AttemptErrorCodes = "CLI_UNAVAILABLE"
	AttemptErrorCodesSelfSignedCert           AttemptErrorCodes = "SELF_SIGNED_CERT"
	AttemptErrorCodesErrTlsCertAltnameInvalid AttemptErrorCodes = "ERR_TLS_CERT_ALTNAME_INVALID"
	AttemptErrorCodesErrSslWrongVersionNumber AttemptErrorCodes = "ERR_SSL_WRONG_VERSION_NUMBER"
	AttemptErrorCodesSslErrorCaUnknown        AttemptErrorCodes = "SSL_ERROR_CA_UNKNOWN"
	AttemptErrorCodesTtlExpired               AttemptErrorCodes = "TTL_EXPIRED"
	AttemptErrorCodesDataArchived             AttemptErrorCodes = "DATA_ARCHIVED"
	AttemptErrorCodesSslCertExpired           AttemptErrorCodes = "SSL_CERT_EXPIRED"
	AttemptErrorCodesBulkRetryCancelled       AttemptErrorCodes = "BULK_RETRY_CANCELLED"
	AttemptErrorCodesDnsLookupFailed          AttemptErrorCodes = "DNS_LOOKUP_FAILED"
	AttemptErrorCodesHostUnreachable          AttemptErrorCodes = "HOST_UNREACHABLE"
	AttemptErrorCodesProtocolError            AttemptErrorCodes = "PROTOCOL_ERROR"
	AttemptErrorCodesSocketClosed             AttemptErrorCodes = "SOCKET_CLOSED"
	AttemptErrorCodesOauth2HandshakeFailed    AttemptErrorCodes = "OAUTH2_HANDSHAKE_FAILED"
	AttemptErrorCodesUnknown                  AttemptErrorCodes = "UNKNOWN"
)

func NewAttemptErrorCodesFromString(s string) (AttemptErrorCodes, error) {
	switch s {
	case "CANCELLED":
		return AttemptErrorCodesCancelled, nil
	case "TIMEOUT":
		return AttemptErrorCodesTimeout, nil
	case "NOT_FOUND":
		return AttemptErrorCodesNotFound, nil
	case "CONNECTION_REFUSED":
		return AttemptErrorCodesConnectionRefused, nil
	case "CONNECTION_RESET":
		return AttemptErrorCodesConnectionReset, nil
	case "MISSING_URL":
		return AttemptErrorCodesMissingUrl, nil
	case "CLI":
		return AttemptErrorCodesCli, nil
	case "CLI_UNAVAILABLE":
		return AttemptErrorCodesCliUnavailable, nil
	case "SELF_SIGNED_CERT":
		return AttemptErrorCodesSelfSignedCert, nil
	case "ERR_TLS_CERT_ALTNAME_INVALID":
		return AttemptErrorCodesErrTlsCertAltnameInvalid, nil
	case "ERR_SSL_WRONG_VERSION_NUMBER":
		return AttemptErrorCodesErrSslWrongVersionNumber, nil
	case "SSL_ERROR_CA_UNKNOWN":
		return AttemptErrorCodesSslErrorCaUnknown, nil
	case "TTL_EXPIRED":
		return AttemptErrorCodesTtlExpired, nil
	case "DATA_ARCHIVED":
		return AttemptErrorCodesDataArchived, nil
	case "SSL_CERT_EXPIRED":
		return AttemptErrorCodesSslCertExpired, nil
	case "BULK_RETRY_CANCELLED":
		return AttemptErrorCodesBulkRetryCancelled, nil
	case "DNS_LOOKUP_FAILED":
		return AttemptErrorCodesDnsLookupFailed, nil
	case "HOST_UNREACHABLE":
		return AttemptErrorCodesHostUnreachable, nil
	case "PROTOCOL_ERROR":
		return AttemptErrorCodesProtocolError, nil
	case "SOCKET_CLOSED":
		return AttemptErrorCodesSocketClosed, nil
	case "OAUTH2_HANDSHAKE_FAILED":
		return AttemptErrorCodesOauth2HandshakeFailed, nil
	case "UNKNOWN":
		return AttemptErrorCodesUnknown, nil
	}
	var t AttemptErrorCodes
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AttemptErrorCodes) Ptr() *AttemptErrorCodes {
	return &a
}

// Attempt status
type AttemptStatus string

const (
	AttemptStatusFailed     AttemptStatus = "FAILED"
	AttemptStatusSuccessful AttemptStatus = "SUCCESSFUL"
)

func NewAttemptStatusFromString(s string) (AttemptStatus, error) {
	switch s {
	case "FAILED":
		return AttemptStatusFailed, nil
	case "SUCCESSFUL":
		return AttemptStatusSuccessful, nil
	}
	var t AttemptStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AttemptStatus) Ptr() *AttemptStatus {
	return &a
}

// How the attempt was triggered
type AttemptTrigger string

const (
	AttemptTriggerInitial   AttemptTrigger = "INITIAL"
	AttemptTriggerManual    AttemptTrigger = "MANUAL"
	AttemptTriggerBulkRetry AttemptTrigger = "BULK_RETRY"
	AttemptTriggerUnpause   AttemptTrigger = "UNPAUSE"
	AttemptTriggerAutomatic AttemptTrigger = "AUTOMATIC"
)

func NewAttemptTriggerFromString(s string) (AttemptTrigger, error) {
	switch s {
	case "INITIAL":
		return AttemptTriggerInitial, nil
	case "MANUAL":
		return AttemptTriggerManual, nil
	case "BULK_RETRY":
		return AttemptTriggerBulkRetry, nil
	case "UNPAUSE":
		return AttemptTriggerUnpause, nil
	case "AUTOMATIC":
		return AttemptTriggerAutomatic, nil
	}
	var t AttemptTrigger
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AttemptTrigger) Ptr() *AttemptTrigger {
	return &a
}

// API Key
type AuthApiKey struct {
	Config *DestinationAuthMethodApiKeyConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthApiKey) GetConfig() *DestinationAuthMethodApiKeyConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthApiKey) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthApiKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthApiKey) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// AWS Signature
type AuthAwsSignature struct {
	Config *DestinationAuthMethodAwsSignatureConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthAwsSignature) GetConfig() *DestinationAuthMethodAwsSignatureConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthAwsSignature) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthAwsSignature) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthAwsSignature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthAwsSignature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthAwsSignature) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Basic Auth
type AuthBasicAuth struct {
	Config *DestinationAuthMethodBasicAuthConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthBasicAuth) GetConfig() *DestinationAuthMethodBasicAuthConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthBasicAuth) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthBasicAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthBasicAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthBasicAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthBasicAuth) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Bearer Token
type AuthBearerToken struct {
	Config *DestinationAuthMethodBearerTokenConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthBearerToken) GetConfig() *DestinationAuthMethodBearerTokenConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthBearerToken) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthBearerToken) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthBearerToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthBearerToken(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthBearerToken) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Custom Signature
type AuthCustomSignature struct {
	Config *DestinationAuthMethodCustomSignatureConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthCustomSignature) GetConfig() *DestinationAuthMethodCustomSignatureConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthCustomSignature) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthCustomSignature) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthCustomSignature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthCustomSignature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthCustomSignature) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Hookdeck Signature
type AuthHookdeckSignature struct {
	Config *DestinationAuthMethodSignatureConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthHookdeckSignature) GetConfig() *DestinationAuthMethodSignatureConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthHookdeckSignature) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthHookdeckSignature) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthHookdeckSignature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthHookdeckSignature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthHookdeckSignature) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// OAuth2 Authorization Code
type AuthOAuth2AuthorizationCode struct {
	Config *DestinationAuthMethodOAuth2AuthorizationCodeConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthOAuth2AuthorizationCode) GetConfig() *DestinationAuthMethodOAuth2AuthorizationCodeConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthOAuth2AuthorizationCode) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthOAuth2AuthorizationCode) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthOAuth2AuthorizationCode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthOAuth2AuthorizationCode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthOAuth2AuthorizationCode) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// OAuth2 Client Credentials
type AuthOAuth2ClientCredentials struct {
	Config *DestinationAuthMethodOAuth2ClientCredentialsConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthOAuth2ClientCredentials) GetConfig() *DestinationAuthMethodOAuth2ClientCredentialsConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthOAuth2ClientCredentials) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthOAuth2ClientCredentials) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthOAuth2ClientCredentials
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthOAuth2ClientCredentials(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthOAuth2ClientCredentials) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type BasicAuthIntegrationConfigs struct {
	Username string `json:"username" url:"username"`
	Password string `json:"password" url:"password"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BasicAuthIntegrationConfigs) GetUsername() string {
	if b == nil {
		return ""
	}
	return b.Username
}

func (b *BasicAuthIntegrationConfigs) GetPassword() string {
	if b == nil {
		return ""
	}
	return b.Password
}

func (b *BasicAuthIntegrationConfigs) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicAuthIntegrationConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicAuthIntegrationConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicAuthIntegrationConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicAuthIntegrationConfigs) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchOperation struct {
	// ID of the bulk retry
	Id string `json:"id" url:"id"`
	// ID of the project
	TeamId string `json:"team_id" url:"team_id"`
	// Query object to filter records
	Query *BatchOperationQuery `json:"query,omitempty" url:"query,omitempty"`
	// Date the bulk retry was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Last time the bulk retry was updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the bulk retry was cancelled
	CancelledAt *time.Time `json:"cancelled_at,omitempty" url:"cancelled_at,omitempty"`
	// Date the bulk retry was completed
	CompletedAt *time.Time `json:"completed_at,omitempty" url:"completed_at,omitempty"`
	// Number of batches required to complete the bulk retry
	EstimatedBatch *int `json:"estimated_batch,omitempty" url:"estimated_batch,omitempty"`
	// Number of estimated events to be retried
	EstimatedCount *int `json:"estimated_count,omitempty" url:"estimated_count,omitempty"`
	// Number of batches currently processed
	ProcessedBatch *int `json:"processed_batch,omitempty" url:"processed_batch,omitempty"`
	// Number of events that were successfully delivered
	CompletedCount *int `json:"completed_count,omitempty" url:"completed_count,omitempty"`
	// Indicates if the bulk retry is currently in progress
	InProgress bool `json:"in_progress" url:"in_progress"`
	// Progression of the batch operations, values 0 - 1
	Progress *float64 `json:"progress,omitempty" url:"progress,omitempty"`
	// Number of events that failed to be delivered
	FailedCount *int     `json:"failed_count,omitempty" url:"failed_count,omitempty"`
	Number      *float64 `json:"number,omitempty" url:"number,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchOperation) GetId() string {
	if b == nil {
		return ""
	}
	return b.Id
}

func (b *BatchOperation) GetTeamId() string {
	if b == nil {
		return ""
	}
	return b.TeamId
}

func (b *BatchOperation) GetQuery() *BatchOperationQuery {
	if b == nil {
		return nil
	}
	return b.Query
}

func (b *BatchOperation) GetCreatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.CreatedAt
}

func (b *BatchOperation) GetUpdatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.UpdatedAt
}

func (b *BatchOperation) GetCancelledAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.CancelledAt
}

func (b *BatchOperation) GetCompletedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.CompletedAt
}

func (b *BatchOperation) GetEstimatedBatch() *int {
	if b == nil {
		return nil
	}
	return b.EstimatedBatch
}

func (b *BatchOperation) GetEstimatedCount() *int {
	if b == nil {
		return nil
	}
	return b.EstimatedCount
}

func (b *BatchOperation) GetProcessedBatch() *int {
	if b == nil {
		return nil
	}
	return b.ProcessedBatch
}

func (b *BatchOperation) GetCompletedCount() *int {
	if b == nil {
		return nil
	}
	return b.CompletedCount
}

func (b *BatchOperation) GetInProgress() bool {
	if b == nil {
		return false
	}
	return b.InProgress
}

func (b *BatchOperation) GetProgress() *float64 {
	if b == nil {
		return nil
	}
	return b.Progress
}

func (b *BatchOperation) GetFailedCount() *int {
	if b == nil {
		return nil
	}
	return b.FailedCount
}

func (b *BatchOperation) GetNumber() *float64 {
	if b == nil {
		return nil
	}
	return b.Number
}

func (b *BatchOperation) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchOperation) UnmarshalJSON(data []byte) error {
	type embed BatchOperation
	var unmarshaler = struct {
		embed
		CreatedAt   *internal.DateTime `json:"created_at"`
		UpdatedAt   *internal.DateTime `json:"updated_at"`
		CancelledAt *internal.DateTime `json:"cancelled_at,omitempty"`
		CompletedAt *internal.DateTime `json:"completed_at,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BatchOperation(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.Time()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()
	b.CancelledAt = unmarshaler.CancelledAt.TimePtr()
	b.CompletedAt = unmarshaler.CompletedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchOperation) MarshalJSON() ([]byte, error) {
	type embed BatchOperation
	var marshaler = struct {
		embed
		CreatedAt   *internal.DateTime `json:"created_at"`
		UpdatedAt   *internal.DateTime `json:"updated_at"`
		CancelledAt *internal.DateTime `json:"cancelled_at,omitempty"`
		CompletedAt *internal.DateTime `json:"completed_at,omitempty"`
	}{
		embed:       embed(*b),
		CreatedAt:   internal.NewDateTime(b.CreatedAt),
		UpdatedAt:   internal.NewDateTime(b.UpdatedAt),
		CancelledAt: internal.NewOptionalDateTime(b.CancelledAt),
		CompletedAt: internal.NewOptionalDateTime(b.CompletedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BatchOperation) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchOperationPaginatedResult struct {
	Pagination *SeekPagination   `json:"pagination,omitempty" url:"pagination,omitempty"`
	Count      *int              `json:"count,omitempty" url:"count,omitempty"`
	Models     []*BatchOperation `json:"models,omitempty" url:"models,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchOperationPaginatedResult) GetPagination() *SeekPagination {
	if b == nil {
		return nil
	}
	return b.Pagination
}

func (b *BatchOperationPaginatedResult) GetCount() *int {
	if b == nil {
		return nil
	}
	return b.Count
}

func (b *BatchOperationPaginatedResult) GetModels() []*BatchOperation {
	if b == nil {
		return nil
	}
	return b.Models
}

func (b *BatchOperationPaginatedResult) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchOperationPaginatedResult) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchOperationPaginatedResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchOperationPaginatedResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchOperationPaginatedResult) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Query object to filter records
type BatchOperationQuery struct {
	StringUnknownMap map[string]interface{}
	StringOptional   *string

	typ string
}

func NewBatchOperationQueryFromStringUnknownMap(value map[string]interface{}) *BatchOperationQuery {
	return &BatchOperationQuery{typ: "StringUnknownMap", StringUnknownMap: value}
}

func NewBatchOperationQueryFromStringOptional(value *string) *BatchOperationQuery {
	return &BatchOperationQuery{typ: "StringOptional", StringOptional: value}
}

func (b *BatchOperationQuery) GetStringUnknownMap() map[string]interface{} {
	if b == nil {
		return nil
	}
	return b.StringUnknownMap
}

func (b *BatchOperationQuery) GetStringOptional() *string {
	if b == nil {
		return nil
	}
	return b.StringOptional
}

func (b *BatchOperationQuery) UnmarshalJSON(data []byte) error {
	var valueStringUnknownMap map[string]interface{}
	if err := json.Unmarshal(data, &valueStringUnknownMap); err == nil {
		b.typ = "StringUnknownMap"
		b.StringUnknownMap = valueStringUnknownMap
		return nil
	}
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		b.typ = "StringOptional"
		b.StringOptional = valueStringOptional
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BatchOperationQuery) MarshalJSON() ([]byte, error) {
	if b.typ == "StringUnknownMap" || b.StringUnknownMap != nil {
		return json.Marshal(b.StringUnknownMap)
	}
	if b.typ == "StringOptional" || b.StringOptional != nil {
		return json.Marshal(b.StringOptional)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", b)
}

type BatchOperationQueryVisitor interface {
	VisitStringUnknownMap(map[string]interface{}) error
	VisitStringOptional(*string) error
}

func (b *BatchOperationQuery) Accept(visitor BatchOperationQueryVisitor) error {
	if b.typ == "StringUnknownMap" || b.StringUnknownMap != nil {
		return visitor.VisitStringUnknownMap(b.StringUnknownMap)
	}
	if b.typ == "StringOptional" || b.StringOptional != nil {
		return visitor.VisitStringOptional(b.StringOptional)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", b)
}

type ConsoleLine struct {
	Type    ConsoleLineType `json:"type" url:"type"`
	Message string          `json:"message" url:"message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConsoleLine) GetType() ConsoleLineType {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *ConsoleLine) GetMessage() string {
	if c == nil {
		return ""
	}
	return c.Message
}

func (c *ConsoleLine) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConsoleLine) UnmarshalJSON(data []byte) error {
	type unmarshaler ConsoleLine
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConsoleLine(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConsoleLine) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConsoleLineType string

const (
	ConsoleLineTypeError ConsoleLineType = "error"
	ConsoleLineTypeLog   ConsoleLineType = "log"
	ConsoleLineTypeWarn  ConsoleLineType = "warn"
	ConsoleLineTypeInfo  ConsoleLineType = "info"
	ConsoleLineTypeDebug ConsoleLineType = "debug"
)

func NewConsoleLineTypeFromString(s string) (ConsoleLineType, error) {
	switch s {
	case "error":
		return ConsoleLineTypeError, nil
	case "log":
		return ConsoleLineTypeLog, nil
	case "warn":
		return ConsoleLineTypeWarn, nil
	case "info":
		return ConsoleLineTypeInfo, nil
	case "debug":
		return ConsoleLineTypeDebug, nil
	}
	var t ConsoleLineType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConsoleLineType) Ptr() *ConsoleLineType {
	return &c
}

type DeletedIntegration struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeletedIntegration) GetId() string {
	if d == nil {
		return ""
	}
	return d.Id
}

func (d *DeletedIntegration) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeletedIntegration) UnmarshalJSON(data []byte) error {
	type unmarshaler DeletedIntegration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeletedIntegration(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeletedIntegration) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Associated [Destination](#destination-object) object
type Destination struct {
	// ID of the destination
	Id string `json:"id" url:"id"`
	// A unique, human-friendly name for the destination
	Name string `json:"name" url:"name"`
	// Description of the destination
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// ID of the project
	TeamId                 string `json:"team_id" url:"team_id"`
	PathForwardingDisabled *bool  `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	// HTTP endpoint of the destination
	Url *string `json:"url,omitempty" url:"url,omitempty"`
	// Path for the CLI destination
	CliPath *string `json:"cli_path,omitempty" url:"cli_path,omitempty"`
	// Limit of events to receive per period. Refered as Delivery Rate limit in the dashboard and documentation.
	RateLimit       *int                         `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod *DestinationRateLimitPeriod  `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	HttpMethod      *DestinationHttpMethod       `json:"http_method,omitempty" url:"http_method,omitempty"`
	AuthMethod      *DestinationAuthMethodConfig `json:"auth_method,omitempty" url:"auth_method,omitempty"`
	// Date the destination was disabled
	DisabledAt *time.Time `json:"disabled_at,omitempty" url:"disabled_at,omitempty"`
	// Date the destination was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the destination was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *Destination) GetId() string {
	if d == nil {
		return ""
	}
	return d.Id
}

func (d *Destination) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *Destination) GetDescription() *string {
	if d == nil {
		return nil
	}
	return d.Description
}

func (d *Destination) GetTeamId() string {
	if d == nil {
		return ""
	}
	return d.TeamId
}

func (d *Destination) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *Destination) GetUrl() *string {
	if d == nil {
		return nil
	}
	return d.Url
}

func (d *Destination) GetCliPath() *string {
	if d == nil {
		return nil
	}
	return d.CliPath
}

func (d *Destination) GetRateLimit() *int {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *Destination) GetRateLimitPeriod() *DestinationRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *Destination) GetHttpMethod() *DestinationHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *Destination) GetAuthMethod() *DestinationAuthMethodConfig {
	if d == nil {
		return nil
	}
	return d.AuthMethod
}

func (d *Destination) GetDisabledAt() *time.Time {
	if d == nil {
		return nil
	}
	return d.DisabledAt
}

func (d *Destination) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

func (d *Destination) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *Destination) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Destination) UnmarshalJSON(data []byte) error {
	type embed Destination
	var unmarshaler = struct {
		embed
		DisabledAt *internal.DateTime `json:"disabled_at,omitempty"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
		CreatedAt  *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = Destination(unmarshaler.embed)
	d.DisabledAt = unmarshaler.DisabledAt.TimePtr()
	d.UpdatedAt = unmarshaler.UpdatedAt.Time()
	d.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *Destination) MarshalJSON() ([]byte, error) {
	type embed Destination
	var marshaler = struct {
		embed
		DisabledAt *internal.DateTime `json:"disabled_at,omitempty"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
		CreatedAt  *internal.DateTime `json:"created_at"`
	}{
		embed:      embed(*d),
		DisabledAt: internal.NewOptionalDateTime(d.DisabledAt),
		UpdatedAt:  internal.NewDateTime(d.UpdatedAt),
		CreatedAt:  internal.NewDateTime(d.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (d *Destination) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// API key config for the destination's auth method
type DestinationAuthMethodApiKeyConfig struct {
	// Key for the API key auth
	Key string `json:"key" url:"key"`
	// API key for the API key auth
	ApiKey string `json:"api_key" url:"api_key"`
	// Whether the API key should be sent as a header or a query parameter
	To *DestinationAuthMethodApiKeyConfigTo `json:"to,omitempty" url:"to,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodApiKeyConfig) GetKey() string {
	if d == nil {
		return ""
	}
	return d.Key
}

func (d *DestinationAuthMethodApiKeyConfig) GetApiKey() string {
	if d == nil {
		return ""
	}
	return d.ApiKey
}

func (d *DestinationAuthMethodApiKeyConfig) GetTo() *DestinationAuthMethodApiKeyConfigTo {
	if d == nil {
		return nil
	}
	return d.To
}

func (d *DestinationAuthMethodApiKeyConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodApiKeyConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodApiKeyConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodApiKeyConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodApiKeyConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Whether the API key should be sent as a header or a query parameter
type DestinationAuthMethodApiKeyConfigTo string

const (
	DestinationAuthMethodApiKeyConfigToHeader DestinationAuthMethodApiKeyConfigTo = "header"
	DestinationAuthMethodApiKeyConfigToQuery  DestinationAuthMethodApiKeyConfigTo = "query"
)

func NewDestinationAuthMethodApiKeyConfigToFromString(s string) (DestinationAuthMethodApiKeyConfigTo, error) {
	switch s {
	case "header":
		return DestinationAuthMethodApiKeyConfigToHeader, nil
	case "query":
		return DestinationAuthMethodApiKeyConfigToQuery, nil
	}
	var t DestinationAuthMethodApiKeyConfigTo
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationAuthMethodApiKeyConfigTo) Ptr() *DestinationAuthMethodApiKeyConfigTo {
	return &d
}

// AWS Signature config for the destination's auth method
type DestinationAuthMethodAwsSignatureConfig struct {
	// AWS access key id
	AccessKeyId string `json:"access_key_id" url:"access_key_id"`
	// AWS secret access key
	SecretAccessKey string `json:"secret_access_key" url:"secret_access_key"`
	// AWS region
	Region *string `json:"region,omitempty" url:"region,omitempty"`
	// AWS service
	Service *string `json:"service,omitempty" url:"service,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodAwsSignatureConfig) GetAccessKeyId() string {
	if d == nil {
		return ""
	}
	return d.AccessKeyId
}

func (d *DestinationAuthMethodAwsSignatureConfig) GetSecretAccessKey() string {
	if d == nil {
		return ""
	}
	return d.SecretAccessKey
}

func (d *DestinationAuthMethodAwsSignatureConfig) GetRegion() *string {
	if d == nil {
		return nil
	}
	return d.Region
}

func (d *DestinationAuthMethodAwsSignatureConfig) GetService() *string {
	if d == nil {
		return nil
	}
	return d.Service
}

func (d *DestinationAuthMethodAwsSignatureConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodAwsSignatureConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodAwsSignatureConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodAwsSignatureConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodAwsSignatureConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Basic auth config for the destination's auth method
type DestinationAuthMethodBasicAuthConfig struct {
	// Username for basic auth
	Username string `json:"username" url:"username"`
	// Password for basic auth
	Password string `json:"password" url:"password"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodBasicAuthConfig) GetUsername() string {
	if d == nil {
		return ""
	}
	return d.Username
}

func (d *DestinationAuthMethodBasicAuthConfig) GetPassword() string {
	if d == nil {
		return ""
	}
	return d.Password
}

func (d *DestinationAuthMethodBasicAuthConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodBasicAuthConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodBasicAuthConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodBasicAuthConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodBasicAuthConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Bearer token config for the destination's auth method
type DestinationAuthMethodBearerTokenConfig struct {
	// Token for the bearer token auth
	Token string `json:"token" url:"token"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodBearerTokenConfig) GetToken() string {
	if d == nil {
		return ""
	}
	return d.Token
}

func (d *DestinationAuthMethodBearerTokenConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodBearerTokenConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodBearerTokenConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodBearerTokenConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodBearerTokenConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Config for the destination's auth method
type DestinationAuthMethodConfig struct {
	Type                    string
	HookdeckSignature       *AuthHookdeckSignature
	BasicAuth               *AuthBasicAuth
	ApiKey                  *AuthApiKey
	BearerToken             *AuthBearerToken
	Oauth2ClientCredentials *AuthOAuth2ClientCredentials
	Oauth2AuthorizationCode *AuthOAuth2AuthorizationCode
	CustomSignature         *AuthCustomSignature
	AwsSignature            *AuthAwsSignature
}

func NewDestinationAuthMethodConfigFromHookdeckSignature(value *AuthHookdeckSignature) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "HOOKDECK_SIGNATURE", HookdeckSignature: value}
}

func NewDestinationAuthMethodConfigFromBasicAuth(value *AuthBasicAuth) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "BASIC_AUTH", BasicAuth: value}
}

func NewDestinationAuthMethodConfigFromApiKey(value *AuthApiKey) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "API_KEY", ApiKey: value}
}

func NewDestinationAuthMethodConfigFromBearerToken(value *AuthBearerToken) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "BEARER_TOKEN", BearerToken: value}
}

func NewDestinationAuthMethodConfigFromOauth2ClientCredentials(value *AuthOAuth2ClientCredentials) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "OAUTH2_CLIENT_CREDENTIALS", Oauth2ClientCredentials: value}
}

func NewDestinationAuthMethodConfigFromOauth2AuthorizationCode(value *AuthOAuth2AuthorizationCode) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "OAUTH2_AUTHORIZATION_CODE", Oauth2AuthorizationCode: value}
}

func NewDestinationAuthMethodConfigFromCustomSignature(value *AuthCustomSignature) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "CUSTOM_SIGNATURE", CustomSignature: value}
}

func NewDestinationAuthMethodConfigFromAwsSignature(value *AuthAwsSignature) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "AWS_SIGNATURE", AwsSignature: value}
}

func (d *DestinationAuthMethodConfig) GetType() string {
	if d == nil {
		return ""
	}
	return d.Type
}

func (d *DestinationAuthMethodConfig) GetHookdeckSignature() *AuthHookdeckSignature {
	if d == nil {
		return nil
	}
	return d.HookdeckSignature
}

func (d *DestinationAuthMethodConfig) GetBasicAuth() *AuthBasicAuth {
	if d == nil {
		return nil
	}
	return d.BasicAuth
}

func (d *DestinationAuthMethodConfig) GetApiKey() *AuthApiKey {
	if d == nil {
		return nil
	}
	return d.ApiKey
}

func (d *DestinationAuthMethodConfig) GetBearerToken() *AuthBearerToken {
	if d == nil {
		return nil
	}
	return d.BearerToken
}

func (d *DestinationAuthMethodConfig) GetOauth2ClientCredentials() *AuthOAuth2ClientCredentials {
	if d == nil {
		return nil
	}
	return d.Oauth2ClientCredentials
}

func (d *DestinationAuthMethodConfig) GetOauth2AuthorizationCode() *AuthOAuth2AuthorizationCode {
	if d == nil {
		return nil
	}
	return d.Oauth2AuthorizationCode
}

func (d *DestinationAuthMethodConfig) GetCustomSignature() *AuthCustomSignature {
	if d == nil {
		return nil
	}
	return d.CustomSignature
}

func (d *DestinationAuthMethodConfig) GetAwsSignature() *AuthAwsSignature {
	if d == nil {
		return nil
	}
	return d.AwsSignature
}

func (d *DestinationAuthMethodConfig) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	d.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", d)
	}
	switch unmarshaler.Type {
	case "HOOKDECK_SIGNATURE":
		value := new(AuthHookdeckSignature)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.HookdeckSignature = value
	case "BASIC_AUTH":
		value := new(AuthBasicAuth)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.BasicAuth = value
	case "API_KEY":
		value := new(AuthApiKey)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.ApiKey = value
	case "BEARER_TOKEN":
		value := new(AuthBearerToken)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.BearerToken = value
	case "OAUTH2_CLIENT_CREDENTIALS":
		value := new(AuthOAuth2ClientCredentials)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.Oauth2ClientCredentials = value
	case "OAUTH2_AUTHORIZATION_CODE":
		value := new(AuthOAuth2AuthorizationCode)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.Oauth2AuthorizationCode = value
	case "CUSTOM_SIGNATURE":
		value := new(AuthCustomSignature)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.CustomSignature = value
	case "AWS_SIGNATURE":
		value := new(AuthAwsSignature)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.AwsSignature = value
	}
	return nil
}

func (d DestinationAuthMethodConfig) MarshalJSON() ([]byte, error) {
	switch d.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", d.Type, d)
	case "HOOKDECK_SIGNATURE":
		return internal.MarshalJSONWithExtraProperty(d.HookdeckSignature, "type", "HOOKDECK_SIGNATURE")
	case "BASIC_AUTH":
		return internal.MarshalJSONWithExtraProperty(d.BasicAuth, "type", "BASIC_AUTH")
	case "API_KEY":
		return internal.MarshalJSONWithExtraProperty(d.ApiKey, "type", "API_KEY")
	case "BEARER_TOKEN":
		return internal.MarshalJSONWithExtraProperty(d.BearerToken, "type", "BEARER_TOKEN")
	case "OAUTH2_CLIENT_CREDENTIALS":
		return internal.MarshalJSONWithExtraProperty(d.Oauth2ClientCredentials, "type", "OAUTH2_CLIENT_CREDENTIALS")
	case "OAUTH2_AUTHORIZATION_CODE":
		return internal.MarshalJSONWithExtraProperty(d.Oauth2AuthorizationCode, "type", "OAUTH2_AUTHORIZATION_CODE")
	case "CUSTOM_SIGNATURE":
		return internal.MarshalJSONWithExtraProperty(d.CustomSignature, "type", "CUSTOM_SIGNATURE")
	case "AWS_SIGNATURE":
		return internal.MarshalJSONWithExtraProperty(d.AwsSignature, "type", "AWS_SIGNATURE")
	}
}

type DestinationAuthMethodConfigVisitor interface {
	VisitHookdeckSignature(*AuthHookdeckSignature) error
	VisitBasicAuth(*AuthBasicAuth) error
	VisitApiKey(*AuthApiKey) error
	VisitBearerToken(*AuthBearerToken) error
	VisitOauth2ClientCredentials(*AuthOAuth2ClientCredentials) error
	VisitOauth2AuthorizationCode(*AuthOAuth2AuthorizationCode) error
	VisitCustomSignature(*AuthCustomSignature) error
	VisitAwsSignature(*AuthAwsSignature) error
}

func (d *DestinationAuthMethodConfig) Accept(visitor DestinationAuthMethodConfigVisitor) error {
	switch d.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", d.Type, d)
	case "HOOKDECK_SIGNATURE":
		return visitor.VisitHookdeckSignature(d.HookdeckSignature)
	case "BASIC_AUTH":
		return visitor.VisitBasicAuth(d.BasicAuth)
	case "API_KEY":
		return visitor.VisitApiKey(d.ApiKey)
	case "BEARER_TOKEN":
		return visitor.VisitBearerToken(d.BearerToken)
	case "OAUTH2_CLIENT_CREDENTIALS":
		return visitor.VisitOauth2ClientCredentials(d.Oauth2ClientCredentials)
	case "OAUTH2_AUTHORIZATION_CODE":
		return visitor.VisitOauth2AuthorizationCode(d.Oauth2AuthorizationCode)
	case "CUSTOM_SIGNATURE":
		return visitor.VisitCustomSignature(d.CustomSignature)
	case "AWS_SIGNATURE":
		return visitor.VisitAwsSignature(d.AwsSignature)
	}
}

// Custom signature config for the destination's auth method
type DestinationAuthMethodCustomSignatureConfig struct {
	// Key for the custom signature auth
	Key string `json:"key" url:"key"`
	// Signing secret for the custom signature auth. If left empty a secret will be generated for you.
	SigningSecret *string `json:"signing_secret,omitempty" url:"signing_secret,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodCustomSignatureConfig) GetKey() string {
	if d == nil {
		return ""
	}
	return d.Key
}

func (d *DestinationAuthMethodCustomSignatureConfig) GetSigningSecret() *string {
	if d == nil {
		return nil
	}
	return d.SigningSecret
}

func (d *DestinationAuthMethodCustomSignatureConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodCustomSignatureConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodCustomSignatureConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodCustomSignatureConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodCustomSignatureConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// OAuth2 Authorization Code config for the destination's auth method
type DestinationAuthMethodOAuth2AuthorizationCodeConfig struct {
	// Client id in the auth server
	ClientId string `json:"client_id" url:"client_id"`
	// Client secret in the auth server
	ClientSecret string `json:"client_secret" url:"client_secret"`
	// Refresh token already returned by the auth server
	RefreshToken string `json:"refresh_token" url:"refresh_token"`
	// Scope to access
	Scope *string `json:"scope,omitempty" url:"scope,omitempty"`
	// URL of the auth server
	AuthServer string `json:"auth_server" url:"auth_server"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) GetClientId() string {
	if d == nil {
		return ""
	}
	return d.ClientId
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) GetClientSecret() string {
	if d == nil {
		return ""
	}
	return d.ClientSecret
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) GetRefreshToken() string {
	if d == nil {
		return ""
	}
	return d.RefreshToken
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) GetScope() *string {
	if d == nil {
		return nil
	}
	return d.Scope
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) GetAuthServer() string {
	if d == nil {
		return ""
	}
	return d.AuthServer
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodOAuth2AuthorizationCodeConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodOAuth2AuthorizationCodeConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// OAuth2 Client Credentials config for the destination's auth method
type DestinationAuthMethodOAuth2ClientCredentialsConfig struct {
	// Client id in the auth server
	ClientId string `json:"client_id" url:"client_id"`
	// Client secret in the auth server
	ClientSecret string `json:"client_secret" url:"client_secret"`
	// Scope to access
	Scope *string `json:"scope,omitempty" url:"scope,omitempty"`
	// URL of the auth server
	AuthServer string `json:"auth_server" url:"auth_server"`
	// Basic (default), Bearer Authentication or x-www-form-urlencoded
	AuthenticationType *DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType `json:"authentication_type,omitempty" url:"authentication_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) GetClientId() string {
	if d == nil {
		return ""
	}
	return d.ClientId
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) GetClientSecret() string {
	if d == nil {
		return ""
	}
	return d.ClientSecret
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) GetScope() *string {
	if d == nil {
		return nil
	}
	return d.Scope
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) GetAuthServer() string {
	if d == nil {
		return ""
	}
	return d.AuthServer
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) GetAuthenticationType() *DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType {
	if d == nil {
		return nil
	}
	return d.AuthenticationType
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodOAuth2ClientCredentialsConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodOAuth2ClientCredentialsConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Basic (default), Bearer Authentication or x-www-form-urlencoded
type DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType string

const (
	DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeBasic              DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType = "basic"
	DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeBearer             DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType = "bearer"
	DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeXWwwFormUrlencoded DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType = "x-www-form-urlencoded"
)

func NewDestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeFromString(s string) (DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType, error) {
	switch s {
	case "basic":
		return DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeBasic, nil
	case "bearer":
		return DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeBearer, nil
	case "x-www-form-urlencoded":
		return DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeXWwwFormUrlencoded, nil
	}
	var t DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType) Ptr() *DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType {
	return &d
}

// Empty config for the destination's auth method
type DestinationAuthMethodSignatureConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodSignatureConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodSignatureConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodSignatureConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodSignatureConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodSignatureConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Configuration object for the destination type
type DestinationConfig struct {
	DestinationTypeConfigHttp    *DestinationTypeConfigHttp
	DestinationTypeConfigCli     *DestinationTypeConfigCli
	DestinationTypeConfigMockApi *DestinationTypeConfigMockApi

	typ string
}

func NewDestinationConfigFromDestinationTypeConfigHttp(value *DestinationTypeConfigHttp) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigHttp", DestinationTypeConfigHttp: value}
}

func NewDestinationConfigFromDestinationTypeConfigCli(value *DestinationTypeConfigCli) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigCli", DestinationTypeConfigCli: value}
}

func NewDestinationConfigFromDestinationTypeConfigMockApi(value *DestinationTypeConfigMockApi) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigMockApi", DestinationTypeConfigMockApi: value}
}

func (d *DestinationConfig) GetDestinationTypeConfigHttp() *DestinationTypeConfigHttp {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttp
}

func (d *DestinationConfig) GetDestinationTypeConfigCli() *DestinationTypeConfigCli {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigCli
}

func (d *DestinationConfig) GetDestinationTypeConfigMockApi() *DestinationTypeConfigMockApi {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigMockApi
}

func (d *DestinationConfig) UnmarshalJSON(data []byte) error {
	valueDestinationTypeConfigHttp := new(DestinationTypeConfigHttp)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttp); err == nil {
		d.typ = "DestinationTypeConfigHttp"
		d.DestinationTypeConfigHttp = valueDestinationTypeConfigHttp
		return nil
	}
	valueDestinationTypeConfigCli := new(DestinationTypeConfigCli)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigCli); err == nil {
		d.typ = "DestinationTypeConfigCli"
		d.DestinationTypeConfigCli = valueDestinationTypeConfigCli
		return nil
	}
	valueDestinationTypeConfigMockApi := new(DestinationTypeConfigMockApi)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigMockApi); err == nil {
		d.typ = "DestinationTypeConfigMockApi"
		d.DestinationTypeConfigMockApi = valueDestinationTypeConfigMockApi
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DestinationConfig) MarshalJSON() ([]byte, error) {
	if d.typ == "DestinationTypeConfigHttp" || d.DestinationTypeConfigHttp != nil {
		return json.Marshal(d.DestinationTypeConfigHttp)
	}
	if d.typ == "DestinationTypeConfigCli" || d.DestinationTypeConfigCli != nil {
		return json.Marshal(d.DestinationTypeConfigCli)
	}
	if d.typ == "DestinationTypeConfigMockApi" || d.DestinationTypeConfigMockApi != nil {
		return json.Marshal(d.DestinationTypeConfigMockApi)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DestinationConfigVisitor interface {
	VisitDestinationTypeConfigHttp(*DestinationTypeConfigHttp) error
	VisitDestinationTypeConfigCli(*DestinationTypeConfigCli) error
	VisitDestinationTypeConfigMockApi(*DestinationTypeConfigMockApi) error
}

func (d *DestinationConfig) Accept(visitor DestinationConfigVisitor) error {
	if d.typ == "DestinationTypeConfigHttp" || d.DestinationTypeConfigHttp != nil {
		return visitor.VisitDestinationTypeConfigHttp(d.DestinationTypeConfigHttp)
	}
	if d.typ == "DestinationTypeConfigCli" || d.DestinationTypeConfigCli != nil {
		return visitor.VisitDestinationTypeConfigCli(d.DestinationTypeConfigCli)
	}
	if d.typ == "DestinationTypeConfigMockApi" || d.DestinationTypeConfigMockApi != nil {
		return visitor.VisitDestinationTypeConfigMockApi(d.DestinationTypeConfigMockApi)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", d)
}

// HTTP method used on requests sent to the destination, overrides the method used on requests sent to the source.
type DestinationHttpMethod string

const (
	DestinationHttpMethodGet    DestinationHttpMethod = "GET"
	DestinationHttpMethodPost   DestinationHttpMethod = "POST"
	DestinationHttpMethodPut    DestinationHttpMethod = "PUT"
	DestinationHttpMethodPatch  DestinationHttpMethod = "PATCH"
	DestinationHttpMethodDelete DestinationHttpMethod = "DELETE"
)

func NewDestinationHttpMethodFromString(s string) (DestinationHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationHttpMethodGet, nil
	case "POST":
		return DestinationHttpMethodPost, nil
	case "PUT":
		return DestinationHttpMethodPut, nil
	case "PATCH":
		return DestinationHttpMethodPatch, nil
	case "DELETE":
		return DestinationHttpMethodDelete, nil
	}
	var t DestinationHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationHttpMethod) Ptr() *DestinationHttpMethod {
	return &d
}

// Period to rate limit events by. Refered as Delivery Rate period in the dashboard and documentation.
type DestinationRateLimitPeriod string

const (
	DestinationRateLimitPeriodSecond     DestinationRateLimitPeriod = "second"
	DestinationRateLimitPeriodMinute     DestinationRateLimitPeriod = "minute"
	DestinationRateLimitPeriodHour       DestinationRateLimitPeriod = "hour"
	DestinationRateLimitPeriodConcurrent DestinationRateLimitPeriod = "concurrent"
)

func NewDestinationRateLimitPeriodFromString(s string) (DestinationRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationRateLimitPeriodSecond, nil
	case "minute":
		return DestinationRateLimitPeriodMinute, nil
	case "hour":
		return DestinationRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationRateLimitPeriodConcurrent, nil
	}
	var t DestinationRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationRateLimitPeriod) Ptr() *DestinationRateLimitPeriod {
	return &d
}

// The type config for CLI. Requires type to be `CLI`.
type DestinationTypeConfigCli struct {
	PathForwardingDisabled *bool                               `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigCliHttpMethod `json:"http_method,omitempty" url:"http_method,omitempty"`
	Auth                   *SourceConfigCliAuth                `json:"auth,omitempty" url:"auth,omitempty"`
	Configs                *DestinationTypeConfigCliConfigs    `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigCli) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigCli) GetHttpMethod() *DestinationTypeConfigCliHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigCli) GetAuth() *SourceConfigCliAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigCli) GetConfigs() *DestinationTypeConfigCliConfigs {
	if d == nil {
		return nil
	}
	return d.Configs
}

func (d *DestinationTypeConfigCli) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigCli) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigCli
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigCli(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigCli) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigCliConfigs struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigCliConfigs) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigCliConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigCliConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigCliConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigCliConfigs) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigCliHttpMethod string

const (
	DestinationTypeConfigCliHttpMethodGet    DestinationTypeConfigCliHttpMethod = "GET"
	DestinationTypeConfigCliHttpMethodPost   DestinationTypeConfigCliHttpMethod = "POST"
	DestinationTypeConfigCliHttpMethodPut    DestinationTypeConfigCliHttpMethod = "PUT"
	DestinationTypeConfigCliHttpMethodPatch  DestinationTypeConfigCliHttpMethod = "PATCH"
	DestinationTypeConfigCliHttpMethodDelete DestinationTypeConfigCliHttpMethod = "DELETE"
)

func NewDestinationTypeConfigCliHttpMethodFromString(s string) (DestinationTypeConfigCliHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigCliHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigCliHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigCliHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigCliHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigCliHttpMethodDelete, nil
	}
	var t DestinationTypeConfigCliHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigCliHttpMethod) Ptr() *DestinationTypeConfigCliHttpMethod {
	return &d
}

// The type config for HTTP. Requires type to be `HTTP`.
type DestinationTypeConfigHttp struct {
	Url                    *string                                   `json:"url,omitempty" url:"url,omitempty"`
	RateLimit              *float64                                  `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod        *DestinationTypeConfigHttpRateLimitPeriod `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	PathForwardingDisabled *bool                                     `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigHttpHttpMethod      `json:"http_method,omitempty" url:"http_method,omitempty"`
	Configs                *DestinationTypeConfigHttpConfigs         `json:"configs,omitempty" url:"configs,omitempty"`
	AuthType               *DestinationTypeConfigHttpAuthType        `json:"auth_type,omitempty" url:"auth_type,omitempty"`
	Auth                   *DestinationTypeConfigHttpAuth            `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttp) GetUrl() *string {
	if d == nil {
		return nil
	}
	return d.Url
}

func (d *DestinationTypeConfigHttp) GetRateLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *DestinationTypeConfigHttp) GetRateLimitPeriod() *DestinationTypeConfigHttpRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *DestinationTypeConfigHttp) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigHttp) GetHttpMethod() *DestinationTypeConfigHttpHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigHttp) GetConfigs() *DestinationTypeConfigHttpConfigs {
	if d == nil {
		return nil
	}
	return d.Configs
}

func (d *DestinationTypeConfigHttp) GetAuthType() *DestinationTypeConfigHttpAuthType {
	if d == nil {
		return nil
	}
	return d.AuthType
}

func (d *DestinationTypeConfigHttp) GetAuth() *DestinationTypeConfigHttpAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigHttp) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttp) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttp) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuth struct {
	DestinationTypeConfigHttpAuthZero               *DestinationTypeConfigHttpAuthZero
	DestinationTypeConfigHttpAuthSigningSecret      *DestinationTypeConfigHttpAuthSigningSecret
	DestinationTypeConfigHttpAuthPassword           *DestinationTypeConfigHttpAuthPassword
	DestinationTypeConfigHttpAuthApiKey             *DestinationTypeConfigHttpAuthApiKey
	DestinationTypeConfigHttpAuthToken              *DestinationTypeConfigHttpAuthToken
	DestinationTypeConfigHttpAuthAuthenticationType *DestinationTypeConfigHttpAuthAuthenticationType
	DestinationTypeConfigHttpAuthRefreshToken       *DestinationTypeConfigHttpAuthRefreshToken
	DestinationTypeConfigHttpAuthAccessKeyId        *DestinationTypeConfigHttpAuthAccessKeyId

	typ string
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthZero(value *DestinationTypeConfigHttpAuthZero) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthZero", DestinationTypeConfigHttpAuthZero: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthSigningSecret(value *DestinationTypeConfigHttpAuthSigningSecret) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthSigningSecret", DestinationTypeConfigHttpAuthSigningSecret: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthPassword(value *DestinationTypeConfigHttpAuthPassword) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthPassword", DestinationTypeConfigHttpAuthPassword: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthApiKey(value *DestinationTypeConfigHttpAuthApiKey) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthApiKey", DestinationTypeConfigHttpAuthApiKey: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthToken(value *DestinationTypeConfigHttpAuthToken) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthToken", DestinationTypeConfigHttpAuthToken: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthAuthenticationType(value *DestinationTypeConfigHttpAuthAuthenticationType) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthAuthenticationType", DestinationTypeConfigHttpAuthAuthenticationType: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthRefreshToken(value *DestinationTypeConfigHttpAuthRefreshToken) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthRefreshToken", DestinationTypeConfigHttpAuthRefreshToken: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthAccessKeyId(value *DestinationTypeConfigHttpAuthAccessKeyId) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthAccessKeyId", DestinationTypeConfigHttpAuthAccessKeyId: value}
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthZero() *DestinationTypeConfigHttpAuthZero {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthZero
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthSigningSecret() *DestinationTypeConfigHttpAuthSigningSecret {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthSigningSecret
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthPassword() *DestinationTypeConfigHttpAuthPassword {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthPassword
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthApiKey() *DestinationTypeConfigHttpAuthApiKey {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthApiKey
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthToken() *DestinationTypeConfigHttpAuthToken {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthToken
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthAuthenticationType() *DestinationTypeConfigHttpAuthAuthenticationType {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthAuthenticationType
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthRefreshToken() *DestinationTypeConfigHttpAuthRefreshToken {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthRefreshToken
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthAccessKeyId() *DestinationTypeConfigHttpAuthAccessKeyId {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthAccessKeyId
}

func (d *DestinationTypeConfigHttpAuth) UnmarshalJSON(data []byte) error {
	valueDestinationTypeConfigHttpAuthZero := new(DestinationTypeConfigHttpAuthZero)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthZero); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthZero"
		d.DestinationTypeConfigHttpAuthZero = valueDestinationTypeConfigHttpAuthZero
		return nil
	}
	valueDestinationTypeConfigHttpAuthSigningSecret := new(DestinationTypeConfigHttpAuthSigningSecret)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthSigningSecret); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthSigningSecret"
		d.DestinationTypeConfigHttpAuthSigningSecret = valueDestinationTypeConfigHttpAuthSigningSecret
		return nil
	}
	valueDestinationTypeConfigHttpAuthPassword := new(DestinationTypeConfigHttpAuthPassword)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthPassword); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthPassword"
		d.DestinationTypeConfigHttpAuthPassword = valueDestinationTypeConfigHttpAuthPassword
		return nil
	}
	valueDestinationTypeConfigHttpAuthApiKey := new(DestinationTypeConfigHttpAuthApiKey)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthApiKey); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthApiKey"
		d.DestinationTypeConfigHttpAuthApiKey = valueDestinationTypeConfigHttpAuthApiKey
		return nil
	}
	valueDestinationTypeConfigHttpAuthToken := new(DestinationTypeConfigHttpAuthToken)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthToken); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthToken"
		d.DestinationTypeConfigHttpAuthToken = valueDestinationTypeConfigHttpAuthToken
		return nil
	}
	valueDestinationTypeConfigHttpAuthAuthenticationType := new(DestinationTypeConfigHttpAuthAuthenticationType)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthAuthenticationType); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthAuthenticationType"
		d.DestinationTypeConfigHttpAuthAuthenticationType = valueDestinationTypeConfigHttpAuthAuthenticationType
		return nil
	}
	valueDestinationTypeConfigHttpAuthRefreshToken := new(DestinationTypeConfigHttpAuthRefreshToken)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthRefreshToken); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthRefreshToken"
		d.DestinationTypeConfigHttpAuthRefreshToken = valueDestinationTypeConfigHttpAuthRefreshToken
		return nil
	}
	valueDestinationTypeConfigHttpAuthAccessKeyId := new(DestinationTypeConfigHttpAuthAccessKeyId)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthAccessKeyId); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthAccessKeyId"
		d.DestinationTypeConfigHttpAuthAccessKeyId = valueDestinationTypeConfigHttpAuthAccessKeyId
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DestinationTypeConfigHttpAuth) MarshalJSON() ([]byte, error) {
	if d.typ == "DestinationTypeConfigHttpAuthZero" || d.DestinationTypeConfigHttpAuthZero != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthZero)
	}
	if d.typ == "DestinationTypeConfigHttpAuthSigningSecret" || d.DestinationTypeConfigHttpAuthSigningSecret != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthSigningSecret)
	}
	if d.typ == "DestinationTypeConfigHttpAuthPassword" || d.DestinationTypeConfigHttpAuthPassword != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthPassword)
	}
	if d.typ == "DestinationTypeConfigHttpAuthApiKey" || d.DestinationTypeConfigHttpAuthApiKey != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthApiKey)
	}
	if d.typ == "DestinationTypeConfigHttpAuthToken" || d.DestinationTypeConfigHttpAuthToken != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthToken)
	}
	if d.typ == "DestinationTypeConfigHttpAuthAuthenticationType" || d.DestinationTypeConfigHttpAuthAuthenticationType != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthAuthenticationType)
	}
	if d.typ == "DestinationTypeConfigHttpAuthRefreshToken" || d.DestinationTypeConfigHttpAuthRefreshToken != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthRefreshToken)
	}
	if d.typ == "DestinationTypeConfigHttpAuthAccessKeyId" || d.DestinationTypeConfigHttpAuthAccessKeyId != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthAccessKeyId)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DestinationTypeConfigHttpAuthVisitor interface {
	VisitDestinationTypeConfigHttpAuthZero(*DestinationTypeConfigHttpAuthZero) error
	VisitDestinationTypeConfigHttpAuthSigningSecret(*DestinationTypeConfigHttpAuthSigningSecret) error
	VisitDestinationTypeConfigHttpAuthPassword(*DestinationTypeConfigHttpAuthPassword) error
	VisitDestinationTypeConfigHttpAuthApiKey(*DestinationTypeConfigHttpAuthApiKey) error
	VisitDestinationTypeConfigHttpAuthToken(*DestinationTypeConfigHttpAuthToken) error
	VisitDestinationTypeConfigHttpAuthAuthenticationType(*DestinationTypeConfigHttpAuthAuthenticationType) error
	VisitDestinationTypeConfigHttpAuthRefreshToken(*DestinationTypeConfigHttpAuthRefreshToken) error
	VisitDestinationTypeConfigHttpAuthAccessKeyId(*DestinationTypeConfigHttpAuthAccessKeyId) error
}

func (d *DestinationTypeConfigHttpAuth) Accept(visitor DestinationTypeConfigHttpAuthVisitor) error {
	if d.typ == "DestinationTypeConfigHttpAuthZero" || d.DestinationTypeConfigHttpAuthZero != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthZero(d.DestinationTypeConfigHttpAuthZero)
	}
	if d.typ == "DestinationTypeConfigHttpAuthSigningSecret" || d.DestinationTypeConfigHttpAuthSigningSecret != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthSigningSecret(d.DestinationTypeConfigHttpAuthSigningSecret)
	}
	if d.typ == "DestinationTypeConfigHttpAuthPassword" || d.DestinationTypeConfigHttpAuthPassword != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthPassword(d.DestinationTypeConfigHttpAuthPassword)
	}
	if d.typ == "DestinationTypeConfigHttpAuthApiKey" || d.DestinationTypeConfigHttpAuthApiKey != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthApiKey(d.DestinationTypeConfigHttpAuthApiKey)
	}
	if d.typ == "DestinationTypeConfigHttpAuthToken" || d.DestinationTypeConfigHttpAuthToken != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthToken(d.DestinationTypeConfigHttpAuthToken)
	}
	if d.typ == "DestinationTypeConfigHttpAuthAuthenticationType" || d.DestinationTypeConfigHttpAuthAuthenticationType != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthAuthenticationType(d.DestinationTypeConfigHttpAuthAuthenticationType)
	}
	if d.typ == "DestinationTypeConfigHttpAuthRefreshToken" || d.DestinationTypeConfigHttpAuthRefreshToken != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthRefreshToken(d.DestinationTypeConfigHttpAuthRefreshToken)
	}
	if d.typ == "DestinationTypeConfigHttpAuthAccessKeyId" || d.DestinationTypeConfigHttpAuthAccessKeyId != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthAccessKeyId(d.DestinationTypeConfigHttpAuthAccessKeyId)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DestinationTypeConfigHttpAuthAccessKeyId struct {
	AccessKeyId     string `json:"access_key_id" url:"access_key_id"`
	SecretAccessKey string `json:"secret_access_key" url:"secret_access_key"`
	Region          string `json:"region" url:"region"`
	Service         string `json:"service" url:"service"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) GetAccessKeyId() string {
	if d == nil {
		return ""
	}
	return d.AccessKeyId
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) GetSecretAccessKey() string {
	if d == nil {
		return ""
	}
	return d.SecretAccessKey
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) GetRegion() string {
	if d == nil {
		return ""
	}
	return d.Region
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) GetService() string {
	if d == nil {
		return ""
	}
	return d.Service
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthAccessKeyId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthAccessKeyId(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthApiKey struct {
	Key    string                                `json:"key" url:"key"`
	ApiKey string                                `json:"api_key" url:"api_key"`
	To     DestinationTypeConfigHttpAuthApiKeyTo `json:"to" url:"to"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthApiKey) GetKey() string {
	if d == nil {
		return ""
	}
	return d.Key
}

func (d *DestinationTypeConfigHttpAuthApiKey) GetApiKey() string {
	if d == nil {
		return ""
	}
	return d.ApiKey
}

func (d *DestinationTypeConfigHttpAuthApiKey) GetTo() DestinationTypeConfigHttpAuthApiKeyTo {
	if d == nil {
		return ""
	}
	return d.To
}

func (d *DestinationTypeConfigHttpAuthApiKey) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthApiKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthApiKey) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthApiKeyTo string

const (
	DestinationTypeConfigHttpAuthApiKeyToHeader DestinationTypeConfigHttpAuthApiKeyTo = "header"
	DestinationTypeConfigHttpAuthApiKeyToQuery  DestinationTypeConfigHttpAuthApiKeyTo = "query"
)

func NewDestinationTypeConfigHttpAuthApiKeyToFromString(s string) (DestinationTypeConfigHttpAuthApiKeyTo, error) {
	switch s {
	case "header":
		return DestinationTypeConfigHttpAuthApiKeyToHeader, nil
	case "query":
		return DestinationTypeConfigHttpAuthApiKeyToQuery, nil
	}
	var t DestinationTypeConfigHttpAuthApiKeyTo
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigHttpAuthApiKeyTo) Ptr() *DestinationTypeConfigHttpAuthApiKeyTo {
	return &d
}

type DestinationTypeConfigHttpAuthAuthenticationType struct {
	AuthServer         string                                                            `json:"auth_server" url:"auth_server"`
	ClientId           string                                                            `json:"client_id" url:"client_id"`
	ClientSecret       string                                                            `json:"client_secret" url:"client_secret"`
	Scope              string                                                            `json:"scope" url:"scope"`
	AuthenticationType DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType `json:"authentication_type" url:"authentication_type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) GetAuthServer() string {
	if d == nil {
		return ""
	}
	return d.AuthServer
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) GetClientId() string {
	if d == nil {
		return ""
	}
	return d.ClientId
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) GetClientSecret() string {
	if d == nil {
		return ""
	}
	return d.ClientSecret
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) GetScope() string {
	if d == nil {
		return ""
	}
	return d.Scope
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) GetAuthenticationType() DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType {
	if d == nil {
		return ""
	}
	return d.AuthenticationType
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthAuthenticationType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthAuthenticationType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType string

const (
	DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeBasic              DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType = "basic"
	DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeBearer             DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType = "bearer"
	DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeXWwwFormUrlencoded DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType = "x-www-form-urlencoded"
)

func NewDestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeFromString(s string) (DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType, error) {
	switch s {
	case "basic":
		return DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeBasic, nil
	case "bearer":
		return DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeBearer, nil
	case "x-www-form-urlencoded":
		return DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeXWwwFormUrlencoded, nil
	}
	var t DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType) Ptr() *DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType {
	return &d
}

type DestinationTypeConfigHttpAuthPassword struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthPassword) GetUsername() *string {
	if d == nil {
		return nil
	}
	return d.Username
}

func (d *DestinationTypeConfigHttpAuthPassword) GetPassword() *string {
	if d == nil {
		return nil
	}
	return d.Password
}

func (d *DestinationTypeConfigHttpAuthPassword) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthPassword) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthPassword
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthPassword(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthPassword) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthRefreshToken struct {
	AuthServer   string `json:"auth_server" url:"auth_server"`
	ClientId     string `json:"client_id" url:"client_id"`
	ClientSecret string `json:"client_secret" url:"client_secret"`
	RefreshToken string `json:"refresh_token" url:"refresh_token"`
	Scope        string `json:"scope" url:"scope"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) GetAuthServer() string {
	if d == nil {
		return ""
	}
	return d.AuthServer
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) GetClientId() string {
	if d == nil {
		return ""
	}
	return d.ClientId
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) GetClientSecret() string {
	if d == nil {
		return ""
	}
	return d.ClientSecret
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) GetRefreshToken() string {
	if d == nil {
		return ""
	}
	return d.RefreshToken
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) GetScope() string {
	if d == nil {
		return ""
	}
	return d.Scope
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthRefreshToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthRefreshToken(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthSigningSecret struct {
	Key           string `json:"key" url:"key"`
	SigningSecret string `json:"signing_secret" url:"signing_secret"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthSigningSecret) GetKey() string {
	if d == nil {
		return ""
	}
	return d.Key
}

func (d *DestinationTypeConfigHttpAuthSigningSecret) GetSigningSecret() string {
	if d == nil {
		return ""
	}
	return d.SigningSecret
}

func (d *DestinationTypeConfigHttpAuthSigningSecret) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthSigningSecret) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthSigningSecret
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthSigningSecret(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthSigningSecret) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthToken struct {
	Token string `json:"token" url:"token"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthToken) GetToken() string {
	if d == nil {
		return ""
	}
	return d.Token
}

func (d *DestinationTypeConfigHttpAuthToken) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthToken) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthToken(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthToken) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthType string

const (
	DestinationTypeConfigHttpAuthTypeHookdeckSignature       DestinationTypeConfigHttpAuthType = "HOOKDECK_SIGNATURE"
	DestinationTypeConfigHttpAuthTypeCustomSignature         DestinationTypeConfigHttpAuthType = "CUSTOM_SIGNATURE"
	DestinationTypeConfigHttpAuthTypeBasicAuth               DestinationTypeConfigHttpAuthType = "BASIC_AUTH"
	DestinationTypeConfigHttpAuthTypeApiKey                  DestinationTypeConfigHttpAuthType = "API_KEY"
	DestinationTypeConfigHttpAuthTypeBearerToken             DestinationTypeConfigHttpAuthType = "BEARER_TOKEN"
	DestinationTypeConfigHttpAuthTypeOauth2ClientCredentials DestinationTypeConfigHttpAuthType = "OAUTH2_CLIENT_CREDENTIALS"
	DestinationTypeConfigHttpAuthTypeOauth2AuthorizationCode DestinationTypeConfigHttpAuthType = "OAUTH2_AUTHORIZATION_CODE"
	DestinationTypeConfigHttpAuthTypeAwsSignature            DestinationTypeConfigHttpAuthType = "AWS_SIGNATURE"
)

func NewDestinationTypeConfigHttpAuthTypeFromString(s string) (DestinationTypeConfigHttpAuthType, error) {
	switch s {
	case "HOOKDECK_SIGNATURE":
		return DestinationTypeConfigHttpAuthTypeHookdeckSignature, nil
	case "CUSTOM_SIGNATURE":
		return DestinationTypeConfigHttpAuthTypeCustomSignature, nil
	case "BASIC_AUTH":
		return DestinationTypeConfigHttpAuthTypeBasicAuth, nil
	case "API_KEY":
		return DestinationTypeConfigHttpAuthTypeApiKey, nil
	case "BEARER_TOKEN":
		return DestinationTypeConfigHttpAuthTypeBearerToken, nil
	case "OAUTH2_CLIENT_CREDENTIALS":
		return DestinationTypeConfigHttpAuthTypeOauth2ClientCredentials, nil
	case "OAUTH2_AUTHORIZATION_CODE":
		return DestinationTypeConfigHttpAuthTypeOauth2AuthorizationCode, nil
	case "AWS_SIGNATURE":
		return DestinationTypeConfigHttpAuthTypeAwsSignature, nil
	}
	var t DestinationTypeConfigHttpAuthType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigHttpAuthType) Ptr() *DestinationTypeConfigHttpAuthType {
	return &d
}

type DestinationTypeConfigHttpAuthZero struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthZero) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthZero) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthZero
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthZero(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthZero) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpConfigs struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpConfigs) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpConfigs) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpHttpMethod string

const (
	DestinationTypeConfigHttpHttpMethodGet    DestinationTypeConfigHttpHttpMethod = "GET"
	DestinationTypeConfigHttpHttpMethodPost   DestinationTypeConfigHttpHttpMethod = "POST"
	DestinationTypeConfigHttpHttpMethodPut    DestinationTypeConfigHttpHttpMethod = "PUT"
	DestinationTypeConfigHttpHttpMethodPatch  DestinationTypeConfigHttpHttpMethod = "PATCH"
	DestinationTypeConfigHttpHttpMethodDelete DestinationTypeConfigHttpHttpMethod = "DELETE"
)

func NewDestinationTypeConfigHttpHttpMethodFromString(s string) (DestinationTypeConfigHttpHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigHttpHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigHttpHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigHttpHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigHttpHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigHttpHttpMethodDelete, nil
	}
	var t DestinationTypeConfigHttpHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigHttpHttpMethod) Ptr() *DestinationTypeConfigHttpHttpMethod {
	return &d
}

type DestinationTypeConfigHttpRateLimitPeriod string

const (
	DestinationTypeConfigHttpRateLimitPeriodSecond     DestinationTypeConfigHttpRateLimitPeriod = "second"
	DestinationTypeConfigHttpRateLimitPeriodMinute     DestinationTypeConfigHttpRateLimitPeriod = "minute"
	DestinationTypeConfigHttpRateLimitPeriodHour       DestinationTypeConfigHttpRateLimitPeriod = "hour"
	DestinationTypeConfigHttpRateLimitPeriodConcurrent DestinationTypeConfigHttpRateLimitPeriod = "concurrent"
)

func NewDestinationTypeConfigHttpRateLimitPeriodFromString(s string) (DestinationTypeConfigHttpRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationTypeConfigHttpRateLimitPeriodSecond, nil
	case "minute":
		return DestinationTypeConfigHttpRateLimitPeriodMinute, nil
	case "hour":
		return DestinationTypeConfigHttpRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationTypeConfigHttpRateLimitPeriodConcurrent, nil
	}
	var t DestinationTypeConfigHttpRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigHttpRateLimitPeriod) Ptr() *DestinationTypeConfigHttpRateLimitPeriod {
	return &d
}

// The type config for Mock API. Requires type to be `MOCK_API`.
type DestinationTypeConfigMockApi struct {
	RateLimit              *float64                                     `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod        *DestinationTypeConfigMockApiRateLimitPeriod `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	PathForwardingDisabled *bool                                        `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigMockApiHttpMethod      `json:"http_method,omitempty" url:"http_method,omitempty"`
	Auth                   *SourceConfigMockApiAuth                     `json:"auth,omitempty" url:"auth,omitempty"`
	Configs                *DestinationTypeConfigMockApiConfigs         `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigMockApi) GetRateLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *DestinationTypeConfigMockApi) GetRateLimitPeriod() *DestinationTypeConfigMockApiRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *DestinationTypeConfigMockApi) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigMockApi) GetHttpMethod() *DestinationTypeConfigMockApiHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigMockApi) GetAuth() *SourceConfigMockApiAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigMockApi) GetConfigs() *DestinationTypeConfigMockApiConfigs {
	if d == nil {
		return nil
	}
	return d.Configs
}

func (d *DestinationTypeConfigMockApi) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigMockApi) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigMockApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigMockApi(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigMockApi) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigMockApiConfigs struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigMockApiConfigs) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigMockApiConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigMockApiConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigMockApiConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigMockApiConfigs) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigMockApiHttpMethod string

const (
	DestinationTypeConfigMockApiHttpMethodGet    DestinationTypeConfigMockApiHttpMethod = "GET"
	DestinationTypeConfigMockApiHttpMethodPost   DestinationTypeConfigMockApiHttpMethod = "POST"
	DestinationTypeConfigMockApiHttpMethodPut    DestinationTypeConfigMockApiHttpMethod = "PUT"
	DestinationTypeConfigMockApiHttpMethodPatch  DestinationTypeConfigMockApiHttpMethod = "PATCH"
	DestinationTypeConfigMockApiHttpMethodDelete DestinationTypeConfigMockApiHttpMethod = "DELETE"
)

func NewDestinationTypeConfigMockApiHttpMethodFromString(s string) (DestinationTypeConfigMockApiHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigMockApiHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigMockApiHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigMockApiHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigMockApiHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigMockApiHttpMethodDelete, nil
	}
	var t DestinationTypeConfigMockApiHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigMockApiHttpMethod) Ptr() *DestinationTypeConfigMockApiHttpMethod {
	return &d
}

type DestinationTypeConfigMockApiRateLimitPeriod string

const (
	DestinationTypeConfigMockApiRateLimitPeriodSecond     DestinationTypeConfigMockApiRateLimitPeriod = "second"
	DestinationTypeConfigMockApiRateLimitPeriodMinute     DestinationTypeConfigMockApiRateLimitPeriod = "minute"
	DestinationTypeConfigMockApiRateLimitPeriodHour       DestinationTypeConfigMockApiRateLimitPeriod = "hour"
	DestinationTypeConfigMockApiRateLimitPeriodConcurrent DestinationTypeConfigMockApiRateLimitPeriod = "concurrent"
)

func NewDestinationTypeConfigMockApiRateLimitPeriodFromString(s string) (DestinationTypeConfigMockApiRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationTypeConfigMockApiRateLimitPeriodSecond, nil
	case "minute":
		return DestinationTypeConfigMockApiRateLimitPeriodMinute, nil
	case "hour":
		return DestinationTypeConfigMockApiRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationTypeConfigMockApiRateLimitPeriodConcurrent, nil
	}
	var t DestinationTypeConfigMockApiRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigMockApiRateLimitPeriod) Ptr() *DestinationTypeConfigMockApiRateLimitPeriod {
	return &d
}

type DetachedIntegrationFromSource struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DetachedIntegrationFromSource) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DetachedIntegrationFromSource) UnmarshalJSON(data []byte) error {
	type unmarshaler DetachedIntegrationFromSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DetachedIntegrationFromSource(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DetachedIntegrationFromSource) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type Event struct {
	// ID of the event
	Id string `json:"id" url:"id"`
	// ID of the project
	TeamId string `json:"team_id" url:"team_id"`
	// ID of the associated connection
	WebhookId string `json:"webhook_id" url:"webhook_id"`
	// ID of the associated source
	SourceId string `json:"source_id" url:"source_id"`
	// ID of the associated destination
	DestinationId string `json:"destination_id" url:"destination_id"`
	// ID of the event data
	EventDataId string `json:"event_data_id" url:"event_data_id"`
	// ID of the request that created the event
	RequestId string `json:"request_id" url:"request_id"`
	// Number of delivery attempts made
	Attempts int `json:"attempts" url:"attempts"`
	// Date of the most recently attempted retry
	LastAttemptAt *time.Time `json:"last_attempt_at,omitempty" url:"last_attempt_at,omitempty"`
	// Date of the next scheduled retry
	NextAttemptAt *time.Time `json:"next_attempt_at,omitempty" url:"next_attempt_at,omitempty"`
	// Event status
	ResponseStatus *int               `json:"response_status,omitempty" url:"response_status,omitempty"`
	ErrorCode      *AttemptErrorCodes `json:"error_code,omitempty" url:"error_code,omitempty"`
	Status         EventStatus        `json:"status" url:"status"`
	// Date of the latest successful attempt
	SuccessfulAt *time.Time `json:"successful_at,omitempty" url:"successful_at,omitempty"`
	// ID of the CLI the event is sent to
	CliId *string `json:"cli_id,omitempty" url:"cli_id,omitempty"`
	// Date the event was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the event was created
	CreatedAt time.Time       `json:"created_at" url:"created_at"`
	Data      *ShortEventData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Event) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *Event) GetTeamId() string {
	if e == nil {
		return ""
	}
	return e.TeamId
}

func (e *Event) GetWebhookId() string {
	if e == nil {
		return ""
	}
	return e.WebhookId
}

func (e *Event) GetSourceId() string {
	if e == nil {
		return ""
	}
	return e.SourceId
}

func (e *Event) GetDestinationId() string {
	if e == nil {
		return ""
	}
	return e.DestinationId
}

func (e *Event) GetEventDataId() string {
	if e == nil {
		return ""
	}
	return e.EventDataId
}

func (e *Event) GetRequestId() string {
	if e == nil {
		return ""
	}
	return e.RequestId
}

func (e *Event) GetAttempts() int {
	if e == nil {
		return 0
	}
	return e.Attempts
}

func (e *Event) GetLastAttemptAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.LastAttemptAt
}

func (e *Event) GetNextAttemptAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.NextAttemptAt
}

func (e *Event) GetResponseStatus() *int {
	if e == nil {
		return nil
	}
	return e.ResponseStatus
}

func (e *Event) GetErrorCode() *AttemptErrorCodes {
	if e == nil {
		return nil
	}
	return e.ErrorCode
}

func (e *Event) GetStatus() EventStatus {
	if e == nil {
		return ""
	}
	return e.Status
}

func (e *Event) GetSuccessfulAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.SuccessfulAt
}

func (e *Event) GetCliId() *string {
	if e == nil {
		return nil
	}
	return e.CliId
}

func (e *Event) GetUpdatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.UpdatedAt
}

func (e *Event) GetCreatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.CreatedAt
}

func (e *Event) GetData() *ShortEventData {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *Event) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Event) UnmarshalJSON(data []byte) error {
	type embed Event
	var unmarshaler = struct {
		embed
		LastAttemptAt *internal.DateTime `json:"last_attempt_at,omitempty"`
		NextAttemptAt *internal.DateTime `json:"next_attempt_at,omitempty"`
		SuccessfulAt  *internal.DateTime `json:"successful_at,omitempty"`
		UpdatedAt     *internal.DateTime `json:"updated_at"`
		CreatedAt     *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = Event(unmarshaler.embed)
	e.LastAttemptAt = unmarshaler.LastAttemptAt.TimePtr()
	e.NextAttemptAt = unmarshaler.NextAttemptAt.TimePtr()
	e.SuccessfulAt = unmarshaler.SuccessfulAt.TimePtr()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Event) MarshalJSON() ([]byte, error) {
	type embed Event
	var marshaler = struct {
		embed
		LastAttemptAt *internal.DateTime `json:"last_attempt_at,omitempty"`
		NextAttemptAt *internal.DateTime `json:"next_attempt_at,omitempty"`
		SuccessfulAt  *internal.DateTime `json:"successful_at,omitempty"`
		UpdatedAt     *internal.DateTime `json:"updated_at"`
		CreatedAt     *internal.DateTime `json:"created_at"`
	}{
		embed:         embed(*e),
		LastAttemptAt: internal.NewOptionalDateTime(e.LastAttemptAt),
		NextAttemptAt: internal.NewOptionalDateTime(e.NextAttemptAt),
		SuccessfulAt:  internal.NewOptionalDateTime(e.SuccessfulAt),
		UpdatedAt:     internal.NewDateTime(e.UpdatedAt),
		CreatedAt:     internal.NewDateTime(e.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *Event) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventAttempt struct {
	// Attempt ID
	Id string `json:"id" url:"id"`
	// ID of the project
	TeamId string `json:"team_id" url:"team_id"`
	// Event ID
	EventId string `json:"event_id" url:"event_id"`
	// Destination ID
	DestinationId string `json:"destination_id" url:"destination_id"`
	// Attempt's HTTP response code
	ResponseStatus *int `json:"response_status,omitempty" url:"response_status,omitempty"`
	// Sequential number of attempts (up to and including this one) made for the associated event
	AttemptNumber *int               `json:"attempt_number,omitempty" url:"attempt_number,omitempty"`
	Trigger       *AttemptTrigger    `json:"trigger,omitempty" url:"trigger,omitempty"`
	ErrorCode     *AttemptErrorCodes `json:"error_code,omitempty" url:"error_code,omitempty"`
	Body          *EventAttemptBody  `json:"body,omitempty" url:"body,omitempty"`
	// URL of the destination where delivery was attempted
	RequestedUrl *string `json:"requested_url,omitempty" url:"requested_url,omitempty"`
	// HTTP method used to deliver the attempt
	HttpMethod *EventAttemptHttpMethod `json:"http_method,omitempty" url:"http_method,omitempty"`
	// ID of associated bulk retry
	BulkRetryId *string       `json:"bulk_retry_id,omitempty" url:"bulk_retry_id,omitempty"`
	Status      AttemptStatus `json:"status" url:"status"`
	// Date the attempt was successful
	SuccessfulAt *time.Time `json:"successful_at,omitempty" url:"successful_at,omitempty"`
	// Date the attempt was delivered
	DeliveredAt *time.Time `json:"delivered_at,omitempty" url:"delivered_at,omitempty"`
	// Date the destination responded to this attempt
	RespondedAt *time.Time `json:"responded_at,omitempty" url:"responded_at,omitempty"`
	// Time elapsed between attempt initiation and final delivery (in ms)
	DeliveryLatency *int `json:"delivery_latency,omitempty" url:"delivery_latency,omitempty"`
	// Time elapsed between attempt initiation and a response from the destination (in ms)
	ResponseLatency *int `json:"response_latency,omitempty" url:"response_latency,omitempty"`
	// Date the attempt was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the attempt was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventAttempt) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EventAttempt) GetTeamId() string {
	if e == nil {
		return ""
	}
	return e.TeamId
}

func (e *EventAttempt) GetEventId() string {
	if e == nil {
		return ""
	}
	return e.EventId
}

func (e *EventAttempt) GetDestinationId() string {
	if e == nil {
		return ""
	}
	return e.DestinationId
}

func (e *EventAttempt) GetResponseStatus() *int {
	if e == nil {
		return nil
	}
	return e.ResponseStatus
}

func (e *EventAttempt) GetAttemptNumber() *int {
	if e == nil {
		return nil
	}
	return e.AttemptNumber
}

func (e *EventAttempt) GetTrigger() *AttemptTrigger {
	if e == nil {
		return nil
	}
	return e.Trigger
}

func (e *EventAttempt) GetErrorCode() *AttemptErrorCodes {
	if e == nil {
		return nil
	}
	return e.ErrorCode
}

func (e *EventAttempt) GetBody() *EventAttemptBody {
	if e == nil {
		return nil
	}
	return e.Body
}

func (e *EventAttempt) GetRequestedUrl() *string {
	if e == nil {
		return nil
	}
	return e.RequestedUrl
}

func (e *EventAttempt) GetHttpMethod() *EventAttemptHttpMethod {
	if e == nil {
		return nil
	}
	return e.HttpMethod
}

func (e *EventAttempt) GetBulkRetryId() *string {
	if e == nil {
		return nil
	}
	return e.BulkRetryId
}

func (e *EventAttempt) GetStatus() AttemptStatus {
	if e == nil {
		return ""
	}
	return e.Status
}

func (e *EventAttempt) GetSuccessfulAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.SuccessfulAt
}

func (e *EventAttempt) GetDeliveredAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.DeliveredAt
}

func (e *EventAttempt) GetRespondedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.RespondedAt
}

func (e *EventAttempt) GetDeliveryLatency() *int {
	if e == nil {
		return nil
	}
	return e.DeliveryLatency
}

func (e *EventAttempt) GetResponseLatency() *int {
	if e == nil {
		return nil
	}
	return e.ResponseLatency
}

func (e *EventAttempt) GetUpdatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.UpdatedAt
}

func (e *EventAttempt) GetCreatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.CreatedAt
}

func (e *EventAttempt) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventAttempt) UnmarshalJSON(data []byte) error {
	type embed EventAttempt
	var unmarshaler = struct {
		embed
		SuccessfulAt *internal.DateTime `json:"successful_at,omitempty"`
		DeliveredAt  *internal.DateTime `json:"delivered_at,omitempty"`
		RespondedAt  *internal.DateTime `json:"responded_at,omitempty"`
		UpdatedAt    *internal.DateTime `json:"updated_at"`
		CreatedAt    *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EventAttempt(unmarshaler.embed)
	e.SuccessfulAt = unmarshaler.SuccessfulAt.TimePtr()
	e.DeliveredAt = unmarshaler.DeliveredAt.TimePtr()
	e.RespondedAt = unmarshaler.RespondedAt.TimePtr()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventAttempt) MarshalJSON() ([]byte, error) {
	type embed EventAttempt
	var marshaler = struct {
		embed
		SuccessfulAt *internal.DateTime `json:"successful_at,omitempty"`
		DeliveredAt  *internal.DateTime `json:"delivered_at,omitempty"`
		RespondedAt  *internal.DateTime `json:"responded_at,omitempty"`
		UpdatedAt    *internal.DateTime `json:"updated_at"`
		CreatedAt    *internal.DateTime `json:"created_at"`
	}{
		embed:        embed(*e),
		SuccessfulAt: internal.NewOptionalDateTime(e.SuccessfulAt),
		DeliveredAt:  internal.NewOptionalDateTime(e.DeliveredAt),
		RespondedAt:  internal.NewOptionalDateTime(e.RespondedAt),
		UpdatedAt:    internal.NewDateTime(e.UpdatedAt),
		CreatedAt:    internal.NewDateTime(e.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EventAttempt) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventAttemptBody struct {
	// Response body from the destination
	EventAttemptBodyZeroOptional *EventAttemptBodyZero
	// Response body from the destination
	StringOptional *string

	typ string
}

func NewEventAttemptBodyFromEventAttemptBodyZeroOptional(value *EventAttemptBodyZero) *EventAttemptBody {
	return &EventAttemptBody{typ: "EventAttemptBodyZeroOptional", EventAttemptBodyZeroOptional: value}
}

func NewEventAttemptBodyFromStringOptional(value *string) *EventAttemptBody {
	return &EventAttemptBody{typ: "StringOptional", StringOptional: value}
}

func (e *EventAttemptBody) GetEventAttemptBodyZeroOptional() *EventAttemptBodyZero {
	if e == nil {
		return nil
	}
	return e.EventAttemptBodyZeroOptional
}

func (e *EventAttemptBody) GetStringOptional() *string {
	if e == nil {
		return nil
	}
	return e.StringOptional
}

func (e *EventAttemptBody) UnmarshalJSON(data []byte) error {
	var valueEventAttemptBodyZeroOptional *EventAttemptBodyZero
	if err := json.Unmarshal(data, &valueEventAttemptBodyZeroOptional); err == nil {
		e.typ = "EventAttemptBodyZeroOptional"
		e.EventAttemptBodyZeroOptional = valueEventAttemptBodyZeroOptional
		return nil
	}
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		e.typ = "StringOptional"
		e.StringOptional = valueStringOptional
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventAttemptBody) MarshalJSON() ([]byte, error) {
	if e.typ == "EventAttemptBodyZeroOptional" || e.EventAttemptBodyZeroOptional != nil {
		return json.Marshal(e.EventAttemptBodyZeroOptional)
	}
	if e.typ == "StringOptional" || e.StringOptional != nil {
		return json.Marshal(e.StringOptional)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventAttemptBodyVisitor interface {
	VisitEventAttemptBodyZeroOptional(*EventAttemptBodyZero) error
	VisitStringOptional(*string) error
}

func (e *EventAttemptBody) Accept(visitor EventAttemptBodyVisitor) error {
	if e.typ == "EventAttemptBodyZeroOptional" || e.EventAttemptBodyZeroOptional != nil {
		return visitor.VisitEventAttemptBodyZeroOptional(e.EventAttemptBodyZeroOptional)
	}
	if e.typ == "StringOptional" || e.StringOptional != nil {
		return visitor.VisitStringOptional(e.StringOptional)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// Response body from the destination
type EventAttemptBodyZero struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventAttemptBodyZero) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventAttemptBodyZero) UnmarshalJSON(data []byte) error {
	type unmarshaler EventAttemptBodyZero
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventAttemptBodyZero(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventAttemptBodyZero) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// HTTP method used to deliver the attempt
type EventAttemptHttpMethod string

const (
	EventAttemptHttpMethodGet    EventAttemptHttpMethod = "GET"
	EventAttemptHttpMethodPost   EventAttemptHttpMethod = "POST"
	EventAttemptHttpMethodPut    EventAttemptHttpMethod = "PUT"
	EventAttemptHttpMethodPatch  EventAttemptHttpMethod = "PATCH"
	EventAttemptHttpMethodDelete EventAttemptHttpMethod = "DELETE"
)

func NewEventAttemptHttpMethodFromString(s string) (EventAttemptHttpMethod, error) {
	switch s {
	case "GET":
		return EventAttemptHttpMethodGet, nil
	case "POST":
		return EventAttemptHttpMethodPost, nil
	case "PUT":
		return EventAttemptHttpMethodPut, nil
	case "PATCH":
		return EventAttemptHttpMethodPatch, nil
	case "DELETE":
		return EventAttemptHttpMethodDelete, nil
	}
	var t EventAttemptHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventAttemptHttpMethod) Ptr() *EventAttemptHttpMethod {
	return &e
}

type EventPaginatedResult struct {
	Pagination *SeekPagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Count      *int            `json:"count,omitempty" url:"count,omitempty"`
	Models     []*Event        `json:"models,omitempty" url:"models,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventPaginatedResult) GetPagination() *SeekPagination {
	if e == nil {
		return nil
	}
	return e.Pagination
}

func (e *EventPaginatedResult) GetCount() *int {
	if e == nil {
		return nil
	}
	return e.Count
}

func (e *EventPaginatedResult) GetModels() []*Event {
	if e == nil {
		return nil
	}
	return e.Models
}

func (e *EventPaginatedResult) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventPaginatedResult) UnmarshalJSON(data []byte) error {
	type unmarshaler EventPaginatedResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventPaginatedResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventPaginatedResult) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventStatus string

const (
	EventStatusScheduled  EventStatus = "SCHEDULED"
	EventStatusQueued     EventStatus = "QUEUED"
	EventStatusHold       EventStatus = "HOLD"
	EventStatusSuccessful EventStatus = "SUCCESSFUL"
	EventStatusFailed     EventStatus = "FAILED"
)

func NewEventStatusFromString(s string) (EventStatus, error) {
	switch s {
	case "SCHEDULED":
		return EventStatusScheduled, nil
	case "QUEUED":
		return EventStatusQueued, nil
	case "HOLD":
		return EventStatusHold, nil
	case "SUCCESSFUL":
		return EventStatusSuccessful, nil
	case "FAILED":
		return EventStatusFailed, nil
	}
	var t EventStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventStatus) Ptr() *EventStatus {
	return &e
}

type HandledApiKeyIntegrationConfigs struct {
	ApiKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HandledApiKeyIntegrationConfigs) GetApiKey() string {
	if h == nil {
		return ""
	}
	return h.ApiKey
}

func (h *HandledApiKeyIntegrationConfigs) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HandledApiKeyIntegrationConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler HandledApiKeyIntegrationConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HandledApiKeyIntegrationConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HandledApiKeyIntegrationConfigs) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HandledHmacConfigs struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HandledHmacConfigs) GetWebhookSecretKey() string {
	if h == nil {
		return ""
	}
	return h.WebhookSecretKey
}

func (h *HandledHmacConfigs) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HandledHmacConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler HandledHmacConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HandledHmacConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HandledHmacConfigs) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HmacAlgorithms string

const (
	HmacAlgorithmsMd5    HmacAlgorithms = "md5"
	HmacAlgorithmsSha1   HmacAlgorithms = "sha1"
	HmacAlgorithmsSha256 HmacAlgorithms = "sha256"
	HmacAlgorithmsSha512 HmacAlgorithms = "sha512"
)

func NewHmacAlgorithmsFromString(s string) (HmacAlgorithms, error) {
	switch s {
	case "md5":
		return HmacAlgorithmsMd5, nil
	case "sha1":
		return HmacAlgorithmsSha1, nil
	case "sha256":
		return HmacAlgorithmsSha256, nil
	case "sha512":
		return HmacAlgorithmsSha512, nil
	}
	var t HmacAlgorithms
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (h HmacAlgorithms) Ptr() *HmacAlgorithms {
	return &h
}

type HmacIntegrationConfigs struct {
	WebhookSecretKey string                         `json:"webhook_secret_key" url:"webhook_secret_key"`
	Algorithm        HmacAlgorithms                 `json:"algorithm" url:"algorithm"`
	HeaderKey        string                         `json:"header_key" url:"header_key"`
	Encoding         HmacIntegrationConfigsEncoding `json:"encoding" url:"encoding"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HmacIntegrationConfigs) GetWebhookSecretKey() string {
	if h == nil {
		return ""
	}
	return h.WebhookSecretKey
}

func (h *HmacIntegrationConfigs) GetAlgorithm() HmacAlgorithms {
	if h == nil {
		return ""
	}
	return h.Algorithm
}

func (h *HmacIntegrationConfigs) GetHeaderKey() string {
	if h == nil {
		return ""
	}
	return h.HeaderKey
}

func (h *HmacIntegrationConfigs) GetEncoding() HmacIntegrationConfigsEncoding {
	if h == nil {
		return ""
	}
	return h.Encoding
}

func (h *HmacIntegrationConfigs) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HmacIntegrationConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler HmacIntegrationConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HmacIntegrationConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HmacIntegrationConfigs) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HmacIntegrationConfigsEncoding string

const (
	HmacIntegrationConfigsEncodingBase64 HmacIntegrationConfigsEncoding = "base64"
	HmacIntegrationConfigsEncodingHex    HmacIntegrationConfigsEncoding = "hex"
)

func NewHmacIntegrationConfigsEncodingFromString(s string) (HmacIntegrationConfigsEncoding, error) {
	switch s {
	case "base64":
		return HmacIntegrationConfigsEncodingBase64, nil
	case "hex":
		return HmacIntegrationConfigsEncodingHex, nil
	}
	var t HmacIntegrationConfigsEncoding
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (h HmacIntegrationConfigsEncoding) Ptr() *HmacIntegrationConfigsEncoding {
	return &h
}

type Integration struct {
	// ID of the integration
	Id string `json:"id" url:"id"`
	// ID of the project
	TeamId string `json:"team_id" url:"team_id"`
	// Label of the integration
	Label    string              `json:"label" url:"label"`
	Provider IntegrationProvider `json:"provider" url:"provider"`
	// List of features to enable (see features list below)
	Features []IntegrationFeature `json:"features,omitempty" url:"features,omitempty"`
	// Decrypted Key/Value object of the associated configuration for that provider
	Configs *IntegrationConfigs `json:"configs,omitempty" url:"configs,omitempty"`
	// List of source IDs the integration is attached to
	Sources []string `json:"sources,omitempty" url:"sources,omitempty"`
	// Date the integration was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the integration was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *Integration) GetId() string {
	if i == nil {
		return ""
	}
	return i.Id
}

func (i *Integration) GetTeamId() string {
	if i == nil {
		return ""
	}
	return i.TeamId
}

func (i *Integration) GetLabel() string {
	if i == nil {
		return ""
	}
	return i.Label
}

func (i *Integration) GetProvider() IntegrationProvider {
	if i == nil {
		return ""
	}
	return i.Provider
}

func (i *Integration) GetFeatures() []IntegrationFeature {
	if i == nil {
		return nil
	}
	return i.Features
}

func (i *Integration) GetConfigs() *IntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.Configs
}

func (i *Integration) GetSources() []string {
	if i == nil {
		return nil
	}
	return i.Sources
}

func (i *Integration) GetUpdatedAt() time.Time {
	if i == nil {
		return time.Time{}
	}
	return i.UpdatedAt
}

func (i *Integration) GetCreatedAt() time.Time {
	if i == nil {
		return time.Time{}
	}
	return i.CreatedAt
}

func (i *Integration) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Integration) UnmarshalJSON(data []byte) error {
	type embed Integration
	var unmarshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = Integration(unmarshaler.embed)
	i.UpdatedAt = unmarshaler.UpdatedAt.Time()
	i.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *Integration) MarshalJSON() ([]byte, error) {
	type embed Integration
	var marshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed:     embed(*i),
		UpdatedAt: internal.NewDateTime(i.UpdatedAt),
		CreatedAt: internal.NewDateTime(i.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (i *Integration) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Decrypted Key/Value object of the associated configuration for that provider
type IntegrationConfigs struct {
	HmacIntegrationConfigs            *HmacIntegrationConfigs
	ApiKeyIntegrationConfigs          *ApiKeyIntegrationConfigs
	HandledApiKeyIntegrationConfigs   *HandledApiKeyIntegrationConfigs
	HandledHmacConfigs                *HandledHmacConfigs
	BasicAuthIntegrationConfigs       *BasicAuthIntegrationConfigs
	ShopifyIntegrationConfigs         *ShopifyIntegrationConfigs
	VercelLogDrainsIntegrationConfigs *VercelLogDrainsIntegrationConfigs
	IntegrationConfigsSeven           *IntegrationConfigsSeven

	typ string
}

func NewIntegrationConfigsFromHmacIntegrationConfigs(value *HmacIntegrationConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "HmacIntegrationConfigs", HmacIntegrationConfigs: value}
}

func NewIntegrationConfigsFromApiKeyIntegrationConfigs(value *ApiKeyIntegrationConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "ApiKeyIntegrationConfigs", ApiKeyIntegrationConfigs: value}
}

func NewIntegrationConfigsFromHandledApiKeyIntegrationConfigs(value *HandledApiKeyIntegrationConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "HandledApiKeyIntegrationConfigs", HandledApiKeyIntegrationConfigs: value}
}

func NewIntegrationConfigsFromHandledHmacConfigs(value *HandledHmacConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "HandledHmacConfigs", HandledHmacConfigs: value}
}

func NewIntegrationConfigsFromBasicAuthIntegrationConfigs(value *BasicAuthIntegrationConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "BasicAuthIntegrationConfigs", BasicAuthIntegrationConfigs: value}
}

func NewIntegrationConfigsFromShopifyIntegrationConfigs(value *ShopifyIntegrationConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "ShopifyIntegrationConfigs", ShopifyIntegrationConfigs: value}
}

func NewIntegrationConfigsFromVercelLogDrainsIntegrationConfigs(value *VercelLogDrainsIntegrationConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "VercelLogDrainsIntegrationConfigs", VercelLogDrainsIntegrationConfigs: value}
}

func NewIntegrationConfigsFromIntegrationConfigsSeven(value *IntegrationConfigsSeven) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "IntegrationConfigsSeven", IntegrationConfigsSeven: value}
}

func (i *IntegrationConfigs) GetHmacIntegrationConfigs() *HmacIntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.HmacIntegrationConfigs
}

func (i *IntegrationConfigs) GetApiKeyIntegrationConfigs() *ApiKeyIntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.ApiKeyIntegrationConfigs
}

func (i *IntegrationConfigs) GetHandledApiKeyIntegrationConfigs() *HandledApiKeyIntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.HandledApiKeyIntegrationConfigs
}

func (i *IntegrationConfigs) GetHandledHmacConfigs() *HandledHmacConfigs {
	if i == nil {
		return nil
	}
	return i.HandledHmacConfigs
}

func (i *IntegrationConfigs) GetBasicAuthIntegrationConfigs() *BasicAuthIntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.BasicAuthIntegrationConfigs
}

func (i *IntegrationConfigs) GetShopifyIntegrationConfigs() *ShopifyIntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.ShopifyIntegrationConfigs
}

func (i *IntegrationConfigs) GetVercelLogDrainsIntegrationConfigs() *VercelLogDrainsIntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.VercelLogDrainsIntegrationConfigs
}

func (i *IntegrationConfigs) GetIntegrationConfigsSeven() *IntegrationConfigsSeven {
	if i == nil {
		return nil
	}
	return i.IntegrationConfigsSeven
}

func (i *IntegrationConfigs) UnmarshalJSON(data []byte) error {
	valueHmacIntegrationConfigs := new(HmacIntegrationConfigs)
	if err := json.Unmarshal(data, &valueHmacIntegrationConfigs); err == nil {
		i.typ = "HmacIntegrationConfigs"
		i.HmacIntegrationConfigs = valueHmacIntegrationConfigs
		return nil
	}
	valueApiKeyIntegrationConfigs := new(ApiKeyIntegrationConfigs)
	if err := json.Unmarshal(data, &valueApiKeyIntegrationConfigs); err == nil {
		i.typ = "ApiKeyIntegrationConfigs"
		i.ApiKeyIntegrationConfigs = valueApiKeyIntegrationConfigs
		return nil
	}
	valueHandledApiKeyIntegrationConfigs := new(HandledApiKeyIntegrationConfigs)
	if err := json.Unmarshal(data, &valueHandledApiKeyIntegrationConfigs); err == nil {
		i.typ = "HandledApiKeyIntegrationConfigs"
		i.HandledApiKeyIntegrationConfigs = valueHandledApiKeyIntegrationConfigs
		return nil
	}
	valueHandledHmacConfigs := new(HandledHmacConfigs)
	if err := json.Unmarshal(data, &valueHandledHmacConfigs); err == nil {
		i.typ = "HandledHmacConfigs"
		i.HandledHmacConfigs = valueHandledHmacConfigs
		return nil
	}
	valueBasicAuthIntegrationConfigs := new(BasicAuthIntegrationConfigs)
	if err := json.Unmarshal(data, &valueBasicAuthIntegrationConfigs); err == nil {
		i.typ = "BasicAuthIntegrationConfigs"
		i.BasicAuthIntegrationConfigs = valueBasicAuthIntegrationConfigs
		return nil
	}
	valueShopifyIntegrationConfigs := new(ShopifyIntegrationConfigs)
	if err := json.Unmarshal(data, &valueShopifyIntegrationConfigs); err == nil {
		i.typ = "ShopifyIntegrationConfigs"
		i.ShopifyIntegrationConfigs = valueShopifyIntegrationConfigs
		return nil
	}
	valueVercelLogDrainsIntegrationConfigs := new(VercelLogDrainsIntegrationConfigs)
	if err := json.Unmarshal(data, &valueVercelLogDrainsIntegrationConfigs); err == nil {
		i.typ = "VercelLogDrainsIntegrationConfigs"
		i.VercelLogDrainsIntegrationConfigs = valueVercelLogDrainsIntegrationConfigs
		return nil
	}
	valueIntegrationConfigsSeven := new(IntegrationConfigsSeven)
	if err := json.Unmarshal(data, &valueIntegrationConfigsSeven); err == nil {
		i.typ = "IntegrationConfigsSeven"
		i.IntegrationConfigsSeven = valueIntegrationConfigsSeven
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IntegrationConfigs) MarshalJSON() ([]byte, error) {
	if i.typ == "HmacIntegrationConfigs" || i.HmacIntegrationConfigs != nil {
		return json.Marshal(i.HmacIntegrationConfigs)
	}
	if i.typ == "ApiKeyIntegrationConfigs" || i.ApiKeyIntegrationConfigs != nil {
		return json.Marshal(i.ApiKeyIntegrationConfigs)
	}
	if i.typ == "HandledApiKeyIntegrationConfigs" || i.HandledApiKeyIntegrationConfigs != nil {
		return json.Marshal(i.HandledApiKeyIntegrationConfigs)
	}
	if i.typ == "HandledHmacConfigs" || i.HandledHmacConfigs != nil {
		return json.Marshal(i.HandledHmacConfigs)
	}
	if i.typ == "BasicAuthIntegrationConfigs" || i.BasicAuthIntegrationConfigs != nil {
		return json.Marshal(i.BasicAuthIntegrationConfigs)
	}
	if i.typ == "ShopifyIntegrationConfigs" || i.ShopifyIntegrationConfigs != nil {
		return json.Marshal(i.ShopifyIntegrationConfigs)
	}
	if i.typ == "VercelLogDrainsIntegrationConfigs" || i.VercelLogDrainsIntegrationConfigs != nil {
		return json.Marshal(i.VercelLogDrainsIntegrationConfigs)
	}
	if i.typ == "IntegrationConfigsSeven" || i.IntegrationConfigsSeven != nil {
		return json.Marshal(i.IntegrationConfigsSeven)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IntegrationConfigsVisitor interface {
	VisitHmacIntegrationConfigs(*HmacIntegrationConfigs) error
	VisitApiKeyIntegrationConfigs(*ApiKeyIntegrationConfigs) error
	VisitHandledApiKeyIntegrationConfigs(*HandledApiKeyIntegrationConfigs) error
	VisitHandledHmacConfigs(*HandledHmacConfigs) error
	VisitBasicAuthIntegrationConfigs(*BasicAuthIntegrationConfigs) error
	VisitShopifyIntegrationConfigs(*ShopifyIntegrationConfigs) error
	VisitVercelLogDrainsIntegrationConfigs(*VercelLogDrainsIntegrationConfigs) error
	VisitIntegrationConfigsSeven(*IntegrationConfigsSeven) error
}

func (i *IntegrationConfigs) Accept(visitor IntegrationConfigsVisitor) error {
	if i.typ == "HmacIntegrationConfigs" || i.HmacIntegrationConfigs != nil {
		return visitor.VisitHmacIntegrationConfigs(i.HmacIntegrationConfigs)
	}
	if i.typ == "ApiKeyIntegrationConfigs" || i.ApiKeyIntegrationConfigs != nil {
		return visitor.VisitApiKeyIntegrationConfigs(i.ApiKeyIntegrationConfigs)
	}
	if i.typ == "HandledApiKeyIntegrationConfigs" || i.HandledApiKeyIntegrationConfigs != nil {
		return visitor.VisitHandledApiKeyIntegrationConfigs(i.HandledApiKeyIntegrationConfigs)
	}
	if i.typ == "HandledHmacConfigs" || i.HandledHmacConfigs != nil {
		return visitor.VisitHandledHmacConfigs(i.HandledHmacConfigs)
	}
	if i.typ == "BasicAuthIntegrationConfigs" || i.BasicAuthIntegrationConfigs != nil {
		return visitor.VisitBasicAuthIntegrationConfigs(i.BasicAuthIntegrationConfigs)
	}
	if i.typ == "ShopifyIntegrationConfigs" || i.ShopifyIntegrationConfigs != nil {
		return visitor.VisitShopifyIntegrationConfigs(i.ShopifyIntegrationConfigs)
	}
	if i.typ == "VercelLogDrainsIntegrationConfigs" || i.VercelLogDrainsIntegrationConfigs != nil {
		return visitor.VisitVercelLogDrainsIntegrationConfigs(i.VercelLogDrainsIntegrationConfigs)
	}
	if i.typ == "IntegrationConfigsSeven" || i.IntegrationConfigsSeven != nil {
		return visitor.VisitIntegrationConfigsSeven(i.IntegrationConfigsSeven)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IntegrationConfigsSeven struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IntegrationConfigsSeven) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntegrationConfigsSeven) UnmarshalJSON(data []byte) error {
	type unmarshaler IntegrationConfigsSeven
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntegrationConfigsSeven(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntegrationConfigsSeven) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IntegrationFeature string

const (
	IntegrationFeatureVerification IntegrationFeature = "VERIFICATION"
	IntegrationFeatureHandshake    IntegrationFeature = "HANDSHAKE"
)

func NewIntegrationFeatureFromString(s string) (IntegrationFeature, error) {
	switch s {
	case "VERIFICATION":
		return IntegrationFeatureVerification, nil
	case "HANDSHAKE":
		return IntegrationFeatureHandshake, nil
	}
	var t IntegrationFeature
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IntegrationFeature) Ptr() *IntegrationFeature {
	return &i
}

type IntegrationPaginatedResult struct {
	Pagination *SeekPagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Count      *int            `json:"count,omitempty" url:"count,omitempty"`
	Models     []*Integration  `json:"models,omitempty" url:"models,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IntegrationPaginatedResult) GetPagination() *SeekPagination {
	if i == nil {
		return nil
	}
	return i.Pagination
}

func (i *IntegrationPaginatedResult) GetCount() *int {
	if i == nil {
		return nil
	}
	return i.Count
}

func (i *IntegrationPaginatedResult) GetModels() []*Integration {
	if i == nil {
		return nil
	}
	return i.Models
}

func (i *IntegrationPaginatedResult) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntegrationPaginatedResult) UnmarshalJSON(data []byte) error {
	type unmarshaler IntegrationPaginatedResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntegrationPaginatedResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntegrationPaginatedResult) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IntegrationProvider string

const (
	IntegrationProviderHmac            IntegrationProvider = "HMAC"
	IntegrationProviderBasicAuth       IntegrationProvider = "BASIC_AUTH"
	IntegrationProviderApiKey          IntegrationProvider = "API_KEY"
	IntegrationProviderWebhook         IntegrationProvider = "WEBHOOK"
	IntegrationProviderHttp            IntegrationProvider = "HTTP"
	IntegrationProviderManaged         IntegrationProvider = "MANAGED"
	IntegrationProviderSanity          IntegrationProvider = "SANITY"
	IntegrationProviderBridge          IntegrationProvider = "BRIDGE"
	IntegrationProviderCloudsignal     IntegrationProvider = "CLOUDSIGNAL"
	IntegrationProviderCourier         IntegrationProvider = "COURIER"
	IntegrationProviderFrontapp        IntegrationProvider = "FRONTAPP"
	IntegrationProviderZoom            IntegrationProvider = "ZOOM"
	IntegrationProviderTwitter         IntegrationProvider = "TWITTER"
	IntegrationProviderRecharge        IntegrationProvider = "RECHARGE"
	IntegrationProviderStripe          IntegrationProvider = "STRIPE"
	IntegrationProviderPropertyFinder  IntegrationProvider = "PROPERTY-FINDER"
	IntegrationProviderShopify         IntegrationProvider = "SHOPIFY"
	IntegrationProviderTwilio          IntegrationProvider = "TWILIO"
	IntegrationProviderGithub          IntegrationProvider = "GITHUB"
	IntegrationProviderPostmark        IntegrationProvider = "POSTMARK"
	IntegrationProviderTypeform        IntegrationProvider = "TYPEFORM"
	IntegrationProviderXero            IntegrationProvider = "XERO"
	IntegrationProviderSvix            IntegrationProvider = "SVIX"
	IntegrationProviderAdyen           IntegrationProvider = "ADYEN"
	IntegrationProviderAkeneo          IntegrationProvider = "AKENEO"
	IntegrationProviderGitlab          IntegrationProvider = "GITLAB"
	IntegrationProviderWoocommerce     IntegrationProvider = "WOOCOMMERCE"
	IntegrationProviderOura            IntegrationProvider = "OURA"
	IntegrationProviderCommercelayer   IntegrationProvider = "COMMERCELAYER"
	IntegrationProviderHubspot         IntegrationProvider = "HUBSPOT"
	IntegrationProviderMailgun         IntegrationProvider = "MAILGUN"
	IntegrationProviderPersona         IntegrationProvider = "PERSONA"
	IntegrationProviderPipedrive       IntegrationProvider = "PIPEDRIVE"
	IntegrationProviderSendgrid        IntegrationProvider = "SENDGRID"
	IntegrationProviderWorkos          IntegrationProvider = "WORKOS"
	IntegrationProviderSynctera        IntegrationProvider = "SYNCTERA"
	IntegrationProviderAwsSns          IntegrationProvider = "AWS_SNS"
	IntegrationProviderThreeDEye       IntegrationProvider = "THREE_D_EYE"
	IntegrationProviderTwitch          IntegrationProvider = "TWITCH"
	IntegrationProviderEnode           IntegrationProvider = "ENODE"
	IntegrationProviderFavro           IntegrationProvider = "FAVRO"
	IntegrationProviderLinear          IntegrationProvider = "LINEAR"
	IntegrationProviderShopline        IntegrationProvider = "SHOPLINE"
	IntegrationProviderWix             IntegrationProvider = "WIX"
	IntegrationProviderNmi             IntegrationProvider = "NMI"
	IntegrationProviderOrb             IntegrationProvider = "ORB"
	IntegrationProviderPylon           IntegrationProvider = "PYLON"
	IntegrationProviderRazorpay        IntegrationProvider = "RAZORPAY"
	IntegrationProviderRepay           IntegrationProvider = "REPAY"
	IntegrationProviderSquare          IntegrationProvider = "SQUARE"
	IntegrationProviderSolidgate       IntegrationProvider = "SOLIDGATE"
	IntegrationProviderTrello          IntegrationProvider = "TRELLO"
	IntegrationProviderEbay            IntegrationProvider = "EBAY"
	IntegrationProviderTelnyx          IntegrationProvider = "TELNYX"
	IntegrationProviderDiscord         IntegrationProvider = "DISCORD"
	IntegrationProviderTokenio         IntegrationProvider = "TOKENIO"
	IntegrationProviderFiserv          IntegrationProvider = "FISERV"
	IntegrationProviderBondsmith       IntegrationProvider = "BONDSMITH"
	IntegrationProviderVercelLogDrains IntegrationProvider = "VERCEL_LOG_DRAINS"
	IntegrationProviderVercel          IntegrationProvider = "VERCEL"
	IntegrationProviderTebex           IntegrationProvider = "TEBEX"
	IntegrationProviderSlack           IntegrationProvider = "SLACK"
	IntegrationProviderMailchimp       IntegrationProvider = "MAILCHIMP"
	IntegrationProviderPaddle          IntegrationProvider = "PADDLE"
	IntegrationProviderPaypal          IntegrationProvider = "PAYPAL"
	IntegrationProviderTreezor         IntegrationProvider = "TREEZOR"
	IntegrationProviderPraxis          IntegrationProvider = "PRAXIS"
	IntegrationProviderCustomerio      IntegrationProvider = "CUSTOMERIO"
	IntegrationProviderFacebook        IntegrationProvider = "FACEBOOK"
	IntegrationProviderWhatsapp        IntegrationProvider = "WHATSAPP"
	IntegrationProviderReplicate       IntegrationProvider = "REPLICATE"
	IntegrationProviderTiktok          IntegrationProvider = "TIKTOK"
	IntegrationProviderAirwallex       IntegrationProvider = "AIRWALLEX"
	IntegrationProviderZendesk         IntegrationProvider = "ZENDESK"
	IntegrationProviderUpollo          IntegrationProvider = "UPOLLO"
	IntegrationProviderLinkedin        IntegrationProvider = "LINKEDIN"
)

func NewIntegrationProviderFromString(s string) (IntegrationProvider, error) {
	switch s {
	case "HMAC":
		return IntegrationProviderHmac, nil
	case "BASIC_AUTH":
		return IntegrationProviderBasicAuth, nil
	case "API_KEY":
		return IntegrationProviderApiKey, nil
	case "WEBHOOK":
		return IntegrationProviderWebhook, nil
	case "HTTP":
		return IntegrationProviderHttp, nil
	case "MANAGED":
		return IntegrationProviderManaged, nil
	case "SANITY":
		return IntegrationProviderSanity, nil
	case "BRIDGE":
		return IntegrationProviderBridge, nil
	case "CLOUDSIGNAL":
		return IntegrationProviderCloudsignal, nil
	case "COURIER":
		return IntegrationProviderCourier, nil
	case "FRONTAPP":
		return IntegrationProviderFrontapp, nil
	case "ZOOM":
		return IntegrationProviderZoom, nil
	case "TWITTER":
		return IntegrationProviderTwitter, nil
	case "RECHARGE":
		return IntegrationProviderRecharge, nil
	case "STRIPE":
		return IntegrationProviderStripe, nil
	case "PROPERTY-FINDER":
		return IntegrationProviderPropertyFinder, nil
	case "SHOPIFY":
		return IntegrationProviderShopify, nil
	case "TWILIO":
		return IntegrationProviderTwilio, nil
	case "GITHUB":
		return IntegrationProviderGithub, nil
	case "POSTMARK":
		return IntegrationProviderPostmark, nil
	case "TYPEFORM":
		return IntegrationProviderTypeform, nil
	case "XERO":
		return IntegrationProviderXero, nil
	case "SVIX":
		return IntegrationProviderSvix, nil
	case "ADYEN":
		return IntegrationProviderAdyen, nil
	case "AKENEO":
		return IntegrationProviderAkeneo, nil
	case "GITLAB":
		return IntegrationProviderGitlab, nil
	case "WOOCOMMERCE":
		return IntegrationProviderWoocommerce, nil
	case "OURA":
		return IntegrationProviderOura, nil
	case "COMMERCELAYER":
		return IntegrationProviderCommercelayer, nil
	case "HUBSPOT":
		return IntegrationProviderHubspot, nil
	case "MAILGUN":
		return IntegrationProviderMailgun, nil
	case "PERSONA":
		return IntegrationProviderPersona, nil
	case "PIPEDRIVE":
		return IntegrationProviderPipedrive, nil
	case "SENDGRID":
		return IntegrationProviderSendgrid, nil
	case "WORKOS":
		return IntegrationProviderWorkos, nil
	case "SYNCTERA":
		return IntegrationProviderSynctera, nil
	case "AWS_SNS":
		return IntegrationProviderAwsSns, nil
	case "THREE_D_EYE":
		return IntegrationProviderThreeDEye, nil
	case "TWITCH":
		return IntegrationProviderTwitch, nil
	case "ENODE":
		return IntegrationProviderEnode, nil
	case "FAVRO":
		return IntegrationProviderFavro, nil
	case "LINEAR":
		return IntegrationProviderLinear, nil
	case "SHOPLINE":
		return IntegrationProviderShopline, nil
	case "WIX":
		return IntegrationProviderWix, nil
	case "NMI":
		return IntegrationProviderNmi, nil
	case "ORB":
		return IntegrationProviderOrb, nil
	case "PYLON":
		return IntegrationProviderPylon, nil
	case "RAZORPAY":
		return IntegrationProviderRazorpay, nil
	case "REPAY":
		return IntegrationProviderRepay, nil
	case "SQUARE":
		return IntegrationProviderSquare, nil
	case "SOLIDGATE":
		return IntegrationProviderSolidgate, nil
	case "TRELLO":
		return IntegrationProviderTrello, nil
	case "EBAY":
		return IntegrationProviderEbay, nil
	case "TELNYX":
		return IntegrationProviderTelnyx, nil
	case "DISCORD":
		return IntegrationProviderDiscord, nil
	case "TOKENIO":
		return IntegrationProviderTokenio, nil
	case "FISERV":
		return IntegrationProviderFiserv, nil
	case "BONDSMITH":
		return IntegrationProviderBondsmith, nil
	case "VERCEL_LOG_DRAINS":
		return IntegrationProviderVercelLogDrains, nil
	case "VERCEL":
		return IntegrationProviderVercel, nil
	case "TEBEX":
		return IntegrationProviderTebex, nil
	case "SLACK":
		return IntegrationProviderSlack, nil
	case "MAILCHIMP":
		return IntegrationProviderMailchimp, nil
	case "PADDLE":
		return IntegrationProviderPaddle, nil
	case "PAYPAL":
		return IntegrationProviderPaypal, nil
	case "TREEZOR":
		return IntegrationProviderTreezor, nil
	case "PRAXIS":
		return IntegrationProviderPraxis, nil
	case "CUSTOMERIO":
		return IntegrationProviderCustomerio, nil
	case "FACEBOOK":
		return IntegrationProviderFacebook, nil
	case "WHATSAPP":
		return IntegrationProviderWhatsapp, nil
	case "REPLICATE":
		return IntegrationProviderReplicate, nil
	case "TIKTOK":
		return IntegrationProviderTiktok, nil
	case "AIRWALLEX":
		return IntegrationProviderAirwallex, nil
	case "ZENDESK":
		return IntegrationProviderZendesk, nil
	case "UPOLLO":
		return IntegrationProviderUpollo, nil
	case "LINKEDIN":
		return IntegrationProviderLinkedin, nil
	}
	var t IntegrationProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IntegrationProvider) Ptr() *IntegrationProvider {
	return &i
}

type Operators struct {
	Gt  *time.Time `json:"gt,omitempty" url:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty" url:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty" url:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty" url:"lte,omitempty"`
	Any *bool      `json:"any,omitempty" url:"any,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *Operators) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *Operators) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *Operators) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *Operators) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *Operators) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *Operators) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *Operators) UnmarshalJSON(data []byte) error {
	type embed Operators
	var unmarshaler = struct {
		embed
		Gt  *internal.DateTime `json:"gt,omitempty"`
		Gte *internal.DateTime `json:"gte,omitempty"`
		Le  *internal.DateTime `json:"le,omitempty"`
		Lte *internal.DateTime `json:"lte,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = Operators(unmarshaler.embed)
	o.Gt = unmarshaler.Gt.TimePtr()
	o.Gte = unmarshaler.Gte.TimePtr()
	o.Le = unmarshaler.Le.TimePtr()
	o.Lte = unmarshaler.Lte.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *Operators) MarshalJSON() ([]byte, error) {
	type embed Operators
	var marshaler = struct {
		embed
		Gt  *internal.DateTime `json:"gt,omitempty"`
		Gte *internal.DateTime `json:"gte,omitempty"`
		Le  *internal.DateTime `json:"le,omitempty"`
		Lte *internal.DateTime `json:"lte,omitempty"`
	}{
		embed: embed(*o),
		Gt:    internal.NewOptionalDateTime(o.Gt),
		Gte:   internal.NewOptionalDateTime(o.Gte),
		Le:    internal.NewOptionalDateTime(o.Le),
		Lte:   internal.NewOptionalDateTime(o.Lte),
	}
	return json.Marshal(marshaler)
}

func (o *Operators) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrderByDirection string

const (
	OrderByDirectionAsc  OrderByDirection = "asc"
	OrderByDirectionDesc OrderByDirection = "desc"
)

func NewOrderByDirectionFromString(s string) (OrderByDirection, error) {
	switch s {
	case "asc":
		return OrderByDirectionAsc, nil
	case "desc":
		return OrderByDirectionDesc, nil
	}
	var t OrderByDirection
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OrderByDirection) Ptr() *OrderByDirection {
	return &o
}

type RawBody struct {
	Body string `json:"body" url:"body"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RawBody) GetBody() string {
	if r == nil {
		return ""
	}
	return r.Body
}

func (r *RawBody) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RawBody) UnmarshalJSON(data []byte) error {
	type unmarshaler RawBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RawBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RawBody) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RequestRejectionCause string

const (
	RequestRejectionCauseSourceDisabled         RequestRejectionCause = "SOURCE_DISABLED"
	RequestRejectionCauseNoConnection           RequestRejectionCause = "NO_CONNECTION"
	RequestRejectionCauseVerificationFailed     RequestRejectionCause = "VERIFICATION_FAILED"
	RequestRejectionCauseUnsupportedHttpMethod  RequestRejectionCause = "UNSUPPORTED_HTTP_METHOD"
	RequestRejectionCauseUnsupportedContentType RequestRejectionCause = "UNSUPPORTED_CONTENT_TYPE"
	RequestRejectionCauseUnparsableJson         RequestRejectionCause = "UNPARSABLE_JSON"
	RequestRejectionCausePayloadTooLarge        RequestRejectionCause = "PAYLOAD_TOO_LARGE"
	RequestRejectionCauseIngestionFatal         RequestRejectionCause = "INGESTION_FATAL"
	RequestRejectionCauseUnknown                RequestRejectionCause = "UNKNOWN"
)

func NewRequestRejectionCauseFromString(s string) (RequestRejectionCause, error) {
	switch s {
	case "SOURCE_DISABLED":
		return RequestRejectionCauseSourceDisabled, nil
	case "NO_CONNECTION":
		return RequestRejectionCauseNoConnection, nil
	case "VERIFICATION_FAILED":
		return RequestRejectionCauseVerificationFailed, nil
	case "UNSUPPORTED_HTTP_METHOD":
		return RequestRejectionCauseUnsupportedHttpMethod, nil
	case "UNSUPPORTED_CONTENT_TYPE":
		return RequestRejectionCauseUnsupportedContentType, nil
	case "UNPARSABLE_JSON":
		return RequestRejectionCauseUnparsableJson, nil
	case "PAYLOAD_TOO_LARGE":
		return RequestRejectionCausePayloadTooLarge, nil
	case "INGESTION_FATAL":
		return RequestRejectionCauseIngestionFatal, nil
	case "UNKNOWN":
		return RequestRejectionCauseUnknown, nil
	}
	var t RequestRejectionCause
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestRejectionCause) Ptr() *RequestRejectionCause {
	return &r
}

type SeekPagination struct {
	OrderBy *SeekPaginationOrderBy `json:"order_by,omitempty" url:"order_by,omitempty"`
	Dir     *SeekPaginationDir     `json:"dir,omitempty" url:"dir,omitempty"`
	Limit   *int                   `json:"limit,omitempty" url:"limit,omitempty"`
	Prev    *string                `json:"prev,omitempty" url:"prev,omitempty"`
	Next    *string                `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SeekPagination) GetOrderBy() *SeekPaginationOrderBy {
	if s == nil {
		return nil
	}
	return s.OrderBy
}

func (s *SeekPagination) GetDir() *SeekPaginationDir {
	if s == nil {
		return nil
	}
	return s.Dir
}

func (s *SeekPagination) GetLimit() *int {
	if s == nil {
		return nil
	}
	return s.Limit
}

func (s *SeekPagination) GetPrev() *string {
	if s == nil {
		return nil
	}
	return s.Prev
}

func (s *SeekPagination) GetNext() *string {
	if s == nil {
		return nil
	}
	return s.Next
}

func (s *SeekPagination) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SeekPagination) UnmarshalJSON(data []byte) error {
	type unmarshaler SeekPagination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SeekPagination(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SeekPagination) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SeekPaginationDir struct {
	OrderByDirection     OrderByDirection
	OrderByDirectionList []OrderByDirection

	typ string
}

func NewSeekPaginationDirFromOrderByDirection(value OrderByDirection) *SeekPaginationDir {
	return &SeekPaginationDir{typ: "OrderByDirection", OrderByDirection: value}
}

func NewSeekPaginationDirFromOrderByDirectionList(value []OrderByDirection) *SeekPaginationDir {
	return &SeekPaginationDir{typ: "OrderByDirectionList", OrderByDirectionList: value}
}

func (s *SeekPaginationDir) GetOrderByDirection() OrderByDirection {
	if s == nil {
		return ""
	}
	return s.OrderByDirection
}

func (s *SeekPaginationDir) GetOrderByDirectionList() []OrderByDirection {
	if s == nil {
		return nil
	}
	return s.OrderByDirectionList
}

func (s *SeekPaginationDir) UnmarshalJSON(data []byte) error {
	var valueOrderByDirection OrderByDirection
	if err := json.Unmarshal(data, &valueOrderByDirection); err == nil {
		s.typ = "OrderByDirection"
		s.OrderByDirection = valueOrderByDirection
		return nil
	}
	var valueOrderByDirectionList []OrderByDirection
	if err := json.Unmarshal(data, &valueOrderByDirectionList); err == nil {
		s.typ = "OrderByDirectionList"
		s.OrderByDirectionList = valueOrderByDirectionList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SeekPaginationDir) MarshalJSON() ([]byte, error) {
	if s.typ == "OrderByDirection" || s.OrderByDirection != "" {
		return json.Marshal(s.OrderByDirection)
	}
	if s.typ == "OrderByDirectionList" || s.OrderByDirectionList != nil {
		return json.Marshal(s.OrderByDirectionList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SeekPaginationDirVisitor interface {
	VisitOrderByDirection(OrderByDirection) error
	VisitOrderByDirectionList([]OrderByDirection) error
}

func (s *SeekPaginationDir) Accept(visitor SeekPaginationDirVisitor) error {
	if s.typ == "OrderByDirection" || s.OrderByDirection != "" {
		return visitor.VisitOrderByDirection(s.OrderByDirection)
	}
	if s.typ == "OrderByDirectionList" || s.OrderByDirectionList != nil {
		return visitor.VisitOrderByDirectionList(s.OrderByDirectionList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SeekPaginationOrderBy struct {
	String     string
	StringList []string

	typ string
}

func NewSeekPaginationOrderByFromString(value string) *SeekPaginationOrderBy {
	return &SeekPaginationOrderBy{typ: "String", String: value}
}

func NewSeekPaginationOrderByFromStringList(value []string) *SeekPaginationOrderBy {
	return &SeekPaginationOrderBy{typ: "StringList", StringList: value}
}

func (s *SeekPaginationOrderBy) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *SeekPaginationOrderBy) GetStringList() []string {
	if s == nil {
		return nil
	}
	return s.StringList
}

func (s *SeekPaginationOrderBy) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		s.typ = "StringList"
		s.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SeekPaginationOrderBy) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "StringList" || s.StringList != nil {
		return json.Marshal(s.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SeekPaginationOrderByVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (s *SeekPaginationOrderBy) Accept(visitor SeekPaginationOrderByVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "StringList" || s.StringList != nil {
		return visitor.VisitStringList(s.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ShopifyIntegrationConfigs struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShopifyIntegrationConfigs) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *ShopifyIntegrationConfigs) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShopifyIntegrationConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler ShopifyIntegrationConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShopifyIntegrationConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShopifyIntegrationConfigs) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Request data
type ShortEventData struct {
	// Request path
	Path string `json:"path" url:"path"`
	// Raw query param string
	Query *string `json:"query,omitempty" url:"query,omitempty"`
	// JSON representation of query params
	ParsedQuery *ShortEventDataParsedQuery `json:"parsed_query,omitempty" url:"parsed_query,omitempty"`
	// JSON representation of the headers
	Headers *ShortEventDataHeaders `json:"headers,omitempty" url:"headers,omitempty"`
	// JSON or string representation of the body
	Body *ShortEventDataBody `json:"body,omitempty" url:"body,omitempty"`
	// Whether the payload is considered large payload and not searchable
	IsLargePayload *bool `json:"is_large_payload,omitempty" url:"is_large_payload,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShortEventData) GetPath() string {
	if s == nil {
		return ""
	}
	return s.Path
}

func (s *ShortEventData) GetQuery() *string {
	if s == nil {
		return nil
	}
	return s.Query
}

func (s *ShortEventData) GetParsedQuery() *ShortEventDataParsedQuery {
	if s == nil {
		return nil
	}
	return s.ParsedQuery
}

func (s *ShortEventData) GetHeaders() *ShortEventDataHeaders {
	if s == nil {
		return nil
	}
	return s.Headers
}

func (s *ShortEventData) GetBody() *ShortEventDataBody {
	if s == nil {
		return nil
	}
	return s.Body
}

func (s *ShortEventData) GetIsLargePayload() *bool {
	if s == nil {
		return nil
	}
	return s.IsLargePayload
}

func (s *ShortEventData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShortEventData) UnmarshalJSON(data []byte) error {
	type unmarshaler ShortEventData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShortEventData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShortEventData) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// JSON or string representation of the body
type ShortEventDataBody struct {
	String                string
	ShortEventDataBodyOne *ShortEventDataBodyOne
	UnknownList           []interface{}

	typ string
}

func NewShortEventDataBodyFromString(value string) *ShortEventDataBody {
	return &ShortEventDataBody{typ: "String", String: value}
}

func NewShortEventDataBodyFromShortEventDataBodyOne(value *ShortEventDataBodyOne) *ShortEventDataBody {
	return &ShortEventDataBody{typ: "ShortEventDataBodyOne", ShortEventDataBodyOne: value}
}

func NewShortEventDataBodyFromUnknownList(value []interface{}) *ShortEventDataBody {
	return &ShortEventDataBody{typ: "UnknownList", UnknownList: value}
}

func (s *ShortEventDataBody) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *ShortEventDataBody) GetShortEventDataBodyOne() *ShortEventDataBodyOne {
	if s == nil {
		return nil
	}
	return s.ShortEventDataBodyOne
}

func (s *ShortEventDataBody) GetUnknownList() []interface{} {
	if s == nil {
		return nil
	}
	return s.UnknownList
}

func (s *ShortEventDataBody) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	valueShortEventDataBodyOne := new(ShortEventDataBodyOne)
	if err := json.Unmarshal(data, &valueShortEventDataBodyOne); err == nil {
		s.typ = "ShortEventDataBodyOne"
		s.ShortEventDataBodyOne = valueShortEventDataBodyOne
		return nil
	}
	var valueUnknownList []interface{}
	if err := json.Unmarshal(data, &valueUnknownList); err == nil {
		s.typ = "UnknownList"
		s.UnknownList = valueUnknownList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ShortEventDataBody) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "ShortEventDataBodyOne" || s.ShortEventDataBodyOne != nil {
		return json.Marshal(s.ShortEventDataBodyOne)
	}
	if s.typ == "UnknownList" || s.UnknownList != nil {
		return json.Marshal(s.UnknownList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ShortEventDataBodyVisitor interface {
	VisitString(string) error
	VisitShortEventDataBodyOne(*ShortEventDataBodyOne) error
	VisitUnknownList([]interface{}) error
}

func (s *ShortEventDataBody) Accept(visitor ShortEventDataBodyVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "ShortEventDataBodyOne" || s.ShortEventDataBodyOne != nil {
		return visitor.VisitShortEventDataBodyOne(s.ShortEventDataBodyOne)
	}
	if s.typ == "UnknownList" || s.UnknownList != nil {
		return visitor.VisitUnknownList(s.UnknownList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ShortEventDataBodyOne struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShortEventDataBodyOne) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShortEventDataBodyOne) UnmarshalJSON(data []byte) error {
	type unmarshaler ShortEventDataBodyOne
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShortEventDataBodyOne(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShortEventDataBodyOne) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// JSON representation of the headers
type ShortEventDataHeaders struct {
	String                  string
	StringStringOptionalMap map[string]*string

	typ string
}

func NewShortEventDataHeadersFromString(value string) *ShortEventDataHeaders {
	return &ShortEventDataHeaders{typ: "String", String: value}
}

func NewShortEventDataHeadersFromStringStringOptionalMap(value map[string]*string) *ShortEventDataHeaders {
	return &ShortEventDataHeaders{typ: "StringStringOptionalMap", StringStringOptionalMap: value}
}

func (s *ShortEventDataHeaders) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *ShortEventDataHeaders) GetStringStringOptionalMap() map[string]*string {
	if s == nil {
		return nil
	}
	return s.StringStringOptionalMap
}

func (s *ShortEventDataHeaders) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	var valueStringStringOptionalMap map[string]*string
	if err := json.Unmarshal(data, &valueStringStringOptionalMap); err == nil {
		s.typ = "StringStringOptionalMap"
		s.StringStringOptionalMap = valueStringStringOptionalMap
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ShortEventDataHeaders) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "StringStringOptionalMap" || s.StringStringOptionalMap != nil {
		return json.Marshal(s.StringStringOptionalMap)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ShortEventDataHeadersVisitor interface {
	VisitString(string) error
	VisitStringStringOptionalMap(map[string]*string) error
}

func (s *ShortEventDataHeaders) Accept(visitor ShortEventDataHeadersVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "StringStringOptionalMap" || s.StringStringOptionalMap != nil {
		return visitor.VisitStringStringOptionalMap(s.StringStringOptionalMap)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// JSON representation of query params
type ShortEventDataParsedQuery struct {
	StringOptional               *string
	ShortEventDataParsedQueryOne *ShortEventDataParsedQueryOne

	typ string
}

func NewShortEventDataParsedQueryFromStringOptional(value *string) *ShortEventDataParsedQuery {
	return &ShortEventDataParsedQuery{typ: "StringOptional", StringOptional: value}
}

func NewShortEventDataParsedQueryFromShortEventDataParsedQueryOne(value *ShortEventDataParsedQueryOne) *ShortEventDataParsedQuery {
	return &ShortEventDataParsedQuery{typ: "ShortEventDataParsedQueryOne", ShortEventDataParsedQueryOne: value}
}

func (s *ShortEventDataParsedQuery) GetStringOptional() *string {
	if s == nil {
		return nil
	}
	return s.StringOptional
}

func (s *ShortEventDataParsedQuery) GetShortEventDataParsedQueryOne() *ShortEventDataParsedQueryOne {
	if s == nil {
		return nil
	}
	return s.ShortEventDataParsedQueryOne
}

func (s *ShortEventDataParsedQuery) UnmarshalJSON(data []byte) error {
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		s.typ = "StringOptional"
		s.StringOptional = valueStringOptional
		return nil
	}
	valueShortEventDataParsedQueryOne := new(ShortEventDataParsedQueryOne)
	if err := json.Unmarshal(data, &valueShortEventDataParsedQueryOne); err == nil {
		s.typ = "ShortEventDataParsedQueryOne"
		s.ShortEventDataParsedQueryOne = valueShortEventDataParsedQueryOne
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ShortEventDataParsedQuery) MarshalJSON() ([]byte, error) {
	if s.typ == "StringOptional" || s.StringOptional != nil {
		return json.Marshal(s.StringOptional)
	}
	if s.typ == "ShortEventDataParsedQueryOne" || s.ShortEventDataParsedQueryOne != nil {
		return json.Marshal(s.ShortEventDataParsedQueryOne)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ShortEventDataParsedQueryVisitor interface {
	VisitStringOptional(*string) error
	VisitShortEventDataParsedQueryOne(*ShortEventDataParsedQueryOne) error
}

func (s *ShortEventDataParsedQuery) Accept(visitor ShortEventDataParsedQueryVisitor) error {
	if s.typ == "StringOptional" || s.StringOptional != nil {
		return visitor.VisitStringOptional(s.StringOptional)
	}
	if s.typ == "ShortEventDataParsedQueryOne" || s.ShortEventDataParsedQueryOne != nil {
		return visitor.VisitShortEventDataParsedQueryOne(s.ShortEventDataParsedQueryOne)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ShortEventDataParsedQueryOne struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShortEventDataParsedQueryOne) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShortEventDataParsedQueryOne) UnmarshalJSON(data []byte) error {
	type unmarshaler ShortEventDataParsedQueryOne
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShortEventDataParsedQueryOne(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShortEventDataParsedQueryOne) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Associated [Source](#source-object) object
type Source struct {
	// ID of the source
	Id string `json:"id" url:"id"`
	// Name for the source
	Name string `json:"name" url:"name"`
	// Description of the source
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// ID of the project
	TeamId string `json:"team_id" url:"team_id"`
	// A unique URL that must be supplied to your webhook's provider
	Url string `json:"url" url:"url"`
	// Type of the source
	Type string `json:"type" url:"type"`
	// Whether the source is authenticated
	Authenticated bool          `json:"authenticated" url:"authenticated"`
	Config        *SourceConfig `json:"config,omitempty" url:"config,omitempty"`
	// Date the source was disabled
	DisabledAt *time.Time `json:"disabled_at,omitempty" url:"disabled_at,omitempty"`
	// Date the source was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the source was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Source) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *Source) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *Source) GetDescription() *string {
	if s == nil {
		return nil
	}
	return s.Description
}

func (s *Source) GetTeamId() string {
	if s == nil {
		return ""
	}
	return s.TeamId
}

func (s *Source) GetUrl() string {
	if s == nil {
		return ""
	}
	return s.Url
}

func (s *Source) GetType() string {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *Source) GetAuthenticated() bool {
	if s == nil {
		return false
	}
	return s.Authenticated
}

func (s *Source) GetConfig() *SourceConfig {
	if s == nil {
		return nil
	}
	return s.Config
}

func (s *Source) GetDisabledAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.DisabledAt
}

func (s *Source) GetUpdatedAt() time.Time {
	if s == nil {
		return time.Time{}
	}
	return s.UpdatedAt
}

func (s *Source) GetCreatedAt() time.Time {
	if s == nil {
		return time.Time{}
	}
	return s.CreatedAt
}

func (s *Source) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Source) UnmarshalJSON(data []byte) error {
	type embed Source
	var unmarshaler = struct {
		embed
		DisabledAt *internal.DateTime `json:"disabled_at,omitempty"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
		CreatedAt  *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = Source(unmarshaler.embed)
	s.DisabledAt = unmarshaler.DisabledAt.TimePtr()
	s.UpdatedAt = unmarshaler.UpdatedAt.Time()
	s.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Source) MarshalJSON() ([]byte, error) {
	type embed Source
	var marshaler = struct {
		embed
		DisabledAt *internal.DateTime `json:"disabled_at,omitempty"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
		CreatedAt  *internal.DateTime `json:"created_at"`
	}{
		embed:      embed(*s),
		DisabledAt: internal.NewOptionalDateTime(s.DisabledAt),
		UpdatedAt:  internal.NewDateTime(s.UpdatedAt),
		CreatedAt:  internal.NewDateTime(s.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (s *Source) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Configuration object for the source type
type SourceConfig struct {
	SourceTypeConfigWebhook           *SourceTypeConfigWebhook
	SourceTypeConfigHttp              *SourceTypeConfigHttp
	SourceTypeConfigManaged           *SourceTypeConfigManaged
	SourceTypeConfigSanity            *SourceTypeConfigSanity
	SourceTypeConfigBridge            *SourceTypeConfigBridge
	SourceTypeConfigCloudSignal       *SourceTypeConfigCloudSignal
	SourceTypeConfigCourier           *SourceTypeConfigCourier
	SourceTypeConfigFrontApp          *SourceTypeConfigFrontApp
	SourceTypeConfigZoom              *SourceTypeConfigZoom
	SourceTypeConfigTwitter           *SourceTypeConfigTwitter
	SourceTypeConfigRecharge          *SourceTypeConfigRecharge
	SourceTypeConfigStripe            *SourceTypeConfigStripe
	SourceTypeConfigPropertyFinder    *SourceTypeConfigPropertyFinder
	SourceTypeConfigShopify           *SourceTypeConfigShopify
	SourceTypeConfigTwilio            *SourceTypeConfigTwilio
	SourceTypeConfigGitHub            *SourceTypeConfigGitHub
	SourceTypeConfigPostmark          *SourceTypeConfigPostmark
	SourceTypeConfigTypeform          *SourceTypeConfigTypeform
	SourceTypeConfigXero              *SourceTypeConfigXero
	SourceTypeConfigSvix              *SourceTypeConfigSvix
	SourceTypeConfigAdyen             *SourceTypeConfigAdyen
	SourceTypeConfigAkeneo            *SourceTypeConfigAkeneo
	SourceTypeConfigGitLab            *SourceTypeConfigGitLab
	SourceTypeConfigWooCommerce       *SourceTypeConfigWooCommerce
	SourceTypeConfigOura              *SourceTypeConfigOura
	SourceTypeConfigCommerceLayer     *SourceTypeConfigCommerceLayer
	SourceTypeConfigHubspot           *SourceTypeConfigHubspot
	SourceTypeConfigMailgun           *SourceTypeConfigMailgun
	SourceTypeConfigPersona           *SourceTypeConfigPersona
	SourceTypeConfigPipedrive         *SourceTypeConfigPipedrive
	SourceTypeConfigSendgrid          *SourceTypeConfigSendgrid
	SourceTypeConfigWorkOs            *SourceTypeConfigWorkOs
	SourceTypeConfigSynctera          *SourceTypeConfigSynctera
	SourceTypeConfigAwssns            *SourceTypeConfigAwssns
	SourceTypeConfig3DEye             *SourceTypeConfig3DEye
	SourceTypeConfigTwitch            *SourceTypeConfigTwitch
	SourceTypeConfigEnode             *SourceTypeConfigEnode
	SourceTypeConfigFavro             *SourceTypeConfigFavro
	SourceTypeConfigLinear            *SourceTypeConfigLinear
	SourceTypeConfigShopline          *SourceTypeConfigShopline
	SourceTypeConfigWix               *SourceTypeConfigWix
	SourceTypeConfigNmiPaymentGateway *SourceTypeConfigNmiPaymentGateway
	SourceTypeConfigOrb               *SourceTypeConfigOrb
	SourceTypeConfigPylon             *SourceTypeConfigPylon
	SourceTypeConfigRazorpay          *SourceTypeConfigRazorpay
	SourceTypeConfigRepay             *SourceTypeConfigRepay
	SourceTypeConfigSquare            *SourceTypeConfigSquare
	SourceTypeConfigSolidgate         *SourceTypeConfigSolidgate
	SourceTypeConfigTrello            *SourceTypeConfigTrello
	SourceTypeConfigEbay              *SourceTypeConfigEbay
	SourceTypeConfigTelnyx            *SourceTypeConfigTelnyx
	SourceTypeConfigDiscord           *SourceTypeConfigDiscord
	SourceTypeConfigTokenIo           *SourceTypeConfigTokenIo
	SourceTypeConfigFiserv            *SourceTypeConfigFiserv
	SourceTypeConfigBondsmith         *SourceTypeConfigBondsmith
	SourceTypeConfigVercelLogDrains   *SourceTypeConfigVercelLogDrains
	SourceTypeConfigVercelWebhooks    *SourceTypeConfigVercelWebhooks
	SourceTypeConfigTebex             *SourceTypeConfigTebex
	SourceTypeConfigSlack             *SourceTypeConfigSlack
	SourceTypeConfigMailchimp         *SourceTypeConfigMailchimp
	SourceTypeConfigPaddle            *SourceTypeConfigPaddle
	SourceTypeConfigPaypal            *SourceTypeConfigPaypal
	SourceTypeConfigTreezor           *SourceTypeConfigTreezor
	SourceTypeConfigPraxis            *SourceTypeConfigPraxis
	SourceTypeConfigCustomerIo        *SourceTypeConfigCustomerIo
	SourceTypeConfigFacebook          *SourceTypeConfigFacebook
	SourceTypeConfigWhatsApp          *SourceTypeConfigWhatsApp
	SourceTypeConfigReplicate         *SourceTypeConfigReplicate
	SourceTypeConfigTikTok            *SourceTypeConfigTikTok
	SourceTypeConfigAirwallex         *SourceTypeConfigAirwallex
	SourceTypeConfigZendesk           *SourceTypeConfigZendesk
	SourceTypeConfigUpollo            *SourceTypeConfigUpollo
	SourceTypeConfigLinkedIn          *SourceTypeConfigLinkedIn

	typ string
}

func NewSourceConfigFromSourceTypeConfigWebhook(value *SourceTypeConfigWebhook) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigWebhook", SourceTypeConfigWebhook: value}
}

func NewSourceConfigFromSourceTypeConfigHttp(value *SourceTypeConfigHttp) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigHttp", SourceTypeConfigHttp: value}
}

func NewSourceConfigFromSourceTypeConfigManaged(value *SourceTypeConfigManaged) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigManaged", SourceTypeConfigManaged: value}
}

func NewSourceConfigFromSourceTypeConfigSanity(value *SourceTypeConfigSanity) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigSanity", SourceTypeConfigSanity: value}
}

func NewSourceConfigFromSourceTypeConfigBridge(value *SourceTypeConfigBridge) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigBridge", SourceTypeConfigBridge: value}
}

func NewSourceConfigFromSourceTypeConfigCloudSignal(value *SourceTypeConfigCloudSignal) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigCloudSignal", SourceTypeConfigCloudSignal: value}
}

func NewSourceConfigFromSourceTypeConfigCourier(value *SourceTypeConfigCourier) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigCourier", SourceTypeConfigCourier: value}
}

func NewSourceConfigFromSourceTypeConfigFrontApp(value *SourceTypeConfigFrontApp) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigFrontApp", SourceTypeConfigFrontApp: value}
}

func NewSourceConfigFromSourceTypeConfigZoom(value *SourceTypeConfigZoom) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigZoom", SourceTypeConfigZoom: value}
}

func NewSourceConfigFromSourceTypeConfigTwitter(value *SourceTypeConfigTwitter) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigTwitter", SourceTypeConfigTwitter: value}
}

func NewSourceConfigFromSourceTypeConfigRecharge(value *SourceTypeConfigRecharge) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigRecharge", SourceTypeConfigRecharge: value}
}

func NewSourceConfigFromSourceTypeConfigStripe(value *SourceTypeConfigStripe) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigStripe", SourceTypeConfigStripe: value}
}

func NewSourceConfigFromSourceTypeConfigPropertyFinder(value *SourceTypeConfigPropertyFinder) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigPropertyFinder", SourceTypeConfigPropertyFinder: value}
}

func NewSourceConfigFromSourceTypeConfigShopify(value *SourceTypeConfigShopify) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigShopify", SourceTypeConfigShopify: value}
}

func NewSourceConfigFromSourceTypeConfigTwilio(value *SourceTypeConfigTwilio) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigTwilio", SourceTypeConfigTwilio: value}
}

func NewSourceConfigFromSourceTypeConfigGitHub(value *SourceTypeConfigGitHub) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigGitHub", SourceTypeConfigGitHub: value}
}

func NewSourceConfigFromSourceTypeConfigPostmark(value *SourceTypeConfigPostmark) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigPostmark", SourceTypeConfigPostmark: value}
}

func NewSourceConfigFromSourceTypeConfigTypeform(value *SourceTypeConfigTypeform) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigTypeform", SourceTypeConfigTypeform: value}
}

func NewSourceConfigFromSourceTypeConfigXero(value *SourceTypeConfigXero) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigXero", SourceTypeConfigXero: value}
}

func NewSourceConfigFromSourceTypeConfigSvix(value *SourceTypeConfigSvix) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigSvix", SourceTypeConfigSvix: value}
}

func NewSourceConfigFromSourceTypeConfigAdyen(value *SourceTypeConfigAdyen) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigAdyen", SourceTypeConfigAdyen: value}
}

func NewSourceConfigFromSourceTypeConfigAkeneo(value *SourceTypeConfigAkeneo) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigAkeneo", SourceTypeConfigAkeneo: value}
}

func NewSourceConfigFromSourceTypeConfigGitLab(value *SourceTypeConfigGitLab) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigGitLab", SourceTypeConfigGitLab: value}
}

func NewSourceConfigFromSourceTypeConfigWooCommerce(value *SourceTypeConfigWooCommerce) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigWooCommerce", SourceTypeConfigWooCommerce: value}
}

func NewSourceConfigFromSourceTypeConfigOura(value *SourceTypeConfigOura) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigOura", SourceTypeConfigOura: value}
}

func NewSourceConfigFromSourceTypeConfigCommerceLayer(value *SourceTypeConfigCommerceLayer) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigCommerceLayer", SourceTypeConfigCommerceLayer: value}
}

func NewSourceConfigFromSourceTypeConfigHubspot(value *SourceTypeConfigHubspot) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigHubspot", SourceTypeConfigHubspot: value}
}

func NewSourceConfigFromSourceTypeConfigMailgun(value *SourceTypeConfigMailgun) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigMailgun", SourceTypeConfigMailgun: value}
}

func NewSourceConfigFromSourceTypeConfigPersona(value *SourceTypeConfigPersona) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigPersona", SourceTypeConfigPersona: value}
}

func NewSourceConfigFromSourceTypeConfigPipedrive(value *SourceTypeConfigPipedrive) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigPipedrive", SourceTypeConfigPipedrive: value}
}

func NewSourceConfigFromSourceTypeConfigSendgrid(value *SourceTypeConfigSendgrid) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigSendgrid", SourceTypeConfigSendgrid: value}
}

func NewSourceConfigFromSourceTypeConfigWorkOs(value *SourceTypeConfigWorkOs) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigWorkOs", SourceTypeConfigWorkOs: value}
}

func NewSourceConfigFromSourceTypeConfigSynctera(value *SourceTypeConfigSynctera) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigSynctera", SourceTypeConfigSynctera: value}
}

func NewSourceConfigFromSourceTypeConfigAwssns(value *SourceTypeConfigAwssns) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigAwssns", SourceTypeConfigAwssns: value}
}

func NewSourceConfigFromSourceTypeConfig3DEye(value *SourceTypeConfig3DEye) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfig3DEye", SourceTypeConfig3DEye: value}
}

func NewSourceConfigFromSourceTypeConfigTwitch(value *SourceTypeConfigTwitch) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigTwitch", SourceTypeConfigTwitch: value}
}

func NewSourceConfigFromSourceTypeConfigEnode(value *SourceTypeConfigEnode) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigEnode", SourceTypeConfigEnode: value}
}

func NewSourceConfigFromSourceTypeConfigFavro(value *SourceTypeConfigFavro) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigFavro", SourceTypeConfigFavro: value}
}

func NewSourceConfigFromSourceTypeConfigLinear(value *SourceTypeConfigLinear) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigLinear", SourceTypeConfigLinear: value}
}

func NewSourceConfigFromSourceTypeConfigShopline(value *SourceTypeConfigShopline) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigShopline", SourceTypeConfigShopline: value}
}

func NewSourceConfigFromSourceTypeConfigWix(value *SourceTypeConfigWix) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigWix", SourceTypeConfigWix: value}
}

func NewSourceConfigFromSourceTypeConfigNmiPaymentGateway(value *SourceTypeConfigNmiPaymentGateway) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigNmiPaymentGateway", SourceTypeConfigNmiPaymentGateway: value}
}

func NewSourceConfigFromSourceTypeConfigOrb(value *SourceTypeConfigOrb) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigOrb", SourceTypeConfigOrb: value}
}

func NewSourceConfigFromSourceTypeConfigPylon(value *SourceTypeConfigPylon) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigPylon", SourceTypeConfigPylon: value}
}

func NewSourceConfigFromSourceTypeConfigRazorpay(value *SourceTypeConfigRazorpay) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigRazorpay", SourceTypeConfigRazorpay: value}
}

func NewSourceConfigFromSourceTypeConfigRepay(value *SourceTypeConfigRepay) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigRepay", SourceTypeConfigRepay: value}
}

func NewSourceConfigFromSourceTypeConfigSquare(value *SourceTypeConfigSquare) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigSquare", SourceTypeConfigSquare: value}
}

func NewSourceConfigFromSourceTypeConfigSolidgate(value *SourceTypeConfigSolidgate) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigSolidgate", SourceTypeConfigSolidgate: value}
}

func NewSourceConfigFromSourceTypeConfigTrello(value *SourceTypeConfigTrello) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigTrello", SourceTypeConfigTrello: value}
}

func NewSourceConfigFromSourceTypeConfigEbay(value *SourceTypeConfigEbay) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigEbay", SourceTypeConfigEbay: value}
}

func NewSourceConfigFromSourceTypeConfigTelnyx(value *SourceTypeConfigTelnyx) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigTelnyx", SourceTypeConfigTelnyx: value}
}

func NewSourceConfigFromSourceTypeConfigDiscord(value *SourceTypeConfigDiscord) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigDiscord", SourceTypeConfigDiscord: value}
}

func NewSourceConfigFromSourceTypeConfigTokenIo(value *SourceTypeConfigTokenIo) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigTokenIo", SourceTypeConfigTokenIo: value}
}

func NewSourceConfigFromSourceTypeConfigFiserv(value *SourceTypeConfigFiserv) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigFiserv", SourceTypeConfigFiserv: value}
}

func NewSourceConfigFromSourceTypeConfigBondsmith(value *SourceTypeConfigBondsmith) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigBondsmith", SourceTypeConfigBondsmith: value}
}

func NewSourceConfigFromSourceTypeConfigVercelLogDrains(value *SourceTypeConfigVercelLogDrains) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigVercelLogDrains", SourceTypeConfigVercelLogDrains: value}
}

func NewSourceConfigFromSourceTypeConfigVercelWebhooks(value *SourceTypeConfigVercelWebhooks) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigVercelWebhooks", SourceTypeConfigVercelWebhooks: value}
}

func NewSourceConfigFromSourceTypeConfigTebex(value *SourceTypeConfigTebex) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigTebex", SourceTypeConfigTebex: value}
}

func NewSourceConfigFromSourceTypeConfigSlack(value *SourceTypeConfigSlack) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigSlack", SourceTypeConfigSlack: value}
}

func NewSourceConfigFromSourceTypeConfigMailchimp(value *SourceTypeConfigMailchimp) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigMailchimp", SourceTypeConfigMailchimp: value}
}

func NewSourceConfigFromSourceTypeConfigPaddle(value *SourceTypeConfigPaddle) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigPaddle", SourceTypeConfigPaddle: value}
}

func NewSourceConfigFromSourceTypeConfigPaypal(value *SourceTypeConfigPaypal) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigPaypal", SourceTypeConfigPaypal: value}
}

func NewSourceConfigFromSourceTypeConfigTreezor(value *SourceTypeConfigTreezor) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigTreezor", SourceTypeConfigTreezor: value}
}

func NewSourceConfigFromSourceTypeConfigPraxis(value *SourceTypeConfigPraxis) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigPraxis", SourceTypeConfigPraxis: value}
}

func NewSourceConfigFromSourceTypeConfigCustomerIo(value *SourceTypeConfigCustomerIo) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigCustomerIo", SourceTypeConfigCustomerIo: value}
}

func NewSourceConfigFromSourceTypeConfigFacebook(value *SourceTypeConfigFacebook) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigFacebook", SourceTypeConfigFacebook: value}
}

func NewSourceConfigFromSourceTypeConfigWhatsApp(value *SourceTypeConfigWhatsApp) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigWhatsApp", SourceTypeConfigWhatsApp: value}
}

func NewSourceConfigFromSourceTypeConfigReplicate(value *SourceTypeConfigReplicate) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigReplicate", SourceTypeConfigReplicate: value}
}

func NewSourceConfigFromSourceTypeConfigTikTok(value *SourceTypeConfigTikTok) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigTikTok", SourceTypeConfigTikTok: value}
}

func NewSourceConfigFromSourceTypeConfigAirwallex(value *SourceTypeConfigAirwallex) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigAirwallex", SourceTypeConfigAirwallex: value}
}

func NewSourceConfigFromSourceTypeConfigZendesk(value *SourceTypeConfigZendesk) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigZendesk", SourceTypeConfigZendesk: value}
}

func NewSourceConfigFromSourceTypeConfigUpollo(value *SourceTypeConfigUpollo) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigUpollo", SourceTypeConfigUpollo: value}
}

func NewSourceConfigFromSourceTypeConfigLinkedIn(value *SourceTypeConfigLinkedIn) *SourceConfig {
	return &SourceConfig{typ: "SourceTypeConfigLinkedIn", SourceTypeConfigLinkedIn: value}
}

func (s *SourceConfig) GetSourceTypeConfigWebhook() *SourceTypeConfigWebhook {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWebhook
}

func (s *SourceConfig) GetSourceTypeConfigHttp() *SourceTypeConfigHttp {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHttp
}

func (s *SourceConfig) GetSourceTypeConfigManaged() *SourceTypeConfigManaged {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigManaged
}

func (s *SourceConfig) GetSourceTypeConfigSanity() *SourceTypeConfigSanity {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSanity
}

func (s *SourceConfig) GetSourceTypeConfigBridge() *SourceTypeConfigBridge {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigBridge
}

func (s *SourceConfig) GetSourceTypeConfigCloudSignal() *SourceTypeConfigCloudSignal {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigCloudSignal
}

func (s *SourceConfig) GetSourceTypeConfigCourier() *SourceTypeConfigCourier {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigCourier
}

func (s *SourceConfig) GetSourceTypeConfigFrontApp() *SourceTypeConfigFrontApp {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigFrontApp
}

func (s *SourceConfig) GetSourceTypeConfigZoom() *SourceTypeConfigZoom {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigZoom
}

func (s *SourceConfig) GetSourceTypeConfigTwitter() *SourceTypeConfigTwitter {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTwitter
}

func (s *SourceConfig) GetSourceTypeConfigRecharge() *SourceTypeConfigRecharge {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigRecharge
}

func (s *SourceConfig) GetSourceTypeConfigStripe() *SourceTypeConfigStripe {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigStripe
}

func (s *SourceConfig) GetSourceTypeConfigPropertyFinder() *SourceTypeConfigPropertyFinder {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPropertyFinder
}

func (s *SourceConfig) GetSourceTypeConfigShopify() *SourceTypeConfigShopify {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigShopify
}

func (s *SourceConfig) GetSourceTypeConfigTwilio() *SourceTypeConfigTwilio {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTwilio
}

func (s *SourceConfig) GetSourceTypeConfigGitHub() *SourceTypeConfigGitHub {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigGitHub
}

func (s *SourceConfig) GetSourceTypeConfigPostmark() *SourceTypeConfigPostmark {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPostmark
}

func (s *SourceConfig) GetSourceTypeConfigTypeform() *SourceTypeConfigTypeform {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTypeform
}

func (s *SourceConfig) GetSourceTypeConfigXero() *SourceTypeConfigXero {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigXero
}

func (s *SourceConfig) GetSourceTypeConfigSvix() *SourceTypeConfigSvix {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSvix
}

func (s *SourceConfig) GetSourceTypeConfigAdyen() *SourceTypeConfigAdyen {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigAdyen
}

func (s *SourceConfig) GetSourceTypeConfigAkeneo() *SourceTypeConfigAkeneo {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigAkeneo
}

func (s *SourceConfig) GetSourceTypeConfigGitLab() *SourceTypeConfigGitLab {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigGitLab
}

func (s *SourceConfig) GetSourceTypeConfigWooCommerce() *SourceTypeConfigWooCommerce {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWooCommerce
}

func (s *SourceConfig) GetSourceTypeConfigOura() *SourceTypeConfigOura {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigOura
}

func (s *SourceConfig) GetSourceTypeConfigCommerceLayer() *SourceTypeConfigCommerceLayer {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigCommerceLayer
}

func (s *SourceConfig) GetSourceTypeConfigHubspot() *SourceTypeConfigHubspot {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHubspot
}

func (s *SourceConfig) GetSourceTypeConfigMailgun() *SourceTypeConfigMailgun {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigMailgun
}

func (s *SourceConfig) GetSourceTypeConfigPersona() *SourceTypeConfigPersona {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPersona
}

func (s *SourceConfig) GetSourceTypeConfigPipedrive() *SourceTypeConfigPipedrive {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPipedrive
}

func (s *SourceConfig) GetSourceTypeConfigSendgrid() *SourceTypeConfigSendgrid {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSendgrid
}

func (s *SourceConfig) GetSourceTypeConfigWorkOs() *SourceTypeConfigWorkOs {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWorkOs
}

func (s *SourceConfig) GetSourceTypeConfigSynctera() *SourceTypeConfigSynctera {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSynctera
}

func (s *SourceConfig) GetSourceTypeConfigAwssns() *SourceTypeConfigAwssns {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigAwssns
}

func (s *SourceConfig) GetSourceTypeConfig3DEye() *SourceTypeConfig3DEye {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfig3DEye
}

func (s *SourceConfig) GetSourceTypeConfigTwitch() *SourceTypeConfigTwitch {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTwitch
}

func (s *SourceConfig) GetSourceTypeConfigEnode() *SourceTypeConfigEnode {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigEnode
}

func (s *SourceConfig) GetSourceTypeConfigFavro() *SourceTypeConfigFavro {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigFavro
}

func (s *SourceConfig) GetSourceTypeConfigLinear() *SourceTypeConfigLinear {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigLinear
}

func (s *SourceConfig) GetSourceTypeConfigShopline() *SourceTypeConfigShopline {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigShopline
}

func (s *SourceConfig) GetSourceTypeConfigWix() *SourceTypeConfigWix {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWix
}

func (s *SourceConfig) GetSourceTypeConfigNmiPaymentGateway() *SourceTypeConfigNmiPaymentGateway {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigNmiPaymentGateway
}

func (s *SourceConfig) GetSourceTypeConfigOrb() *SourceTypeConfigOrb {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigOrb
}

func (s *SourceConfig) GetSourceTypeConfigPylon() *SourceTypeConfigPylon {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPylon
}

func (s *SourceConfig) GetSourceTypeConfigRazorpay() *SourceTypeConfigRazorpay {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigRazorpay
}

func (s *SourceConfig) GetSourceTypeConfigRepay() *SourceTypeConfigRepay {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigRepay
}

func (s *SourceConfig) GetSourceTypeConfigSquare() *SourceTypeConfigSquare {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSquare
}

func (s *SourceConfig) GetSourceTypeConfigSolidgate() *SourceTypeConfigSolidgate {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSolidgate
}

func (s *SourceConfig) GetSourceTypeConfigTrello() *SourceTypeConfigTrello {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTrello
}

func (s *SourceConfig) GetSourceTypeConfigEbay() *SourceTypeConfigEbay {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigEbay
}

func (s *SourceConfig) GetSourceTypeConfigTelnyx() *SourceTypeConfigTelnyx {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTelnyx
}

func (s *SourceConfig) GetSourceTypeConfigDiscord() *SourceTypeConfigDiscord {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigDiscord
}

func (s *SourceConfig) GetSourceTypeConfigTokenIo() *SourceTypeConfigTokenIo {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTokenIo
}

func (s *SourceConfig) GetSourceTypeConfigFiserv() *SourceTypeConfigFiserv {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigFiserv
}

func (s *SourceConfig) GetSourceTypeConfigBondsmith() *SourceTypeConfigBondsmith {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigBondsmith
}

func (s *SourceConfig) GetSourceTypeConfigVercelLogDrains() *SourceTypeConfigVercelLogDrains {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigVercelLogDrains
}

func (s *SourceConfig) GetSourceTypeConfigVercelWebhooks() *SourceTypeConfigVercelWebhooks {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigVercelWebhooks
}

func (s *SourceConfig) GetSourceTypeConfigTebex() *SourceTypeConfigTebex {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTebex
}

func (s *SourceConfig) GetSourceTypeConfigSlack() *SourceTypeConfigSlack {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSlack
}

func (s *SourceConfig) GetSourceTypeConfigMailchimp() *SourceTypeConfigMailchimp {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigMailchimp
}

func (s *SourceConfig) GetSourceTypeConfigPaddle() *SourceTypeConfigPaddle {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPaddle
}

func (s *SourceConfig) GetSourceTypeConfigPaypal() *SourceTypeConfigPaypal {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPaypal
}

func (s *SourceConfig) GetSourceTypeConfigTreezor() *SourceTypeConfigTreezor {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTreezor
}

func (s *SourceConfig) GetSourceTypeConfigPraxis() *SourceTypeConfigPraxis {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPraxis
}

func (s *SourceConfig) GetSourceTypeConfigCustomerIo() *SourceTypeConfigCustomerIo {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigCustomerIo
}

func (s *SourceConfig) GetSourceTypeConfigFacebook() *SourceTypeConfigFacebook {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigFacebook
}

func (s *SourceConfig) GetSourceTypeConfigWhatsApp() *SourceTypeConfigWhatsApp {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWhatsApp
}

func (s *SourceConfig) GetSourceTypeConfigReplicate() *SourceTypeConfigReplicate {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigReplicate
}

func (s *SourceConfig) GetSourceTypeConfigTikTok() *SourceTypeConfigTikTok {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTikTok
}

func (s *SourceConfig) GetSourceTypeConfigAirwallex() *SourceTypeConfigAirwallex {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigAirwallex
}

func (s *SourceConfig) GetSourceTypeConfigZendesk() *SourceTypeConfigZendesk {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigZendesk
}

func (s *SourceConfig) GetSourceTypeConfigUpollo() *SourceTypeConfigUpollo {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigUpollo
}

func (s *SourceConfig) GetSourceTypeConfigLinkedIn() *SourceTypeConfigLinkedIn {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigLinkedIn
}

func (s *SourceConfig) UnmarshalJSON(data []byte) error {
	valueSourceTypeConfigWebhook := new(SourceTypeConfigWebhook)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWebhook); err == nil {
		s.typ = "SourceTypeConfigWebhook"
		s.SourceTypeConfigWebhook = valueSourceTypeConfigWebhook
		return nil
	}
	valueSourceTypeConfigHttp := new(SourceTypeConfigHttp)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHttp); err == nil {
		s.typ = "SourceTypeConfigHttp"
		s.SourceTypeConfigHttp = valueSourceTypeConfigHttp
		return nil
	}
	valueSourceTypeConfigManaged := new(SourceTypeConfigManaged)
	if err := json.Unmarshal(data, &valueSourceTypeConfigManaged); err == nil {
		s.typ = "SourceTypeConfigManaged"
		s.SourceTypeConfigManaged = valueSourceTypeConfigManaged
		return nil
	}
	valueSourceTypeConfigSanity := new(SourceTypeConfigSanity)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSanity); err == nil {
		s.typ = "SourceTypeConfigSanity"
		s.SourceTypeConfigSanity = valueSourceTypeConfigSanity
		return nil
	}
	valueSourceTypeConfigBridge := new(SourceTypeConfigBridge)
	if err := json.Unmarshal(data, &valueSourceTypeConfigBridge); err == nil {
		s.typ = "SourceTypeConfigBridge"
		s.SourceTypeConfigBridge = valueSourceTypeConfigBridge
		return nil
	}
	valueSourceTypeConfigCloudSignal := new(SourceTypeConfigCloudSignal)
	if err := json.Unmarshal(data, &valueSourceTypeConfigCloudSignal); err == nil {
		s.typ = "SourceTypeConfigCloudSignal"
		s.SourceTypeConfigCloudSignal = valueSourceTypeConfigCloudSignal
		return nil
	}
	valueSourceTypeConfigCourier := new(SourceTypeConfigCourier)
	if err := json.Unmarshal(data, &valueSourceTypeConfigCourier); err == nil {
		s.typ = "SourceTypeConfigCourier"
		s.SourceTypeConfigCourier = valueSourceTypeConfigCourier
		return nil
	}
	valueSourceTypeConfigFrontApp := new(SourceTypeConfigFrontApp)
	if err := json.Unmarshal(data, &valueSourceTypeConfigFrontApp); err == nil {
		s.typ = "SourceTypeConfigFrontApp"
		s.SourceTypeConfigFrontApp = valueSourceTypeConfigFrontApp
		return nil
	}
	valueSourceTypeConfigZoom := new(SourceTypeConfigZoom)
	if err := json.Unmarshal(data, &valueSourceTypeConfigZoom); err == nil {
		s.typ = "SourceTypeConfigZoom"
		s.SourceTypeConfigZoom = valueSourceTypeConfigZoom
		return nil
	}
	valueSourceTypeConfigTwitter := new(SourceTypeConfigTwitter)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTwitter); err == nil {
		s.typ = "SourceTypeConfigTwitter"
		s.SourceTypeConfigTwitter = valueSourceTypeConfigTwitter
		return nil
	}
	valueSourceTypeConfigRecharge := new(SourceTypeConfigRecharge)
	if err := json.Unmarshal(data, &valueSourceTypeConfigRecharge); err == nil {
		s.typ = "SourceTypeConfigRecharge"
		s.SourceTypeConfigRecharge = valueSourceTypeConfigRecharge
		return nil
	}
	valueSourceTypeConfigStripe := new(SourceTypeConfigStripe)
	if err := json.Unmarshal(data, &valueSourceTypeConfigStripe); err == nil {
		s.typ = "SourceTypeConfigStripe"
		s.SourceTypeConfigStripe = valueSourceTypeConfigStripe
		return nil
	}
	valueSourceTypeConfigPropertyFinder := new(SourceTypeConfigPropertyFinder)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPropertyFinder); err == nil {
		s.typ = "SourceTypeConfigPropertyFinder"
		s.SourceTypeConfigPropertyFinder = valueSourceTypeConfigPropertyFinder
		return nil
	}
	valueSourceTypeConfigShopify := new(SourceTypeConfigShopify)
	if err := json.Unmarshal(data, &valueSourceTypeConfigShopify); err == nil {
		s.typ = "SourceTypeConfigShopify"
		s.SourceTypeConfigShopify = valueSourceTypeConfigShopify
		return nil
	}
	valueSourceTypeConfigTwilio := new(SourceTypeConfigTwilio)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTwilio); err == nil {
		s.typ = "SourceTypeConfigTwilio"
		s.SourceTypeConfigTwilio = valueSourceTypeConfigTwilio
		return nil
	}
	valueSourceTypeConfigGitHub := new(SourceTypeConfigGitHub)
	if err := json.Unmarshal(data, &valueSourceTypeConfigGitHub); err == nil {
		s.typ = "SourceTypeConfigGitHub"
		s.SourceTypeConfigGitHub = valueSourceTypeConfigGitHub
		return nil
	}
	valueSourceTypeConfigPostmark := new(SourceTypeConfigPostmark)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPostmark); err == nil {
		s.typ = "SourceTypeConfigPostmark"
		s.SourceTypeConfigPostmark = valueSourceTypeConfigPostmark
		return nil
	}
	valueSourceTypeConfigTypeform := new(SourceTypeConfigTypeform)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTypeform); err == nil {
		s.typ = "SourceTypeConfigTypeform"
		s.SourceTypeConfigTypeform = valueSourceTypeConfigTypeform
		return nil
	}
	valueSourceTypeConfigXero := new(SourceTypeConfigXero)
	if err := json.Unmarshal(data, &valueSourceTypeConfigXero); err == nil {
		s.typ = "SourceTypeConfigXero"
		s.SourceTypeConfigXero = valueSourceTypeConfigXero
		return nil
	}
	valueSourceTypeConfigSvix := new(SourceTypeConfigSvix)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSvix); err == nil {
		s.typ = "SourceTypeConfigSvix"
		s.SourceTypeConfigSvix = valueSourceTypeConfigSvix
		return nil
	}
	valueSourceTypeConfigAdyen := new(SourceTypeConfigAdyen)
	if err := json.Unmarshal(data, &valueSourceTypeConfigAdyen); err == nil {
		s.typ = "SourceTypeConfigAdyen"
		s.SourceTypeConfigAdyen = valueSourceTypeConfigAdyen
		return nil
	}
	valueSourceTypeConfigAkeneo := new(SourceTypeConfigAkeneo)
	if err := json.Unmarshal(data, &valueSourceTypeConfigAkeneo); err == nil {
		s.typ = "SourceTypeConfigAkeneo"
		s.SourceTypeConfigAkeneo = valueSourceTypeConfigAkeneo
		return nil
	}
	valueSourceTypeConfigGitLab := new(SourceTypeConfigGitLab)
	if err := json.Unmarshal(data, &valueSourceTypeConfigGitLab); err == nil {
		s.typ = "SourceTypeConfigGitLab"
		s.SourceTypeConfigGitLab = valueSourceTypeConfigGitLab
		return nil
	}
	valueSourceTypeConfigWooCommerce := new(SourceTypeConfigWooCommerce)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWooCommerce); err == nil {
		s.typ = "SourceTypeConfigWooCommerce"
		s.SourceTypeConfigWooCommerce = valueSourceTypeConfigWooCommerce
		return nil
	}
	valueSourceTypeConfigOura := new(SourceTypeConfigOura)
	if err := json.Unmarshal(data, &valueSourceTypeConfigOura); err == nil {
		s.typ = "SourceTypeConfigOura"
		s.SourceTypeConfigOura = valueSourceTypeConfigOura
		return nil
	}
	valueSourceTypeConfigCommerceLayer := new(SourceTypeConfigCommerceLayer)
	if err := json.Unmarshal(data, &valueSourceTypeConfigCommerceLayer); err == nil {
		s.typ = "SourceTypeConfigCommerceLayer"
		s.SourceTypeConfigCommerceLayer = valueSourceTypeConfigCommerceLayer
		return nil
	}
	valueSourceTypeConfigHubspot := new(SourceTypeConfigHubspot)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHubspot); err == nil {
		s.typ = "SourceTypeConfigHubspot"
		s.SourceTypeConfigHubspot = valueSourceTypeConfigHubspot
		return nil
	}
	valueSourceTypeConfigMailgun := new(SourceTypeConfigMailgun)
	if err := json.Unmarshal(data, &valueSourceTypeConfigMailgun); err == nil {
		s.typ = "SourceTypeConfigMailgun"
		s.SourceTypeConfigMailgun = valueSourceTypeConfigMailgun
		return nil
	}
	valueSourceTypeConfigPersona := new(SourceTypeConfigPersona)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPersona); err == nil {
		s.typ = "SourceTypeConfigPersona"
		s.SourceTypeConfigPersona = valueSourceTypeConfigPersona
		return nil
	}
	valueSourceTypeConfigPipedrive := new(SourceTypeConfigPipedrive)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPipedrive); err == nil {
		s.typ = "SourceTypeConfigPipedrive"
		s.SourceTypeConfigPipedrive = valueSourceTypeConfigPipedrive
		return nil
	}
	valueSourceTypeConfigSendgrid := new(SourceTypeConfigSendgrid)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSendgrid); err == nil {
		s.typ = "SourceTypeConfigSendgrid"
		s.SourceTypeConfigSendgrid = valueSourceTypeConfigSendgrid
		return nil
	}
	valueSourceTypeConfigWorkOs := new(SourceTypeConfigWorkOs)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWorkOs); err == nil {
		s.typ = "SourceTypeConfigWorkOs"
		s.SourceTypeConfigWorkOs = valueSourceTypeConfigWorkOs
		return nil
	}
	valueSourceTypeConfigSynctera := new(SourceTypeConfigSynctera)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSynctera); err == nil {
		s.typ = "SourceTypeConfigSynctera"
		s.SourceTypeConfigSynctera = valueSourceTypeConfigSynctera
		return nil
	}
	valueSourceTypeConfigAwssns := new(SourceTypeConfigAwssns)
	if err := json.Unmarshal(data, &valueSourceTypeConfigAwssns); err == nil {
		s.typ = "SourceTypeConfigAwssns"
		s.SourceTypeConfigAwssns = valueSourceTypeConfigAwssns
		return nil
	}
	valueSourceTypeConfig3DEye := new(SourceTypeConfig3DEye)
	if err := json.Unmarshal(data, &valueSourceTypeConfig3DEye); err == nil {
		s.typ = "SourceTypeConfig3DEye"
		s.SourceTypeConfig3DEye = valueSourceTypeConfig3DEye
		return nil
	}
	valueSourceTypeConfigTwitch := new(SourceTypeConfigTwitch)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTwitch); err == nil {
		s.typ = "SourceTypeConfigTwitch"
		s.SourceTypeConfigTwitch = valueSourceTypeConfigTwitch
		return nil
	}
	valueSourceTypeConfigEnode := new(SourceTypeConfigEnode)
	if err := json.Unmarshal(data, &valueSourceTypeConfigEnode); err == nil {
		s.typ = "SourceTypeConfigEnode"
		s.SourceTypeConfigEnode = valueSourceTypeConfigEnode
		return nil
	}
	valueSourceTypeConfigFavro := new(SourceTypeConfigFavro)
	if err := json.Unmarshal(data, &valueSourceTypeConfigFavro); err == nil {
		s.typ = "SourceTypeConfigFavro"
		s.SourceTypeConfigFavro = valueSourceTypeConfigFavro
		return nil
	}
	valueSourceTypeConfigLinear := new(SourceTypeConfigLinear)
	if err := json.Unmarshal(data, &valueSourceTypeConfigLinear); err == nil {
		s.typ = "SourceTypeConfigLinear"
		s.SourceTypeConfigLinear = valueSourceTypeConfigLinear
		return nil
	}
	valueSourceTypeConfigShopline := new(SourceTypeConfigShopline)
	if err := json.Unmarshal(data, &valueSourceTypeConfigShopline); err == nil {
		s.typ = "SourceTypeConfigShopline"
		s.SourceTypeConfigShopline = valueSourceTypeConfigShopline
		return nil
	}
	valueSourceTypeConfigWix := new(SourceTypeConfigWix)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWix); err == nil {
		s.typ = "SourceTypeConfigWix"
		s.SourceTypeConfigWix = valueSourceTypeConfigWix
		return nil
	}
	valueSourceTypeConfigNmiPaymentGateway := new(SourceTypeConfigNmiPaymentGateway)
	if err := json.Unmarshal(data, &valueSourceTypeConfigNmiPaymentGateway); err == nil {
		s.typ = "SourceTypeConfigNmiPaymentGateway"
		s.SourceTypeConfigNmiPaymentGateway = valueSourceTypeConfigNmiPaymentGateway
		return nil
	}
	valueSourceTypeConfigOrb := new(SourceTypeConfigOrb)
	if err := json.Unmarshal(data, &valueSourceTypeConfigOrb); err == nil {
		s.typ = "SourceTypeConfigOrb"
		s.SourceTypeConfigOrb = valueSourceTypeConfigOrb
		return nil
	}
	valueSourceTypeConfigPylon := new(SourceTypeConfigPylon)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPylon); err == nil {
		s.typ = "SourceTypeConfigPylon"
		s.SourceTypeConfigPylon = valueSourceTypeConfigPylon
		return nil
	}
	valueSourceTypeConfigRazorpay := new(SourceTypeConfigRazorpay)
	if err := json.Unmarshal(data, &valueSourceTypeConfigRazorpay); err == nil {
		s.typ = "SourceTypeConfigRazorpay"
		s.SourceTypeConfigRazorpay = valueSourceTypeConfigRazorpay
		return nil
	}
	valueSourceTypeConfigRepay := new(SourceTypeConfigRepay)
	if err := json.Unmarshal(data, &valueSourceTypeConfigRepay); err == nil {
		s.typ = "SourceTypeConfigRepay"
		s.SourceTypeConfigRepay = valueSourceTypeConfigRepay
		return nil
	}
	valueSourceTypeConfigSquare := new(SourceTypeConfigSquare)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSquare); err == nil {
		s.typ = "SourceTypeConfigSquare"
		s.SourceTypeConfigSquare = valueSourceTypeConfigSquare
		return nil
	}
	valueSourceTypeConfigSolidgate := new(SourceTypeConfigSolidgate)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSolidgate); err == nil {
		s.typ = "SourceTypeConfigSolidgate"
		s.SourceTypeConfigSolidgate = valueSourceTypeConfigSolidgate
		return nil
	}
	valueSourceTypeConfigTrello := new(SourceTypeConfigTrello)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTrello); err == nil {
		s.typ = "SourceTypeConfigTrello"
		s.SourceTypeConfigTrello = valueSourceTypeConfigTrello
		return nil
	}
	valueSourceTypeConfigEbay := new(SourceTypeConfigEbay)
	if err := json.Unmarshal(data, &valueSourceTypeConfigEbay); err == nil {
		s.typ = "SourceTypeConfigEbay"
		s.SourceTypeConfigEbay = valueSourceTypeConfigEbay
		return nil
	}
	valueSourceTypeConfigTelnyx := new(SourceTypeConfigTelnyx)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTelnyx); err == nil {
		s.typ = "SourceTypeConfigTelnyx"
		s.SourceTypeConfigTelnyx = valueSourceTypeConfigTelnyx
		return nil
	}
	valueSourceTypeConfigDiscord := new(SourceTypeConfigDiscord)
	if err := json.Unmarshal(data, &valueSourceTypeConfigDiscord); err == nil {
		s.typ = "SourceTypeConfigDiscord"
		s.SourceTypeConfigDiscord = valueSourceTypeConfigDiscord
		return nil
	}
	valueSourceTypeConfigTokenIo := new(SourceTypeConfigTokenIo)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTokenIo); err == nil {
		s.typ = "SourceTypeConfigTokenIo"
		s.SourceTypeConfigTokenIo = valueSourceTypeConfigTokenIo
		return nil
	}
	valueSourceTypeConfigFiserv := new(SourceTypeConfigFiserv)
	if err := json.Unmarshal(data, &valueSourceTypeConfigFiserv); err == nil {
		s.typ = "SourceTypeConfigFiserv"
		s.SourceTypeConfigFiserv = valueSourceTypeConfigFiserv
		return nil
	}
	valueSourceTypeConfigBondsmith := new(SourceTypeConfigBondsmith)
	if err := json.Unmarshal(data, &valueSourceTypeConfigBondsmith); err == nil {
		s.typ = "SourceTypeConfigBondsmith"
		s.SourceTypeConfigBondsmith = valueSourceTypeConfigBondsmith
		return nil
	}
	valueSourceTypeConfigVercelLogDrains := new(SourceTypeConfigVercelLogDrains)
	if err := json.Unmarshal(data, &valueSourceTypeConfigVercelLogDrains); err == nil {
		s.typ = "SourceTypeConfigVercelLogDrains"
		s.SourceTypeConfigVercelLogDrains = valueSourceTypeConfigVercelLogDrains
		return nil
	}
	valueSourceTypeConfigVercelWebhooks := new(SourceTypeConfigVercelWebhooks)
	if err := json.Unmarshal(data, &valueSourceTypeConfigVercelWebhooks); err == nil {
		s.typ = "SourceTypeConfigVercelWebhooks"
		s.SourceTypeConfigVercelWebhooks = valueSourceTypeConfigVercelWebhooks
		return nil
	}
	valueSourceTypeConfigTebex := new(SourceTypeConfigTebex)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTebex); err == nil {
		s.typ = "SourceTypeConfigTebex"
		s.SourceTypeConfigTebex = valueSourceTypeConfigTebex
		return nil
	}
	valueSourceTypeConfigSlack := new(SourceTypeConfigSlack)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSlack); err == nil {
		s.typ = "SourceTypeConfigSlack"
		s.SourceTypeConfigSlack = valueSourceTypeConfigSlack
		return nil
	}
	valueSourceTypeConfigMailchimp := new(SourceTypeConfigMailchimp)
	if err := json.Unmarshal(data, &valueSourceTypeConfigMailchimp); err == nil {
		s.typ = "SourceTypeConfigMailchimp"
		s.SourceTypeConfigMailchimp = valueSourceTypeConfigMailchimp
		return nil
	}
	valueSourceTypeConfigPaddle := new(SourceTypeConfigPaddle)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPaddle); err == nil {
		s.typ = "SourceTypeConfigPaddle"
		s.SourceTypeConfigPaddle = valueSourceTypeConfigPaddle
		return nil
	}
	valueSourceTypeConfigPaypal := new(SourceTypeConfigPaypal)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPaypal); err == nil {
		s.typ = "SourceTypeConfigPaypal"
		s.SourceTypeConfigPaypal = valueSourceTypeConfigPaypal
		return nil
	}
	valueSourceTypeConfigTreezor := new(SourceTypeConfigTreezor)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTreezor); err == nil {
		s.typ = "SourceTypeConfigTreezor"
		s.SourceTypeConfigTreezor = valueSourceTypeConfigTreezor
		return nil
	}
	valueSourceTypeConfigPraxis := new(SourceTypeConfigPraxis)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPraxis); err == nil {
		s.typ = "SourceTypeConfigPraxis"
		s.SourceTypeConfigPraxis = valueSourceTypeConfigPraxis
		return nil
	}
	valueSourceTypeConfigCustomerIo := new(SourceTypeConfigCustomerIo)
	if err := json.Unmarshal(data, &valueSourceTypeConfigCustomerIo); err == nil {
		s.typ = "SourceTypeConfigCustomerIo"
		s.SourceTypeConfigCustomerIo = valueSourceTypeConfigCustomerIo
		return nil
	}
	valueSourceTypeConfigFacebook := new(SourceTypeConfigFacebook)
	if err := json.Unmarshal(data, &valueSourceTypeConfigFacebook); err == nil {
		s.typ = "SourceTypeConfigFacebook"
		s.SourceTypeConfigFacebook = valueSourceTypeConfigFacebook
		return nil
	}
	valueSourceTypeConfigWhatsApp := new(SourceTypeConfigWhatsApp)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWhatsApp); err == nil {
		s.typ = "SourceTypeConfigWhatsApp"
		s.SourceTypeConfigWhatsApp = valueSourceTypeConfigWhatsApp
		return nil
	}
	valueSourceTypeConfigReplicate := new(SourceTypeConfigReplicate)
	if err := json.Unmarshal(data, &valueSourceTypeConfigReplicate); err == nil {
		s.typ = "SourceTypeConfigReplicate"
		s.SourceTypeConfigReplicate = valueSourceTypeConfigReplicate
		return nil
	}
	valueSourceTypeConfigTikTok := new(SourceTypeConfigTikTok)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTikTok); err == nil {
		s.typ = "SourceTypeConfigTikTok"
		s.SourceTypeConfigTikTok = valueSourceTypeConfigTikTok
		return nil
	}
	valueSourceTypeConfigAirwallex := new(SourceTypeConfigAirwallex)
	if err := json.Unmarshal(data, &valueSourceTypeConfigAirwallex); err == nil {
		s.typ = "SourceTypeConfigAirwallex"
		s.SourceTypeConfigAirwallex = valueSourceTypeConfigAirwallex
		return nil
	}
	valueSourceTypeConfigZendesk := new(SourceTypeConfigZendesk)
	if err := json.Unmarshal(data, &valueSourceTypeConfigZendesk); err == nil {
		s.typ = "SourceTypeConfigZendesk"
		s.SourceTypeConfigZendesk = valueSourceTypeConfigZendesk
		return nil
	}
	valueSourceTypeConfigUpollo := new(SourceTypeConfigUpollo)
	if err := json.Unmarshal(data, &valueSourceTypeConfigUpollo); err == nil {
		s.typ = "SourceTypeConfigUpollo"
		s.SourceTypeConfigUpollo = valueSourceTypeConfigUpollo
		return nil
	}
	valueSourceTypeConfigLinkedIn := new(SourceTypeConfigLinkedIn)
	if err := json.Unmarshal(data, &valueSourceTypeConfigLinkedIn); err == nil {
		s.typ = "SourceTypeConfigLinkedIn"
		s.SourceTypeConfigLinkedIn = valueSourceTypeConfigLinkedIn
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SourceConfig) MarshalJSON() ([]byte, error) {
	if s.typ == "SourceTypeConfigWebhook" || s.SourceTypeConfigWebhook != nil {
		return json.Marshal(s.SourceTypeConfigWebhook)
	}
	if s.typ == "SourceTypeConfigHttp" || s.SourceTypeConfigHttp != nil {
		return json.Marshal(s.SourceTypeConfigHttp)
	}
	if s.typ == "SourceTypeConfigManaged" || s.SourceTypeConfigManaged != nil {
		return json.Marshal(s.SourceTypeConfigManaged)
	}
	if s.typ == "SourceTypeConfigSanity" || s.SourceTypeConfigSanity != nil {
		return json.Marshal(s.SourceTypeConfigSanity)
	}
	if s.typ == "SourceTypeConfigBridge" || s.SourceTypeConfigBridge != nil {
		return json.Marshal(s.SourceTypeConfigBridge)
	}
	if s.typ == "SourceTypeConfigCloudSignal" || s.SourceTypeConfigCloudSignal != nil {
		return json.Marshal(s.SourceTypeConfigCloudSignal)
	}
	if s.typ == "SourceTypeConfigCourier" || s.SourceTypeConfigCourier != nil {
		return json.Marshal(s.SourceTypeConfigCourier)
	}
	if s.typ == "SourceTypeConfigFrontApp" || s.SourceTypeConfigFrontApp != nil {
		return json.Marshal(s.SourceTypeConfigFrontApp)
	}
	if s.typ == "SourceTypeConfigZoom" || s.SourceTypeConfigZoom != nil {
		return json.Marshal(s.SourceTypeConfigZoom)
	}
	if s.typ == "SourceTypeConfigTwitter" || s.SourceTypeConfigTwitter != nil {
		return json.Marshal(s.SourceTypeConfigTwitter)
	}
	if s.typ == "SourceTypeConfigRecharge" || s.SourceTypeConfigRecharge != nil {
		return json.Marshal(s.SourceTypeConfigRecharge)
	}
	if s.typ == "SourceTypeConfigStripe" || s.SourceTypeConfigStripe != nil {
		return json.Marshal(s.SourceTypeConfigStripe)
	}
	if s.typ == "SourceTypeConfigPropertyFinder" || s.SourceTypeConfigPropertyFinder != nil {
		return json.Marshal(s.SourceTypeConfigPropertyFinder)
	}
	if s.typ == "SourceTypeConfigShopify" || s.SourceTypeConfigShopify != nil {
		return json.Marshal(s.SourceTypeConfigShopify)
	}
	if s.typ == "SourceTypeConfigTwilio" || s.SourceTypeConfigTwilio != nil {
		return json.Marshal(s.SourceTypeConfigTwilio)
	}
	if s.typ == "SourceTypeConfigGitHub" || s.SourceTypeConfigGitHub != nil {
		return json.Marshal(s.SourceTypeConfigGitHub)
	}
	if s.typ == "SourceTypeConfigPostmark" || s.SourceTypeConfigPostmark != nil {
		return json.Marshal(s.SourceTypeConfigPostmark)
	}
	if s.typ == "SourceTypeConfigTypeform" || s.SourceTypeConfigTypeform != nil {
		return json.Marshal(s.SourceTypeConfigTypeform)
	}
	if s.typ == "SourceTypeConfigXero" || s.SourceTypeConfigXero != nil {
		return json.Marshal(s.SourceTypeConfigXero)
	}
	if s.typ == "SourceTypeConfigSvix" || s.SourceTypeConfigSvix != nil {
		return json.Marshal(s.SourceTypeConfigSvix)
	}
	if s.typ == "SourceTypeConfigAdyen" || s.SourceTypeConfigAdyen != nil {
		return json.Marshal(s.SourceTypeConfigAdyen)
	}
	if s.typ == "SourceTypeConfigAkeneo" || s.SourceTypeConfigAkeneo != nil {
		return json.Marshal(s.SourceTypeConfigAkeneo)
	}
	if s.typ == "SourceTypeConfigGitLab" || s.SourceTypeConfigGitLab != nil {
		return json.Marshal(s.SourceTypeConfigGitLab)
	}
	if s.typ == "SourceTypeConfigWooCommerce" || s.SourceTypeConfigWooCommerce != nil {
		return json.Marshal(s.SourceTypeConfigWooCommerce)
	}
	if s.typ == "SourceTypeConfigOura" || s.SourceTypeConfigOura != nil {
		return json.Marshal(s.SourceTypeConfigOura)
	}
	if s.typ == "SourceTypeConfigCommerceLayer" || s.SourceTypeConfigCommerceLayer != nil {
		return json.Marshal(s.SourceTypeConfigCommerceLayer)
	}
	if s.typ == "SourceTypeConfigHubspot" || s.SourceTypeConfigHubspot != nil {
		return json.Marshal(s.SourceTypeConfigHubspot)
	}
	if s.typ == "SourceTypeConfigMailgun" || s.SourceTypeConfigMailgun != nil {
		return json.Marshal(s.SourceTypeConfigMailgun)
	}
	if s.typ == "SourceTypeConfigPersona" || s.SourceTypeConfigPersona != nil {
		return json.Marshal(s.SourceTypeConfigPersona)
	}
	if s.typ == "SourceTypeConfigPipedrive" || s.SourceTypeConfigPipedrive != nil {
		return json.Marshal(s.SourceTypeConfigPipedrive)
	}
	if s.typ == "SourceTypeConfigSendgrid" || s.SourceTypeConfigSendgrid != nil {
		return json.Marshal(s.SourceTypeConfigSendgrid)
	}
	if s.typ == "SourceTypeConfigWorkOs" || s.SourceTypeConfigWorkOs != nil {
		return json.Marshal(s.SourceTypeConfigWorkOs)
	}
	if s.typ == "SourceTypeConfigSynctera" || s.SourceTypeConfigSynctera != nil {
		return json.Marshal(s.SourceTypeConfigSynctera)
	}
	if s.typ == "SourceTypeConfigAwssns" || s.SourceTypeConfigAwssns != nil {
		return json.Marshal(s.SourceTypeConfigAwssns)
	}
	if s.typ == "SourceTypeConfig3DEye" || s.SourceTypeConfig3DEye != nil {
		return json.Marshal(s.SourceTypeConfig3DEye)
	}
	if s.typ == "SourceTypeConfigTwitch" || s.SourceTypeConfigTwitch != nil {
		return json.Marshal(s.SourceTypeConfigTwitch)
	}
	if s.typ == "SourceTypeConfigEnode" || s.SourceTypeConfigEnode != nil {
		return json.Marshal(s.SourceTypeConfigEnode)
	}
	if s.typ == "SourceTypeConfigFavro" || s.SourceTypeConfigFavro != nil {
		return json.Marshal(s.SourceTypeConfigFavro)
	}
	if s.typ == "SourceTypeConfigLinear" || s.SourceTypeConfigLinear != nil {
		return json.Marshal(s.SourceTypeConfigLinear)
	}
	if s.typ == "SourceTypeConfigShopline" || s.SourceTypeConfigShopline != nil {
		return json.Marshal(s.SourceTypeConfigShopline)
	}
	if s.typ == "SourceTypeConfigWix" || s.SourceTypeConfigWix != nil {
		return json.Marshal(s.SourceTypeConfigWix)
	}
	if s.typ == "SourceTypeConfigNmiPaymentGateway" || s.SourceTypeConfigNmiPaymentGateway != nil {
		return json.Marshal(s.SourceTypeConfigNmiPaymentGateway)
	}
	if s.typ == "SourceTypeConfigOrb" || s.SourceTypeConfigOrb != nil {
		return json.Marshal(s.SourceTypeConfigOrb)
	}
	if s.typ == "SourceTypeConfigPylon" || s.SourceTypeConfigPylon != nil {
		return json.Marshal(s.SourceTypeConfigPylon)
	}
	if s.typ == "SourceTypeConfigRazorpay" || s.SourceTypeConfigRazorpay != nil {
		return json.Marshal(s.SourceTypeConfigRazorpay)
	}
	if s.typ == "SourceTypeConfigRepay" || s.SourceTypeConfigRepay != nil {
		return json.Marshal(s.SourceTypeConfigRepay)
	}
	if s.typ == "SourceTypeConfigSquare" || s.SourceTypeConfigSquare != nil {
		return json.Marshal(s.SourceTypeConfigSquare)
	}
	if s.typ == "SourceTypeConfigSolidgate" || s.SourceTypeConfigSolidgate != nil {
		return json.Marshal(s.SourceTypeConfigSolidgate)
	}
	if s.typ == "SourceTypeConfigTrello" || s.SourceTypeConfigTrello != nil {
		return json.Marshal(s.SourceTypeConfigTrello)
	}
	if s.typ == "SourceTypeConfigEbay" || s.SourceTypeConfigEbay != nil {
		return json.Marshal(s.SourceTypeConfigEbay)
	}
	if s.typ == "SourceTypeConfigTelnyx" || s.SourceTypeConfigTelnyx != nil {
		return json.Marshal(s.SourceTypeConfigTelnyx)
	}
	if s.typ == "SourceTypeConfigDiscord" || s.SourceTypeConfigDiscord != nil {
		return json.Marshal(s.SourceTypeConfigDiscord)
	}
	if s.typ == "SourceTypeConfigTokenIo" || s.SourceTypeConfigTokenIo != nil {
		return json.Marshal(s.SourceTypeConfigTokenIo)
	}
	if s.typ == "SourceTypeConfigFiserv" || s.SourceTypeConfigFiserv != nil {
		return json.Marshal(s.SourceTypeConfigFiserv)
	}
	if s.typ == "SourceTypeConfigBondsmith" || s.SourceTypeConfigBondsmith != nil {
		return json.Marshal(s.SourceTypeConfigBondsmith)
	}
	if s.typ == "SourceTypeConfigVercelLogDrains" || s.SourceTypeConfigVercelLogDrains != nil {
		return json.Marshal(s.SourceTypeConfigVercelLogDrains)
	}
	if s.typ == "SourceTypeConfigVercelWebhooks" || s.SourceTypeConfigVercelWebhooks != nil {
		return json.Marshal(s.SourceTypeConfigVercelWebhooks)
	}
	if s.typ == "SourceTypeConfigTebex" || s.SourceTypeConfigTebex != nil {
		return json.Marshal(s.SourceTypeConfigTebex)
	}
	if s.typ == "SourceTypeConfigSlack" || s.SourceTypeConfigSlack != nil {
		return json.Marshal(s.SourceTypeConfigSlack)
	}
	if s.typ == "SourceTypeConfigMailchimp" || s.SourceTypeConfigMailchimp != nil {
		return json.Marshal(s.SourceTypeConfigMailchimp)
	}
	if s.typ == "SourceTypeConfigPaddle" || s.SourceTypeConfigPaddle != nil {
		return json.Marshal(s.SourceTypeConfigPaddle)
	}
	if s.typ == "SourceTypeConfigPaypal" || s.SourceTypeConfigPaypal != nil {
		return json.Marshal(s.SourceTypeConfigPaypal)
	}
	if s.typ == "SourceTypeConfigTreezor" || s.SourceTypeConfigTreezor != nil {
		return json.Marshal(s.SourceTypeConfigTreezor)
	}
	if s.typ == "SourceTypeConfigPraxis" || s.SourceTypeConfigPraxis != nil {
		return json.Marshal(s.SourceTypeConfigPraxis)
	}
	if s.typ == "SourceTypeConfigCustomerIo" || s.SourceTypeConfigCustomerIo != nil {
		return json.Marshal(s.SourceTypeConfigCustomerIo)
	}
	if s.typ == "SourceTypeConfigFacebook" || s.SourceTypeConfigFacebook != nil {
		return json.Marshal(s.SourceTypeConfigFacebook)
	}
	if s.typ == "SourceTypeConfigWhatsApp" || s.SourceTypeConfigWhatsApp != nil {
		return json.Marshal(s.SourceTypeConfigWhatsApp)
	}
	if s.typ == "SourceTypeConfigReplicate" || s.SourceTypeConfigReplicate != nil {
		return json.Marshal(s.SourceTypeConfigReplicate)
	}
	if s.typ == "SourceTypeConfigTikTok" || s.SourceTypeConfigTikTok != nil {
		return json.Marshal(s.SourceTypeConfigTikTok)
	}
	if s.typ == "SourceTypeConfigAirwallex" || s.SourceTypeConfigAirwallex != nil {
		return json.Marshal(s.SourceTypeConfigAirwallex)
	}
	if s.typ == "SourceTypeConfigZendesk" || s.SourceTypeConfigZendesk != nil {
		return json.Marshal(s.SourceTypeConfigZendesk)
	}
	if s.typ == "SourceTypeConfigUpollo" || s.SourceTypeConfigUpollo != nil {
		return json.Marshal(s.SourceTypeConfigUpollo)
	}
	if s.typ == "SourceTypeConfigLinkedIn" || s.SourceTypeConfigLinkedIn != nil {
		return json.Marshal(s.SourceTypeConfigLinkedIn)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SourceConfigVisitor interface {
	VisitSourceTypeConfigWebhook(*SourceTypeConfigWebhook) error
	VisitSourceTypeConfigHttp(*SourceTypeConfigHttp) error
	VisitSourceTypeConfigManaged(*SourceTypeConfigManaged) error
	VisitSourceTypeConfigSanity(*SourceTypeConfigSanity) error
	VisitSourceTypeConfigBridge(*SourceTypeConfigBridge) error
	VisitSourceTypeConfigCloudSignal(*SourceTypeConfigCloudSignal) error
	VisitSourceTypeConfigCourier(*SourceTypeConfigCourier) error
	VisitSourceTypeConfigFrontApp(*SourceTypeConfigFrontApp) error
	VisitSourceTypeConfigZoom(*SourceTypeConfigZoom) error
	VisitSourceTypeConfigTwitter(*SourceTypeConfigTwitter) error
	VisitSourceTypeConfigRecharge(*SourceTypeConfigRecharge) error
	VisitSourceTypeConfigStripe(*SourceTypeConfigStripe) error
	VisitSourceTypeConfigPropertyFinder(*SourceTypeConfigPropertyFinder) error
	VisitSourceTypeConfigShopify(*SourceTypeConfigShopify) error
	VisitSourceTypeConfigTwilio(*SourceTypeConfigTwilio) error
	VisitSourceTypeConfigGitHub(*SourceTypeConfigGitHub) error
	VisitSourceTypeConfigPostmark(*SourceTypeConfigPostmark) error
	VisitSourceTypeConfigTypeform(*SourceTypeConfigTypeform) error
	VisitSourceTypeConfigXero(*SourceTypeConfigXero) error
	VisitSourceTypeConfigSvix(*SourceTypeConfigSvix) error
	VisitSourceTypeConfigAdyen(*SourceTypeConfigAdyen) error
	VisitSourceTypeConfigAkeneo(*SourceTypeConfigAkeneo) error
	VisitSourceTypeConfigGitLab(*SourceTypeConfigGitLab) error
	VisitSourceTypeConfigWooCommerce(*SourceTypeConfigWooCommerce) error
	VisitSourceTypeConfigOura(*SourceTypeConfigOura) error
	VisitSourceTypeConfigCommerceLayer(*SourceTypeConfigCommerceLayer) error
	VisitSourceTypeConfigHubspot(*SourceTypeConfigHubspot) error
	VisitSourceTypeConfigMailgun(*SourceTypeConfigMailgun) error
	VisitSourceTypeConfigPersona(*SourceTypeConfigPersona) error
	VisitSourceTypeConfigPipedrive(*SourceTypeConfigPipedrive) error
	VisitSourceTypeConfigSendgrid(*SourceTypeConfigSendgrid) error
	VisitSourceTypeConfigWorkOs(*SourceTypeConfigWorkOs) error
	VisitSourceTypeConfigSynctera(*SourceTypeConfigSynctera) error
	VisitSourceTypeConfigAwssns(*SourceTypeConfigAwssns) error
	VisitSourceTypeConfig3DEye(*SourceTypeConfig3DEye) error
	VisitSourceTypeConfigTwitch(*SourceTypeConfigTwitch) error
	VisitSourceTypeConfigEnode(*SourceTypeConfigEnode) error
	VisitSourceTypeConfigFavro(*SourceTypeConfigFavro) error
	VisitSourceTypeConfigLinear(*SourceTypeConfigLinear) error
	VisitSourceTypeConfigShopline(*SourceTypeConfigShopline) error
	VisitSourceTypeConfigWix(*SourceTypeConfigWix) error
	VisitSourceTypeConfigNmiPaymentGateway(*SourceTypeConfigNmiPaymentGateway) error
	VisitSourceTypeConfigOrb(*SourceTypeConfigOrb) error
	VisitSourceTypeConfigPylon(*SourceTypeConfigPylon) error
	VisitSourceTypeConfigRazorpay(*SourceTypeConfigRazorpay) error
	VisitSourceTypeConfigRepay(*SourceTypeConfigRepay) error
	VisitSourceTypeConfigSquare(*SourceTypeConfigSquare) error
	VisitSourceTypeConfigSolidgate(*SourceTypeConfigSolidgate) error
	VisitSourceTypeConfigTrello(*SourceTypeConfigTrello) error
	VisitSourceTypeConfigEbay(*SourceTypeConfigEbay) error
	VisitSourceTypeConfigTelnyx(*SourceTypeConfigTelnyx) error
	VisitSourceTypeConfigDiscord(*SourceTypeConfigDiscord) error
	VisitSourceTypeConfigTokenIo(*SourceTypeConfigTokenIo) error
	VisitSourceTypeConfigFiserv(*SourceTypeConfigFiserv) error
	VisitSourceTypeConfigBondsmith(*SourceTypeConfigBondsmith) error
	VisitSourceTypeConfigVercelLogDrains(*SourceTypeConfigVercelLogDrains) error
	VisitSourceTypeConfigVercelWebhooks(*SourceTypeConfigVercelWebhooks) error
	VisitSourceTypeConfigTebex(*SourceTypeConfigTebex) error
	VisitSourceTypeConfigSlack(*SourceTypeConfigSlack) error
	VisitSourceTypeConfigMailchimp(*SourceTypeConfigMailchimp) error
	VisitSourceTypeConfigPaddle(*SourceTypeConfigPaddle) error
	VisitSourceTypeConfigPaypal(*SourceTypeConfigPaypal) error
	VisitSourceTypeConfigTreezor(*SourceTypeConfigTreezor) error
	VisitSourceTypeConfigPraxis(*SourceTypeConfigPraxis) error
	VisitSourceTypeConfigCustomerIo(*SourceTypeConfigCustomerIo) error
	VisitSourceTypeConfigFacebook(*SourceTypeConfigFacebook) error
	VisitSourceTypeConfigWhatsApp(*SourceTypeConfigWhatsApp) error
	VisitSourceTypeConfigReplicate(*SourceTypeConfigReplicate) error
	VisitSourceTypeConfigTikTok(*SourceTypeConfigTikTok) error
	VisitSourceTypeConfigAirwallex(*SourceTypeConfigAirwallex) error
	VisitSourceTypeConfigZendesk(*SourceTypeConfigZendesk) error
	VisitSourceTypeConfigUpollo(*SourceTypeConfigUpollo) error
	VisitSourceTypeConfigLinkedIn(*SourceTypeConfigLinkedIn) error
}

func (s *SourceConfig) Accept(visitor SourceConfigVisitor) error {
	if s.typ == "SourceTypeConfigWebhook" || s.SourceTypeConfigWebhook != nil {
		return visitor.VisitSourceTypeConfigWebhook(s.SourceTypeConfigWebhook)
	}
	if s.typ == "SourceTypeConfigHttp" || s.SourceTypeConfigHttp != nil {
		return visitor.VisitSourceTypeConfigHttp(s.SourceTypeConfigHttp)
	}
	if s.typ == "SourceTypeConfigManaged" || s.SourceTypeConfigManaged != nil {
		return visitor.VisitSourceTypeConfigManaged(s.SourceTypeConfigManaged)
	}
	if s.typ == "SourceTypeConfigSanity" || s.SourceTypeConfigSanity != nil {
		return visitor.VisitSourceTypeConfigSanity(s.SourceTypeConfigSanity)
	}
	if s.typ == "SourceTypeConfigBridge" || s.SourceTypeConfigBridge != nil {
		return visitor.VisitSourceTypeConfigBridge(s.SourceTypeConfigBridge)
	}
	if s.typ == "SourceTypeConfigCloudSignal" || s.SourceTypeConfigCloudSignal != nil {
		return visitor.VisitSourceTypeConfigCloudSignal(s.SourceTypeConfigCloudSignal)
	}
	if s.typ == "SourceTypeConfigCourier" || s.SourceTypeConfigCourier != nil {
		return visitor.VisitSourceTypeConfigCourier(s.SourceTypeConfigCourier)
	}
	if s.typ == "SourceTypeConfigFrontApp" || s.SourceTypeConfigFrontApp != nil {
		return visitor.VisitSourceTypeConfigFrontApp(s.SourceTypeConfigFrontApp)
	}
	if s.typ == "SourceTypeConfigZoom" || s.SourceTypeConfigZoom != nil {
		return visitor.VisitSourceTypeConfigZoom(s.SourceTypeConfigZoom)
	}
	if s.typ == "SourceTypeConfigTwitter" || s.SourceTypeConfigTwitter != nil {
		return visitor.VisitSourceTypeConfigTwitter(s.SourceTypeConfigTwitter)
	}
	if s.typ == "SourceTypeConfigRecharge" || s.SourceTypeConfigRecharge != nil {
		return visitor.VisitSourceTypeConfigRecharge(s.SourceTypeConfigRecharge)
	}
	if s.typ == "SourceTypeConfigStripe" || s.SourceTypeConfigStripe != nil {
		return visitor.VisitSourceTypeConfigStripe(s.SourceTypeConfigStripe)
	}
	if s.typ == "SourceTypeConfigPropertyFinder" || s.SourceTypeConfigPropertyFinder != nil {
		return visitor.VisitSourceTypeConfigPropertyFinder(s.SourceTypeConfigPropertyFinder)
	}
	if s.typ == "SourceTypeConfigShopify" || s.SourceTypeConfigShopify != nil {
		return visitor.VisitSourceTypeConfigShopify(s.SourceTypeConfigShopify)
	}
	if s.typ == "SourceTypeConfigTwilio" || s.SourceTypeConfigTwilio != nil {
		return visitor.VisitSourceTypeConfigTwilio(s.SourceTypeConfigTwilio)
	}
	if s.typ == "SourceTypeConfigGitHub" || s.SourceTypeConfigGitHub != nil {
		return visitor.VisitSourceTypeConfigGitHub(s.SourceTypeConfigGitHub)
	}
	if s.typ == "SourceTypeConfigPostmark" || s.SourceTypeConfigPostmark != nil {
		return visitor.VisitSourceTypeConfigPostmark(s.SourceTypeConfigPostmark)
	}
	if s.typ == "SourceTypeConfigTypeform" || s.SourceTypeConfigTypeform != nil {
		return visitor.VisitSourceTypeConfigTypeform(s.SourceTypeConfigTypeform)
	}
	if s.typ == "SourceTypeConfigXero" || s.SourceTypeConfigXero != nil {
		return visitor.VisitSourceTypeConfigXero(s.SourceTypeConfigXero)
	}
	if s.typ == "SourceTypeConfigSvix" || s.SourceTypeConfigSvix != nil {
		return visitor.VisitSourceTypeConfigSvix(s.SourceTypeConfigSvix)
	}
	if s.typ == "SourceTypeConfigAdyen" || s.SourceTypeConfigAdyen != nil {
		return visitor.VisitSourceTypeConfigAdyen(s.SourceTypeConfigAdyen)
	}
	if s.typ == "SourceTypeConfigAkeneo" || s.SourceTypeConfigAkeneo != nil {
		return visitor.VisitSourceTypeConfigAkeneo(s.SourceTypeConfigAkeneo)
	}
	if s.typ == "SourceTypeConfigGitLab" || s.SourceTypeConfigGitLab != nil {
		return visitor.VisitSourceTypeConfigGitLab(s.SourceTypeConfigGitLab)
	}
	if s.typ == "SourceTypeConfigWooCommerce" || s.SourceTypeConfigWooCommerce != nil {
		return visitor.VisitSourceTypeConfigWooCommerce(s.SourceTypeConfigWooCommerce)
	}
	if s.typ == "SourceTypeConfigOura" || s.SourceTypeConfigOura != nil {
		return visitor.VisitSourceTypeConfigOura(s.SourceTypeConfigOura)
	}
	if s.typ == "SourceTypeConfigCommerceLayer" || s.SourceTypeConfigCommerceLayer != nil {
		return visitor.VisitSourceTypeConfigCommerceLayer(s.SourceTypeConfigCommerceLayer)
	}
	if s.typ == "SourceTypeConfigHubspot" || s.SourceTypeConfigHubspot != nil {
		return visitor.VisitSourceTypeConfigHubspot(s.SourceTypeConfigHubspot)
	}
	if s.typ == "SourceTypeConfigMailgun" || s.SourceTypeConfigMailgun != nil {
		return visitor.VisitSourceTypeConfigMailgun(s.SourceTypeConfigMailgun)
	}
	if s.typ == "SourceTypeConfigPersona" || s.SourceTypeConfigPersona != nil {
		return visitor.VisitSourceTypeConfigPersona(s.SourceTypeConfigPersona)
	}
	if s.typ == "SourceTypeConfigPipedrive" || s.SourceTypeConfigPipedrive != nil {
		return visitor.VisitSourceTypeConfigPipedrive(s.SourceTypeConfigPipedrive)
	}
	if s.typ == "SourceTypeConfigSendgrid" || s.SourceTypeConfigSendgrid != nil {
		return visitor.VisitSourceTypeConfigSendgrid(s.SourceTypeConfigSendgrid)
	}
	if s.typ == "SourceTypeConfigWorkOs" || s.SourceTypeConfigWorkOs != nil {
		return visitor.VisitSourceTypeConfigWorkOs(s.SourceTypeConfigWorkOs)
	}
	if s.typ == "SourceTypeConfigSynctera" || s.SourceTypeConfigSynctera != nil {
		return visitor.VisitSourceTypeConfigSynctera(s.SourceTypeConfigSynctera)
	}
	if s.typ == "SourceTypeConfigAwssns" || s.SourceTypeConfigAwssns != nil {
		return visitor.VisitSourceTypeConfigAwssns(s.SourceTypeConfigAwssns)
	}
	if s.typ == "SourceTypeConfig3DEye" || s.SourceTypeConfig3DEye != nil {
		return visitor.VisitSourceTypeConfig3DEye(s.SourceTypeConfig3DEye)
	}
	if s.typ == "SourceTypeConfigTwitch" || s.SourceTypeConfigTwitch != nil {
		return visitor.VisitSourceTypeConfigTwitch(s.SourceTypeConfigTwitch)
	}
	if s.typ == "SourceTypeConfigEnode" || s.SourceTypeConfigEnode != nil {
		return visitor.VisitSourceTypeConfigEnode(s.SourceTypeConfigEnode)
	}
	if s.typ == "SourceTypeConfigFavro" || s.SourceTypeConfigFavro != nil {
		return visitor.VisitSourceTypeConfigFavro(s.SourceTypeConfigFavro)
	}
	if s.typ == "SourceTypeConfigLinear" || s.SourceTypeConfigLinear != nil {
		return visitor.VisitSourceTypeConfigLinear(s.SourceTypeConfigLinear)
	}
	if s.typ == "SourceTypeConfigShopline" || s.SourceTypeConfigShopline != nil {
		return visitor.VisitSourceTypeConfigShopline(s.SourceTypeConfigShopline)
	}
	if s.typ == "SourceTypeConfigWix" || s.SourceTypeConfigWix != nil {
		return visitor.VisitSourceTypeConfigWix(s.SourceTypeConfigWix)
	}
	if s.typ == "SourceTypeConfigNmiPaymentGateway" || s.SourceTypeConfigNmiPaymentGateway != nil {
		return visitor.VisitSourceTypeConfigNmiPaymentGateway(s.SourceTypeConfigNmiPaymentGateway)
	}
	if s.typ == "SourceTypeConfigOrb" || s.SourceTypeConfigOrb != nil {
		return visitor.VisitSourceTypeConfigOrb(s.SourceTypeConfigOrb)
	}
	if s.typ == "SourceTypeConfigPylon" || s.SourceTypeConfigPylon != nil {
		return visitor.VisitSourceTypeConfigPylon(s.SourceTypeConfigPylon)
	}
	if s.typ == "SourceTypeConfigRazorpay" || s.SourceTypeConfigRazorpay != nil {
		return visitor.VisitSourceTypeConfigRazorpay(s.SourceTypeConfigRazorpay)
	}
	if s.typ == "SourceTypeConfigRepay" || s.SourceTypeConfigRepay != nil {
		return visitor.VisitSourceTypeConfigRepay(s.SourceTypeConfigRepay)
	}
	if s.typ == "SourceTypeConfigSquare" || s.SourceTypeConfigSquare != nil {
		return visitor.VisitSourceTypeConfigSquare(s.SourceTypeConfigSquare)
	}
	if s.typ == "SourceTypeConfigSolidgate" || s.SourceTypeConfigSolidgate != nil {
		return visitor.VisitSourceTypeConfigSolidgate(s.SourceTypeConfigSolidgate)
	}
	if s.typ == "SourceTypeConfigTrello" || s.SourceTypeConfigTrello != nil {
		return visitor.VisitSourceTypeConfigTrello(s.SourceTypeConfigTrello)
	}
	if s.typ == "SourceTypeConfigEbay" || s.SourceTypeConfigEbay != nil {
		return visitor.VisitSourceTypeConfigEbay(s.SourceTypeConfigEbay)
	}
	if s.typ == "SourceTypeConfigTelnyx" || s.SourceTypeConfigTelnyx != nil {
		return visitor.VisitSourceTypeConfigTelnyx(s.SourceTypeConfigTelnyx)
	}
	if s.typ == "SourceTypeConfigDiscord" || s.SourceTypeConfigDiscord != nil {
		return visitor.VisitSourceTypeConfigDiscord(s.SourceTypeConfigDiscord)
	}
	if s.typ == "SourceTypeConfigTokenIo" || s.SourceTypeConfigTokenIo != nil {
		return visitor.VisitSourceTypeConfigTokenIo(s.SourceTypeConfigTokenIo)
	}
	if s.typ == "SourceTypeConfigFiserv" || s.SourceTypeConfigFiserv != nil {
		return visitor.VisitSourceTypeConfigFiserv(s.SourceTypeConfigFiserv)
	}
	if s.typ == "SourceTypeConfigBondsmith" || s.SourceTypeConfigBondsmith != nil {
		return visitor.VisitSourceTypeConfigBondsmith(s.SourceTypeConfigBondsmith)
	}
	if s.typ == "SourceTypeConfigVercelLogDrains" || s.SourceTypeConfigVercelLogDrains != nil {
		return visitor.VisitSourceTypeConfigVercelLogDrains(s.SourceTypeConfigVercelLogDrains)
	}
	if s.typ == "SourceTypeConfigVercelWebhooks" || s.SourceTypeConfigVercelWebhooks != nil {
		return visitor.VisitSourceTypeConfigVercelWebhooks(s.SourceTypeConfigVercelWebhooks)
	}
	if s.typ == "SourceTypeConfigTebex" || s.SourceTypeConfigTebex != nil {
		return visitor.VisitSourceTypeConfigTebex(s.SourceTypeConfigTebex)
	}
	if s.typ == "SourceTypeConfigSlack" || s.SourceTypeConfigSlack != nil {
		return visitor.VisitSourceTypeConfigSlack(s.SourceTypeConfigSlack)
	}
	if s.typ == "SourceTypeConfigMailchimp" || s.SourceTypeConfigMailchimp != nil {
		return visitor.VisitSourceTypeConfigMailchimp(s.SourceTypeConfigMailchimp)
	}
	if s.typ == "SourceTypeConfigPaddle" || s.SourceTypeConfigPaddle != nil {
		return visitor.VisitSourceTypeConfigPaddle(s.SourceTypeConfigPaddle)
	}
	if s.typ == "SourceTypeConfigPaypal" || s.SourceTypeConfigPaypal != nil {
		return visitor.VisitSourceTypeConfigPaypal(s.SourceTypeConfigPaypal)
	}
	if s.typ == "SourceTypeConfigTreezor" || s.SourceTypeConfigTreezor != nil {
		return visitor.VisitSourceTypeConfigTreezor(s.SourceTypeConfigTreezor)
	}
	if s.typ == "SourceTypeConfigPraxis" || s.SourceTypeConfigPraxis != nil {
		return visitor.VisitSourceTypeConfigPraxis(s.SourceTypeConfigPraxis)
	}
	if s.typ == "SourceTypeConfigCustomerIo" || s.SourceTypeConfigCustomerIo != nil {
		return visitor.VisitSourceTypeConfigCustomerIo(s.SourceTypeConfigCustomerIo)
	}
	if s.typ == "SourceTypeConfigFacebook" || s.SourceTypeConfigFacebook != nil {
		return visitor.VisitSourceTypeConfigFacebook(s.SourceTypeConfigFacebook)
	}
	if s.typ == "SourceTypeConfigWhatsApp" || s.SourceTypeConfigWhatsApp != nil {
		return visitor.VisitSourceTypeConfigWhatsApp(s.SourceTypeConfigWhatsApp)
	}
	if s.typ == "SourceTypeConfigReplicate" || s.SourceTypeConfigReplicate != nil {
		return visitor.VisitSourceTypeConfigReplicate(s.SourceTypeConfigReplicate)
	}
	if s.typ == "SourceTypeConfigTikTok" || s.SourceTypeConfigTikTok != nil {
		return visitor.VisitSourceTypeConfigTikTok(s.SourceTypeConfigTikTok)
	}
	if s.typ == "SourceTypeConfigAirwallex" || s.SourceTypeConfigAirwallex != nil {
		return visitor.VisitSourceTypeConfigAirwallex(s.SourceTypeConfigAirwallex)
	}
	if s.typ == "SourceTypeConfigZendesk" || s.SourceTypeConfigZendesk != nil {
		return visitor.VisitSourceTypeConfigZendesk(s.SourceTypeConfigZendesk)
	}
	if s.typ == "SourceTypeConfigUpollo" || s.SourceTypeConfigUpollo != nil {
		return visitor.VisitSourceTypeConfigUpollo(s.SourceTypeConfigUpollo)
	}
	if s.typ == "SourceTypeConfigLinkedIn" || s.SourceTypeConfigLinkedIn != nil {
		return visitor.VisitSourceTypeConfigLinkedIn(s.SourceTypeConfigLinkedIn)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SourceConfig3DEyeAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfig3DEyeAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfig3DEyeAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfig3DEyeAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfig3DEyeAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfig3DEyeAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfig3DEyeAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigAdyenAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigAdyenAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigAdyenAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigAdyenAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigAdyenAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigAdyenAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigAdyenAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigAirwallexAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigAirwallexAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigAirwallexAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigAirwallexAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigAirwallexAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigAirwallexAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigAirwallexAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigAkeneoAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigAkeneoAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigAkeneoAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigAkeneoAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigAkeneoAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigAkeneoAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigAkeneoAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigAwssnsAuth struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigAwssnsAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigAwssnsAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigAwssnsAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigAwssnsAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigAwssnsAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigBondsmithAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigBondsmithAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigBondsmithAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigBondsmithAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigBondsmithAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigBondsmithAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigBondsmithAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigBridgeAuth struct {
	PublicKey string `json:"public_key" url:"public_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigBridgeAuth) GetPublicKey() string {
	if s == nil {
		return ""
	}
	return s.PublicKey
}

func (s *SourceConfigBridgeAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigBridgeAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigBridgeAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigBridgeAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigBridgeAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigCliAuth struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigCliAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigCliAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigCliAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigCliAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigCliAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigCloudSignalAuth struct {
	ApiKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigCloudSignalAuth) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceConfigCloudSignalAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigCloudSignalAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigCloudSignalAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigCloudSignalAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigCloudSignalAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigCommerceLayerAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigCommerceLayerAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigCommerceLayerAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigCommerceLayerAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigCommerceLayerAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigCommerceLayerAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigCommerceLayerAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigCourierAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigCourierAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigCourierAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigCourierAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigCourierAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigCourierAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigCourierAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigCustomerIoAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigCustomerIoAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigCustomerIoAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigCustomerIoAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigCustomerIoAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigCustomerIoAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigCustomerIoAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigDiscordAuth struct {
	PublicKey string `json:"public_key" url:"public_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigDiscordAuth) GetPublicKey() string {
	if s == nil {
		return ""
	}
	return s.PublicKey
}

func (s *SourceConfigDiscordAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigDiscordAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigDiscordAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigDiscordAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigDiscordAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigEbayAuth struct {
	Environment       SourceConfigEbayAuthEnvironment `json:"environment" url:"environment"`
	DevId             string                          `json:"dev_id" url:"dev_id"`
	ClientId          string                          `json:"client_id" url:"client_id"`
	ClientSecret      string                          `json:"client_secret" url:"client_secret"`
	VerificationToken string                          `json:"verification_token" url:"verification_token"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigEbayAuth) GetEnvironment() SourceConfigEbayAuthEnvironment {
	if s == nil {
		return ""
	}
	return s.Environment
}

func (s *SourceConfigEbayAuth) GetDevId() string {
	if s == nil {
		return ""
	}
	return s.DevId
}

func (s *SourceConfigEbayAuth) GetClientId() string {
	if s == nil {
		return ""
	}
	return s.ClientId
}

func (s *SourceConfigEbayAuth) GetClientSecret() string {
	if s == nil {
		return ""
	}
	return s.ClientSecret
}

func (s *SourceConfigEbayAuth) GetVerificationToken() string {
	if s == nil {
		return ""
	}
	return s.VerificationToken
}

func (s *SourceConfigEbayAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigEbayAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigEbayAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigEbayAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigEbayAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigEbayAuthEnvironment string

const (
	SourceConfigEbayAuthEnvironmentProduction SourceConfigEbayAuthEnvironment = "PRODUCTION"
	SourceConfigEbayAuthEnvironmentSandbox    SourceConfigEbayAuthEnvironment = "SANDBOX"
)

func NewSourceConfigEbayAuthEnvironmentFromString(s string) (SourceConfigEbayAuthEnvironment, error) {
	switch s {
	case "PRODUCTION":
		return SourceConfigEbayAuthEnvironmentProduction, nil
	case "SANDBOX":
		return SourceConfigEbayAuthEnvironmentSandbox, nil
	}
	var t SourceConfigEbayAuthEnvironment
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceConfigEbayAuthEnvironment) Ptr() *SourceConfigEbayAuthEnvironment {
	return &s
}

type SourceConfigEnodeAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigEnodeAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigEnodeAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigEnodeAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigEnodeAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigEnodeAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigEnodeAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigFacebookAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigFacebookAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigFacebookAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigFacebookAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigFacebookAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigFacebookAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigFacebookAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigFavroAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigFavroAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigFavroAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigFavroAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigFavroAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigFavroAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigFavroAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigFiservAuth struct {
	WebhookSecretKey string  `json:"webhook_secret_key" url:"webhook_secret_key"`
	StoreName        *string `json:"store_name,omitempty" url:"store_name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigFiservAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigFiservAuth) GetStoreName() *string {
	if s == nil {
		return nil
	}
	return s.StoreName
}

func (s *SourceConfigFiservAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigFiservAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigFiservAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigFiservAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigFiservAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigFrontAppAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigFrontAppAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigFrontAppAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigFrontAppAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigFrontAppAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigFrontAppAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigFrontAppAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigGitHubAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigGitHubAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigGitHubAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigGitHubAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigGitHubAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigGitHubAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigGitHubAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigGitLabAuth struct {
	ApiKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigGitLabAuth) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceConfigGitLabAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigGitLabAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigGitLabAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigGitLabAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigGitLabAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigHubspotAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigHubspotAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigHubspotAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigHubspotAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigHubspotAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigHubspotAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigHubspotAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigLinearAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigLinearAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigLinearAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigLinearAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigLinearAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigLinearAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigLinearAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigLinkedInAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigLinkedInAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigLinkedInAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigLinkedInAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigLinkedInAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigLinkedInAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigLinkedInAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigMailchimpAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigMailchimpAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigMailchimpAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigMailchimpAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigMailchimpAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigMailchimpAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigMailchimpAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigMailgunAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigMailgunAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigMailgunAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigMailgunAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigMailgunAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigMailgunAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigMailgunAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigManagedAuth struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigManagedAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigManagedAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigManagedAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigManagedAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigManagedAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigMockApiAuth struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigMockApiAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigMockApiAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigMockApiAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigMockApiAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigMockApiAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigNmiPaymentGatewayAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigNmiPaymentGatewayAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigNmiPaymentGatewayAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigNmiPaymentGatewayAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigNmiPaymentGatewayAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigNmiPaymentGatewayAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigNmiPaymentGatewayAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigOrbAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigOrbAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigOrbAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigOrbAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigOrbAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigOrbAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigOrbAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigOuraAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigOuraAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigOuraAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigOuraAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigOuraAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigOuraAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigOuraAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigPaddleAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigPaddleAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigPaddleAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigPaddleAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigPaddleAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigPaddleAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigPaddleAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigPaypalAuth struct {
	WebhookId string `json:"webhook_id" url:"webhook_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigPaypalAuth) GetWebhookId() string {
	if s == nil {
		return ""
	}
	return s.WebhookId
}

func (s *SourceConfigPaypalAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigPaypalAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigPaypalAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigPaypalAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigPaypalAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigPersonaAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigPersonaAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigPersonaAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigPersonaAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigPersonaAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigPersonaAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigPersonaAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigPipedriveAuth struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigPipedriveAuth) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

func (s *SourceConfigPipedriveAuth) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SourceConfigPipedriveAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigPipedriveAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigPipedriveAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigPipedriveAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigPipedriveAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigPostmarkAuth struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigPostmarkAuth) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

func (s *SourceConfigPostmarkAuth) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SourceConfigPostmarkAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigPostmarkAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigPostmarkAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigPostmarkAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigPostmarkAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigPraxisAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigPraxisAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigPraxisAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigPraxisAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigPraxisAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigPraxisAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigPraxisAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigPropertyFinderAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigPropertyFinderAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigPropertyFinderAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigPropertyFinderAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigPropertyFinderAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigPropertyFinderAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigPropertyFinderAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigPylonAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigPylonAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigPylonAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigPylonAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigPylonAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigPylonAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigPylonAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigRazorpayAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigRazorpayAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigRazorpayAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigRazorpayAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigRazorpayAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigRazorpayAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigRazorpayAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigRechargeAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigRechargeAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigRechargeAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigRechargeAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigRechargeAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigRechargeAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigRechargeAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigRepayAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigRepayAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigRepayAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigRepayAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigRepayAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigRepayAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigRepayAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigReplicateAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigReplicateAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigReplicateAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigReplicateAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigReplicateAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigReplicateAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigReplicateAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigSanityAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigSanityAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigSanityAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigSanityAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigSanityAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigSanityAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigSanityAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigSendgridAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigSendgridAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigSendgridAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigSendgridAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigSendgridAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigSendgridAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigSendgridAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigShopifyAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigShopifyAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigShopifyAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigShopifyAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigShopifyAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigShopifyAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigShopifyAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigShoplineAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigShoplineAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigShoplineAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigShoplineAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigShoplineAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigShoplineAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigShoplineAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigSlackAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigSlackAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigSlackAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigSlackAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigSlackAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigSlackAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigSlackAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigSolidgateAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigSolidgateAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigSolidgateAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigSolidgateAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigSolidgateAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigSolidgateAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigSolidgateAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigSquareAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigSquareAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigSquareAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigSquareAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigSquareAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigSquareAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigSquareAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigStripeAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigStripeAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigStripeAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigStripeAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigStripeAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigStripeAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigStripeAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigSvixAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigSvixAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigSvixAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigSvixAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigSvixAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigSvixAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigSvixAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigSyncteraAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigSyncteraAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigSyncteraAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigSyncteraAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigSyncteraAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigSyncteraAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigSyncteraAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigTebexAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigTebexAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigTebexAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigTebexAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigTebexAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigTebexAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigTebexAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigTelnyxAuth struct {
	PublicKey string `json:"public_key" url:"public_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigTelnyxAuth) GetPublicKey() string {
	if s == nil {
		return ""
	}
	return s.PublicKey
}

func (s *SourceConfigTelnyxAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigTelnyxAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigTelnyxAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigTelnyxAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigTelnyxAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigTikTokAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`
	AppKey           string `json:"app_key" url:"app_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigTikTokAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigTikTokAuth) GetAppKey() string {
	if s == nil {
		return ""
	}
	return s.AppKey
}

func (s *SourceConfigTikTokAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigTikTokAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigTikTokAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigTikTokAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigTikTokAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigTokenIoAuth struct {
	PublicKey string `json:"public_key" url:"public_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigTokenIoAuth) GetPublicKey() string {
	if s == nil {
		return ""
	}
	return s.PublicKey
}

func (s *SourceConfigTokenIoAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigTokenIoAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigTokenIoAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigTokenIoAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigTokenIoAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigTreezorAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigTreezorAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigTreezorAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigTreezorAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigTreezorAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigTreezorAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigTreezorAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigTrelloAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigTrelloAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigTrelloAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigTrelloAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigTrelloAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigTrelloAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigTrelloAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigTwilioAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigTwilioAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigTwilioAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigTwilioAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigTwilioAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigTwilioAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigTwilioAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigTwitchAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigTwitchAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigTwitchAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigTwitchAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigTwitchAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigTwitchAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigTwitchAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigTwitterAuth struct {
	ApiKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigTwitterAuth) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceConfigTwitterAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigTwitterAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigTwitterAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigTwitterAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigTwitterAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigTypeformAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigTypeformAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigTypeformAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigTypeformAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigTypeformAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigTypeformAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigTypeformAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigUpolloAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigUpolloAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigUpolloAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigUpolloAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigUpolloAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigUpolloAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigUpolloAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigVercelLogDrainsAuth struct {
	WebhookSecretKey *string `json:"webhook_secret_key,omitempty" url:"webhook_secret_key,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigVercelLogDrainsAuth) GetWebhookSecretKey() *string {
	if s == nil {
		return nil
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigVercelLogDrainsAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigVercelLogDrainsAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigVercelLogDrainsAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigVercelLogDrainsAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigVercelLogDrainsAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigVercelWebhooksAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigVercelWebhooksAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigVercelWebhooksAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigVercelWebhooksAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigVercelWebhooksAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigVercelWebhooksAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigVercelWebhooksAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuth3DEye struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuth3DEye) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuth3DEye) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuth3DEye) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuth3DEye
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuth3DEye(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuth3DEye) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthAdyen struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthAdyen) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthAdyen) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthAdyen) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthAdyen
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthAdyen(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthAdyen) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthAirwallex struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthAirwallex) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthAirwallex) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthAirwallex) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthAirwallex
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthAirwallex(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthAirwallex) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthAkeneo struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthAkeneo) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthAkeneo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthAkeneo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthAkeneo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthAkeneo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthAkeneo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthApiKey struct {
	HeaderKey string `json:"header_key" url:"header_key"`
	ApiKey    string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthApiKey) GetHeaderKey() string {
	if s == nil {
		return ""
	}
	return s.HeaderKey
}

func (s *SourceConfigWebhookAuthApiKey) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceConfigWebhookAuthApiKey) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthApiKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthApiKey) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthAwssns struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthAwssns) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthAwssns) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthAwssns
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthAwssns(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthAwssns) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthBasicAuth struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthBasicAuth) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

func (s *SourceConfigWebhookAuthBasicAuth) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SourceConfigWebhookAuthBasicAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthBasicAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthBasicAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthBasicAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthBasicAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthBondsmith struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthBondsmith) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthBondsmith) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthBondsmith) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthBondsmith
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthBondsmith(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthBondsmith) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthBridge struct {
	PublicKey string `json:"public_key" url:"public_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthBridge) GetPublicKey() string {
	if s == nil {
		return ""
	}
	return s.PublicKey
}

func (s *SourceConfigWebhookAuthBridge) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthBridge) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthBridge
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthBridge(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthBridge) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthCloudSignal struct {
	ApiKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthCloudSignal) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceConfigWebhookAuthCloudSignal) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthCloudSignal) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthCloudSignal
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthCloudSignal(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthCloudSignal) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthCommerceLayer struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthCommerceLayer) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthCommerceLayer) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthCommerceLayer) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthCommerceLayer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthCommerceLayer(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthCommerceLayer) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthCourier struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthCourier) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthCourier) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthCourier) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthCourier
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthCourier(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthCourier) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthCustomerIo struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthCustomerIo) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthCustomerIo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthCustomerIo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthCustomerIo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthCustomerIo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthCustomerIo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthDiscord struct {
	PublicKey string `json:"public_key" url:"public_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthDiscord) GetPublicKey() string {
	if s == nil {
		return ""
	}
	return s.PublicKey
}

func (s *SourceConfigWebhookAuthDiscord) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthDiscord) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthDiscord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthDiscord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthDiscord) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthEbay struct {
	Environment       SourceConfigWebhookAuthEbayEnvironment `json:"environment" url:"environment"`
	DevId             string                                 `json:"dev_id" url:"dev_id"`
	ClientId          string                                 `json:"client_id" url:"client_id"`
	ClientSecret      string                                 `json:"client_secret" url:"client_secret"`
	VerificationToken string                                 `json:"verification_token" url:"verification_token"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthEbay) GetEnvironment() SourceConfigWebhookAuthEbayEnvironment {
	if s == nil {
		return ""
	}
	return s.Environment
}

func (s *SourceConfigWebhookAuthEbay) GetDevId() string {
	if s == nil {
		return ""
	}
	return s.DevId
}

func (s *SourceConfigWebhookAuthEbay) GetClientId() string {
	if s == nil {
		return ""
	}
	return s.ClientId
}

func (s *SourceConfigWebhookAuthEbay) GetClientSecret() string {
	if s == nil {
		return ""
	}
	return s.ClientSecret
}

func (s *SourceConfigWebhookAuthEbay) GetVerificationToken() string {
	if s == nil {
		return ""
	}
	return s.VerificationToken
}

func (s *SourceConfigWebhookAuthEbay) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthEbay) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthEbay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthEbay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthEbay) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthEbayEnvironment string

const (
	SourceConfigWebhookAuthEbayEnvironmentProduction SourceConfigWebhookAuthEbayEnvironment = "PRODUCTION"
	SourceConfigWebhookAuthEbayEnvironmentSandbox    SourceConfigWebhookAuthEbayEnvironment = "SANDBOX"
)

func NewSourceConfigWebhookAuthEbayEnvironmentFromString(s string) (SourceConfigWebhookAuthEbayEnvironment, error) {
	switch s {
	case "PRODUCTION":
		return SourceConfigWebhookAuthEbayEnvironmentProduction, nil
	case "SANDBOX":
		return SourceConfigWebhookAuthEbayEnvironmentSandbox, nil
	}
	var t SourceConfigWebhookAuthEbayEnvironment
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceConfigWebhookAuthEbayEnvironment) Ptr() *SourceConfigWebhookAuthEbayEnvironment {
	return &s
}

type SourceConfigWebhookAuthEnode struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthEnode) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthEnode) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthEnode) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthEnode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthEnode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthEnode) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthFacebook struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthFacebook) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthFacebook) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthFacebook) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthFacebook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthFacebook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthFacebook) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthFavro struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthFavro) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthFavro) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthFavro) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthFavro
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthFavro(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthFavro) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthFiserv struct {
	WebhookSecretKey string  `json:"webhook_secret_key" url:"webhook_secret_key"`
	StoreName        *string `json:"store_name,omitempty" url:"store_name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthFiserv) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthFiserv) GetStoreName() *string {
	if s == nil {
		return nil
	}
	return s.StoreName
}

func (s *SourceConfigWebhookAuthFiserv) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthFiserv) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthFiserv
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthFiserv(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthFiserv) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthFrontApp struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthFrontApp) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthFrontApp) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthFrontApp) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthFrontApp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthFrontApp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthFrontApp) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthGitHub struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthGitHub) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthGitHub) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthGitHub) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthGitHub
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthGitHub(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthGitHub) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthGitLab struct {
	ApiKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthGitLab) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceConfigWebhookAuthGitLab) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthGitLab) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthGitLab
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthGitLab(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthGitLab) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthHmac struct {
	Algorithm        SourceConfigWebhookAuthHmacAlgorithm `json:"algorithm" url:"algorithm"`
	Encoding         SourceConfigWebhookAuthHmacEncoding  `json:"encoding" url:"encoding"`
	HeaderKey        string                               `json:"header_key" url:"header_key"`
	WebhookSecretKey string                               `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthHmac) GetAlgorithm() SourceConfigWebhookAuthHmacAlgorithm {
	if s == nil {
		return ""
	}
	return s.Algorithm
}

func (s *SourceConfigWebhookAuthHmac) GetEncoding() SourceConfigWebhookAuthHmacEncoding {
	if s == nil {
		return ""
	}
	return s.Encoding
}

func (s *SourceConfigWebhookAuthHmac) GetHeaderKey() string {
	if s == nil {
		return ""
	}
	return s.HeaderKey
}

func (s *SourceConfigWebhookAuthHmac) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthHmac) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthHmac) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthHmac
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthHmac(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthHmac) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthHmacAlgorithm string

const (
	SourceConfigWebhookAuthHmacAlgorithmSha1   SourceConfigWebhookAuthHmacAlgorithm = "sha1"
	SourceConfigWebhookAuthHmacAlgorithmSha256 SourceConfigWebhookAuthHmacAlgorithm = "sha256"
	SourceConfigWebhookAuthHmacAlgorithmSha512 SourceConfigWebhookAuthHmacAlgorithm = "sha512"
	SourceConfigWebhookAuthHmacAlgorithmMd5    SourceConfigWebhookAuthHmacAlgorithm = "md5"
)

func NewSourceConfigWebhookAuthHmacAlgorithmFromString(s string) (SourceConfigWebhookAuthHmacAlgorithm, error) {
	switch s {
	case "sha1":
		return SourceConfigWebhookAuthHmacAlgorithmSha1, nil
	case "sha256":
		return SourceConfigWebhookAuthHmacAlgorithmSha256, nil
	case "sha512":
		return SourceConfigWebhookAuthHmacAlgorithmSha512, nil
	case "md5":
		return SourceConfigWebhookAuthHmacAlgorithmMd5, nil
	}
	var t SourceConfigWebhookAuthHmacAlgorithm
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceConfigWebhookAuthHmacAlgorithm) Ptr() *SourceConfigWebhookAuthHmacAlgorithm {
	return &s
}

type SourceConfigWebhookAuthHmacEncoding string

const (
	SourceConfigWebhookAuthHmacEncodingBase64    SourceConfigWebhookAuthHmacEncoding = "base64"
	SourceConfigWebhookAuthHmacEncodingBase64Url SourceConfigWebhookAuthHmacEncoding = "base64url"
	SourceConfigWebhookAuthHmacEncodingHex       SourceConfigWebhookAuthHmacEncoding = "hex"
)

func NewSourceConfigWebhookAuthHmacEncodingFromString(s string) (SourceConfigWebhookAuthHmacEncoding, error) {
	switch s {
	case "base64":
		return SourceConfigWebhookAuthHmacEncodingBase64, nil
	case "base64url":
		return SourceConfigWebhookAuthHmacEncodingBase64Url, nil
	case "hex":
		return SourceConfigWebhookAuthHmacEncodingHex, nil
	}
	var t SourceConfigWebhookAuthHmacEncoding
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceConfigWebhookAuthHmacEncoding) Ptr() *SourceConfigWebhookAuthHmacEncoding {
	return &s
}

type SourceConfigWebhookAuthHubspot struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthHubspot) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthHubspot) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthHubspot) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthHubspot
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthHubspot(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthHubspot) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthLinear struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthLinear) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthLinear) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthLinear) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthLinear
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthLinear(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthLinear) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthLinkedIn struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthLinkedIn) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthLinkedIn) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthLinkedIn) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthLinkedIn
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthLinkedIn(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthLinkedIn) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthMailchimp struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthMailchimp) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthMailchimp) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthMailchimp) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthMailchimp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthMailchimp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthMailchimp) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthMailgun struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthMailgun) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthMailgun) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthMailgun) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthMailgun
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthMailgun(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthMailgun) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthNmiPaymentGateway struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthNmiPaymentGateway) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthNmiPaymentGateway) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthNmiPaymentGateway) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthNmiPaymentGateway
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthNmiPaymentGateway(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthNmiPaymentGateway) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthOrb struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthOrb) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthOrb) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthOrb) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthOrb
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthOrb(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthOrb) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthOura struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthOura) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthOura) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthOura) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthOura
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthOura(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthOura) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthPaddle struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthPaddle) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthPaddle) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthPaddle) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthPaddle
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthPaddle(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthPaddle) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthPaypal struct {
	WebhookId string `json:"webhook_id" url:"webhook_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthPaypal) GetWebhookId() string {
	if s == nil {
		return ""
	}
	return s.WebhookId
}

func (s *SourceConfigWebhookAuthPaypal) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthPaypal) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthPaypal
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthPaypal(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthPaypal) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthPersona struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthPersona) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthPersona) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthPersona) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthPersona
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthPersona(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthPersona) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthPipedrive struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthPipedrive) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

func (s *SourceConfigWebhookAuthPipedrive) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SourceConfigWebhookAuthPipedrive) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthPipedrive) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthPipedrive
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthPipedrive(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthPipedrive) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthPostmark struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthPostmark) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

func (s *SourceConfigWebhookAuthPostmark) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SourceConfigWebhookAuthPostmark) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthPostmark) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthPostmark
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthPostmark(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthPostmark) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthPraxis struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthPraxis) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthPraxis) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthPraxis) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthPraxis
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthPraxis(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthPraxis) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthPropertyFinder struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthPropertyFinder) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthPropertyFinder) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthPropertyFinder) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthPropertyFinder
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthPropertyFinder(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthPropertyFinder) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthPylon struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthPylon) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthPylon) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthPylon) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthPylon
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthPylon(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthPylon) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthRazorpay struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthRazorpay) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthRazorpay) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthRazorpay) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthRazorpay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthRazorpay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthRazorpay) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthRecharge struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthRecharge) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthRecharge) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthRecharge) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthRecharge
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthRecharge(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthRecharge) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthRepay struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthRepay) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthRepay) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthRepay) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthRepay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthRepay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthRepay) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthReplicate struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthReplicate) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthReplicate) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthReplicate) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthReplicate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthReplicate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthReplicate) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthSanity struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthSanity) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthSanity) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthSanity) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthSanity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthSanity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthSanity) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthSendgrid struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthSendgrid) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthSendgrid) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthSendgrid) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthSendgrid
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthSendgrid(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthSendgrid) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthShopify struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthShopify) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthShopify) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthShopify) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthShopify
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthShopify(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthShopify) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthShopline struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthShopline) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthShopline) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthShopline) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthShopline
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthShopline(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthShopline) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthSlack struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthSlack) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthSlack) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthSlack) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthSlack
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthSlack(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthSlack) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthSolidgate struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthSolidgate) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthSolidgate) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthSolidgate) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthSolidgate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthSolidgate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthSolidgate) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthSquare struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthSquare) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthSquare) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthSquare) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthSquare
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthSquare(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthSquare) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthStripe struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthStripe) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthStripe) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthStripe) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthStripe
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthStripe(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthStripe) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthSvix struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthSvix) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthSvix) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthSvix) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthSvix
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthSvix(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthSvix) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthSynctera struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthSynctera) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthSynctera) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthSynctera) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthSynctera
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthSynctera(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthSynctera) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthTebex struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthTebex) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthTebex) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthTebex) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthTebex
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthTebex(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthTebex) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthTelnyx struct {
	PublicKey string `json:"public_key" url:"public_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthTelnyx) GetPublicKey() string {
	if s == nil {
		return ""
	}
	return s.PublicKey
}

func (s *SourceConfigWebhookAuthTelnyx) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthTelnyx) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthTelnyx
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthTelnyx(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthTelnyx) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthTikTok struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`
	AppKey           string `json:"app_key" url:"app_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthTikTok) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthTikTok) GetAppKey() string {
	if s == nil {
		return ""
	}
	return s.AppKey
}

func (s *SourceConfigWebhookAuthTikTok) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthTikTok) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthTikTok
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthTikTok(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthTikTok) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthTokenIo struct {
	PublicKey string `json:"public_key" url:"public_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthTokenIo) GetPublicKey() string {
	if s == nil {
		return ""
	}
	return s.PublicKey
}

func (s *SourceConfigWebhookAuthTokenIo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthTokenIo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthTokenIo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthTokenIo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthTokenIo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthTreezor struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthTreezor) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthTreezor) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthTreezor) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthTreezor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthTreezor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthTreezor) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthTrello struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthTrello) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthTrello) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthTrello) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthTrello
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthTrello(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthTrello) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthTwilio struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthTwilio) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthTwilio) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthTwilio) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthTwilio
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthTwilio(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthTwilio) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthTwitch struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthTwitch) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthTwitch) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthTwitch) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthTwitch
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthTwitch(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthTwitch) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthTwitter struct {
	ApiKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthTwitter) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceConfigWebhookAuthTwitter) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthTwitter) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthTwitter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthTwitter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthTwitter) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthTypeform struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthTypeform) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthTypeform) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthTypeform) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthTypeform
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthTypeform(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthTypeform) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthUpollo struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthUpollo) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthUpollo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthUpollo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthUpollo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthUpollo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthUpollo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthVercelLogDrains struct {
	WebhookSecretKey *string `json:"webhook_secret_key,omitempty" url:"webhook_secret_key,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthVercelLogDrains) GetWebhookSecretKey() *string {
	if s == nil {
		return nil
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthVercelLogDrains) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthVercelLogDrains) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthVercelLogDrains
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthVercelLogDrains(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthVercelLogDrains) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthVercelWebhooks struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthVercelWebhooks) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthVercelWebhooks) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthVercelWebhooks) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthVercelWebhooks
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthVercelWebhooks(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthVercelWebhooks) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthWhatsApp struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthWhatsApp) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthWhatsApp) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthWhatsApp) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthWhatsApp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthWhatsApp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthWhatsApp) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthWix struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthWix) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthWix) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthWix) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthWix
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthWix(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthWix) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthWooCommerce struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthWooCommerce) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthWooCommerce) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthWooCommerce) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthWooCommerce
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthWooCommerce(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthWooCommerce) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthWorkOs struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthWorkOs) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthWorkOs) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthWorkOs) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthWorkOs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthWorkOs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthWorkOs) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthXero struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthXero) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthXero) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthXero) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthXero
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthXero(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthXero) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthZendesk struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthZendesk) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthZendesk) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthZendesk) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthZendesk
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthZendesk(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthZendesk) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWebhookAuthZoom struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWebhookAuthZoom) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWebhookAuthZoom) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWebhookAuthZoom) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWebhookAuthZoom
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWebhookAuthZoom(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWebhookAuthZoom) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWhatsAppAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWhatsAppAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWhatsAppAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWhatsAppAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWhatsAppAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWhatsAppAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWhatsAppAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWixAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWixAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWixAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWixAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWixAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWixAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWixAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWooCommerceAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWooCommerceAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWooCommerceAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWooCommerceAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWooCommerceAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWooCommerceAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWooCommerceAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigWorkOsAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigWorkOsAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigWorkOsAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigWorkOsAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigWorkOsAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigWorkOsAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigWorkOsAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigXeroAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigXeroAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigXeroAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigXeroAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigXeroAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigXeroAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigXeroAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigZendeskAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigZendeskAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigZendeskAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigZendeskAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigZendeskAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigZendeskAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigZendeskAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfigZoomAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfigZoomAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceConfigZoomAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfigZoomAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfigZoomAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfigZoomAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfigZoomAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type configs for the specified type
type SourceTypeConfig struct {
	SourceTypeConfigWebhook           *SourceTypeConfigWebhook
	SourceTypeConfigHttp              *SourceTypeConfigHttp
	SourceTypeConfigManaged           *SourceTypeConfigManaged
	SourceTypeConfigSanity            *SourceTypeConfigSanity
	SourceTypeConfigBridge            *SourceTypeConfigBridge
	SourceTypeConfigCloudSignal       *SourceTypeConfigCloudSignal
	SourceTypeConfigCourier           *SourceTypeConfigCourier
	SourceTypeConfigFrontApp          *SourceTypeConfigFrontApp
	SourceTypeConfigZoom              *SourceTypeConfigZoom
	SourceTypeConfigTwitter           *SourceTypeConfigTwitter
	SourceTypeConfigRecharge          *SourceTypeConfigRecharge
	SourceTypeConfigStripe            *SourceTypeConfigStripe
	SourceTypeConfigPropertyFinder    *SourceTypeConfigPropertyFinder
	SourceTypeConfigShopify           *SourceTypeConfigShopify
	SourceTypeConfigTwilio            *SourceTypeConfigTwilio
	SourceTypeConfigGitHub            *SourceTypeConfigGitHub
	SourceTypeConfigPostmark          *SourceTypeConfigPostmark
	SourceTypeConfigTypeform          *SourceTypeConfigTypeform
	SourceTypeConfigXero              *SourceTypeConfigXero
	SourceTypeConfigSvix              *SourceTypeConfigSvix
	SourceTypeConfigAdyen             *SourceTypeConfigAdyen
	SourceTypeConfigAkeneo            *SourceTypeConfigAkeneo
	SourceTypeConfigGitLab            *SourceTypeConfigGitLab
	SourceTypeConfigWooCommerce       *SourceTypeConfigWooCommerce
	SourceTypeConfigOura              *SourceTypeConfigOura
	SourceTypeConfigCommerceLayer     *SourceTypeConfigCommerceLayer
	SourceTypeConfigHubspot           *SourceTypeConfigHubspot
	SourceTypeConfigMailgun           *SourceTypeConfigMailgun
	SourceTypeConfigPersona           *SourceTypeConfigPersona
	SourceTypeConfigPipedrive         *SourceTypeConfigPipedrive
	SourceTypeConfigSendgrid          *SourceTypeConfigSendgrid
	SourceTypeConfigWorkOs            *SourceTypeConfigWorkOs
	SourceTypeConfigSynctera          *SourceTypeConfigSynctera
	SourceTypeConfigAwssns            *SourceTypeConfigAwssns
	SourceTypeConfig3DEye             *SourceTypeConfig3DEye
	SourceTypeConfigTwitch            *SourceTypeConfigTwitch
	SourceTypeConfigEnode             *SourceTypeConfigEnode
	SourceTypeConfigFavro             *SourceTypeConfigFavro
	SourceTypeConfigLinear            *SourceTypeConfigLinear
	SourceTypeConfigShopline          *SourceTypeConfigShopline
	SourceTypeConfigWix               *SourceTypeConfigWix
	SourceTypeConfigNmiPaymentGateway *SourceTypeConfigNmiPaymentGateway
	SourceTypeConfigOrb               *SourceTypeConfigOrb
	SourceTypeConfigPylon             *SourceTypeConfigPylon
	SourceTypeConfigRazorpay          *SourceTypeConfigRazorpay
	SourceTypeConfigRepay             *SourceTypeConfigRepay
	SourceTypeConfigSquare            *SourceTypeConfigSquare
	SourceTypeConfigSolidgate         *SourceTypeConfigSolidgate
	SourceTypeConfigTrello            *SourceTypeConfigTrello
	SourceTypeConfigEbay              *SourceTypeConfigEbay
	SourceTypeConfigTelnyx            *SourceTypeConfigTelnyx
	SourceTypeConfigDiscord           *SourceTypeConfigDiscord
	SourceTypeConfigTokenIo           *SourceTypeConfigTokenIo
	SourceTypeConfigFiserv            *SourceTypeConfigFiserv
	SourceTypeConfigBondsmith         *SourceTypeConfigBondsmith
	SourceTypeConfigVercelLogDrains   *SourceTypeConfigVercelLogDrains
	SourceTypeConfigVercelWebhooks    *SourceTypeConfigVercelWebhooks
	SourceTypeConfigTebex             *SourceTypeConfigTebex
	SourceTypeConfigSlack             *SourceTypeConfigSlack
	SourceTypeConfigMailchimp         *SourceTypeConfigMailchimp
	SourceTypeConfigPaddle            *SourceTypeConfigPaddle
	SourceTypeConfigPaypal            *SourceTypeConfigPaypal
	SourceTypeConfigTreezor           *SourceTypeConfigTreezor
	SourceTypeConfigPraxis            *SourceTypeConfigPraxis
	SourceTypeConfigCustomerIo        *SourceTypeConfigCustomerIo
	SourceTypeConfigFacebook          *SourceTypeConfigFacebook
	SourceTypeConfigWhatsApp          *SourceTypeConfigWhatsApp
	SourceTypeConfigReplicate         *SourceTypeConfigReplicate
	SourceTypeConfigTikTok            *SourceTypeConfigTikTok
	SourceTypeConfigAirwallex         *SourceTypeConfigAirwallex
	SourceTypeConfigZendesk           *SourceTypeConfigZendesk
	SourceTypeConfigUpollo            *SourceTypeConfigUpollo
	SourceTypeConfigLinkedIn          *SourceTypeConfigLinkedIn

	typ string
}

func NewSourceTypeConfigFromSourceTypeConfigWebhook(value *SourceTypeConfigWebhook) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigWebhook", SourceTypeConfigWebhook: value}
}

func NewSourceTypeConfigFromSourceTypeConfigHttp(value *SourceTypeConfigHttp) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigHttp", SourceTypeConfigHttp: value}
}

func NewSourceTypeConfigFromSourceTypeConfigManaged(value *SourceTypeConfigManaged) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigManaged", SourceTypeConfigManaged: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSanity(value *SourceTypeConfigSanity) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSanity", SourceTypeConfigSanity: value}
}

func NewSourceTypeConfigFromSourceTypeConfigBridge(value *SourceTypeConfigBridge) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigBridge", SourceTypeConfigBridge: value}
}

func NewSourceTypeConfigFromSourceTypeConfigCloudSignal(value *SourceTypeConfigCloudSignal) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigCloudSignal", SourceTypeConfigCloudSignal: value}
}

func NewSourceTypeConfigFromSourceTypeConfigCourier(value *SourceTypeConfigCourier) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigCourier", SourceTypeConfigCourier: value}
}

func NewSourceTypeConfigFromSourceTypeConfigFrontApp(value *SourceTypeConfigFrontApp) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigFrontApp", SourceTypeConfigFrontApp: value}
}

func NewSourceTypeConfigFromSourceTypeConfigZoom(value *SourceTypeConfigZoom) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigZoom", SourceTypeConfigZoom: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTwitter(value *SourceTypeConfigTwitter) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTwitter", SourceTypeConfigTwitter: value}
}

func NewSourceTypeConfigFromSourceTypeConfigRecharge(value *SourceTypeConfigRecharge) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigRecharge", SourceTypeConfigRecharge: value}
}

func NewSourceTypeConfigFromSourceTypeConfigStripe(value *SourceTypeConfigStripe) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigStripe", SourceTypeConfigStripe: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPropertyFinder(value *SourceTypeConfigPropertyFinder) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPropertyFinder", SourceTypeConfigPropertyFinder: value}
}

func NewSourceTypeConfigFromSourceTypeConfigShopify(value *SourceTypeConfigShopify) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigShopify", SourceTypeConfigShopify: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTwilio(value *SourceTypeConfigTwilio) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTwilio", SourceTypeConfigTwilio: value}
}

func NewSourceTypeConfigFromSourceTypeConfigGitHub(value *SourceTypeConfigGitHub) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigGitHub", SourceTypeConfigGitHub: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPostmark(value *SourceTypeConfigPostmark) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPostmark", SourceTypeConfigPostmark: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTypeform(value *SourceTypeConfigTypeform) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTypeform", SourceTypeConfigTypeform: value}
}

func NewSourceTypeConfigFromSourceTypeConfigXero(value *SourceTypeConfigXero) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigXero", SourceTypeConfigXero: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSvix(value *SourceTypeConfigSvix) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSvix", SourceTypeConfigSvix: value}
}

func NewSourceTypeConfigFromSourceTypeConfigAdyen(value *SourceTypeConfigAdyen) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigAdyen", SourceTypeConfigAdyen: value}
}

func NewSourceTypeConfigFromSourceTypeConfigAkeneo(value *SourceTypeConfigAkeneo) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigAkeneo", SourceTypeConfigAkeneo: value}
}

func NewSourceTypeConfigFromSourceTypeConfigGitLab(value *SourceTypeConfigGitLab) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigGitLab", SourceTypeConfigGitLab: value}
}

func NewSourceTypeConfigFromSourceTypeConfigWooCommerce(value *SourceTypeConfigWooCommerce) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigWooCommerce", SourceTypeConfigWooCommerce: value}
}

func NewSourceTypeConfigFromSourceTypeConfigOura(value *SourceTypeConfigOura) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigOura", SourceTypeConfigOura: value}
}

func NewSourceTypeConfigFromSourceTypeConfigCommerceLayer(value *SourceTypeConfigCommerceLayer) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigCommerceLayer", SourceTypeConfigCommerceLayer: value}
}

func NewSourceTypeConfigFromSourceTypeConfigHubspot(value *SourceTypeConfigHubspot) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigHubspot", SourceTypeConfigHubspot: value}
}

func NewSourceTypeConfigFromSourceTypeConfigMailgun(value *SourceTypeConfigMailgun) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigMailgun", SourceTypeConfigMailgun: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPersona(value *SourceTypeConfigPersona) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPersona", SourceTypeConfigPersona: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPipedrive(value *SourceTypeConfigPipedrive) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPipedrive", SourceTypeConfigPipedrive: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSendgrid(value *SourceTypeConfigSendgrid) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSendgrid", SourceTypeConfigSendgrid: value}
}

func NewSourceTypeConfigFromSourceTypeConfigWorkOs(value *SourceTypeConfigWorkOs) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigWorkOs", SourceTypeConfigWorkOs: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSynctera(value *SourceTypeConfigSynctera) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSynctera", SourceTypeConfigSynctera: value}
}

func NewSourceTypeConfigFromSourceTypeConfigAwssns(value *SourceTypeConfigAwssns) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigAwssns", SourceTypeConfigAwssns: value}
}

func NewSourceTypeConfigFromSourceTypeConfig3DEye(value *SourceTypeConfig3DEye) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfig3DEye", SourceTypeConfig3DEye: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTwitch(value *SourceTypeConfigTwitch) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTwitch", SourceTypeConfigTwitch: value}
}

func NewSourceTypeConfigFromSourceTypeConfigEnode(value *SourceTypeConfigEnode) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigEnode", SourceTypeConfigEnode: value}
}

func NewSourceTypeConfigFromSourceTypeConfigFavro(value *SourceTypeConfigFavro) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigFavro", SourceTypeConfigFavro: value}
}

func NewSourceTypeConfigFromSourceTypeConfigLinear(value *SourceTypeConfigLinear) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigLinear", SourceTypeConfigLinear: value}
}

func NewSourceTypeConfigFromSourceTypeConfigShopline(value *SourceTypeConfigShopline) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigShopline", SourceTypeConfigShopline: value}
}

func NewSourceTypeConfigFromSourceTypeConfigWix(value *SourceTypeConfigWix) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigWix", SourceTypeConfigWix: value}
}

func NewSourceTypeConfigFromSourceTypeConfigNmiPaymentGateway(value *SourceTypeConfigNmiPaymentGateway) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigNmiPaymentGateway", SourceTypeConfigNmiPaymentGateway: value}
}

func NewSourceTypeConfigFromSourceTypeConfigOrb(value *SourceTypeConfigOrb) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigOrb", SourceTypeConfigOrb: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPylon(value *SourceTypeConfigPylon) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPylon", SourceTypeConfigPylon: value}
}

func NewSourceTypeConfigFromSourceTypeConfigRazorpay(value *SourceTypeConfigRazorpay) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigRazorpay", SourceTypeConfigRazorpay: value}
}

func NewSourceTypeConfigFromSourceTypeConfigRepay(value *SourceTypeConfigRepay) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigRepay", SourceTypeConfigRepay: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSquare(value *SourceTypeConfigSquare) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSquare", SourceTypeConfigSquare: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSolidgate(value *SourceTypeConfigSolidgate) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSolidgate", SourceTypeConfigSolidgate: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTrello(value *SourceTypeConfigTrello) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTrello", SourceTypeConfigTrello: value}
}

func NewSourceTypeConfigFromSourceTypeConfigEbay(value *SourceTypeConfigEbay) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigEbay", SourceTypeConfigEbay: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTelnyx(value *SourceTypeConfigTelnyx) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTelnyx", SourceTypeConfigTelnyx: value}
}

func NewSourceTypeConfigFromSourceTypeConfigDiscord(value *SourceTypeConfigDiscord) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigDiscord", SourceTypeConfigDiscord: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTokenIo(value *SourceTypeConfigTokenIo) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTokenIo", SourceTypeConfigTokenIo: value}
}

func NewSourceTypeConfigFromSourceTypeConfigFiserv(value *SourceTypeConfigFiserv) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigFiserv", SourceTypeConfigFiserv: value}
}

func NewSourceTypeConfigFromSourceTypeConfigBondsmith(value *SourceTypeConfigBondsmith) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigBondsmith", SourceTypeConfigBondsmith: value}
}

func NewSourceTypeConfigFromSourceTypeConfigVercelLogDrains(value *SourceTypeConfigVercelLogDrains) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigVercelLogDrains", SourceTypeConfigVercelLogDrains: value}
}

func NewSourceTypeConfigFromSourceTypeConfigVercelWebhooks(value *SourceTypeConfigVercelWebhooks) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigVercelWebhooks", SourceTypeConfigVercelWebhooks: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTebex(value *SourceTypeConfigTebex) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTebex", SourceTypeConfigTebex: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSlack(value *SourceTypeConfigSlack) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSlack", SourceTypeConfigSlack: value}
}

func NewSourceTypeConfigFromSourceTypeConfigMailchimp(value *SourceTypeConfigMailchimp) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigMailchimp", SourceTypeConfigMailchimp: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPaddle(value *SourceTypeConfigPaddle) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPaddle", SourceTypeConfigPaddle: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPaypal(value *SourceTypeConfigPaypal) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPaypal", SourceTypeConfigPaypal: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTreezor(value *SourceTypeConfigTreezor) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTreezor", SourceTypeConfigTreezor: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPraxis(value *SourceTypeConfigPraxis) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPraxis", SourceTypeConfigPraxis: value}
}

func NewSourceTypeConfigFromSourceTypeConfigCustomerIo(value *SourceTypeConfigCustomerIo) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigCustomerIo", SourceTypeConfigCustomerIo: value}
}

func NewSourceTypeConfigFromSourceTypeConfigFacebook(value *SourceTypeConfigFacebook) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigFacebook", SourceTypeConfigFacebook: value}
}

func NewSourceTypeConfigFromSourceTypeConfigWhatsApp(value *SourceTypeConfigWhatsApp) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigWhatsApp", SourceTypeConfigWhatsApp: value}
}

func NewSourceTypeConfigFromSourceTypeConfigReplicate(value *SourceTypeConfigReplicate) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigReplicate", SourceTypeConfigReplicate: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTikTok(value *SourceTypeConfigTikTok) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTikTok", SourceTypeConfigTikTok: value}
}

func NewSourceTypeConfigFromSourceTypeConfigAirwallex(value *SourceTypeConfigAirwallex) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigAirwallex", SourceTypeConfigAirwallex: value}
}

func NewSourceTypeConfigFromSourceTypeConfigZendesk(value *SourceTypeConfigZendesk) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigZendesk", SourceTypeConfigZendesk: value}
}

func NewSourceTypeConfigFromSourceTypeConfigUpollo(value *SourceTypeConfigUpollo) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigUpollo", SourceTypeConfigUpollo: value}
}

func NewSourceTypeConfigFromSourceTypeConfigLinkedIn(value *SourceTypeConfigLinkedIn) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigLinkedIn", SourceTypeConfigLinkedIn: value}
}

func (s *SourceTypeConfig) GetSourceTypeConfigWebhook() *SourceTypeConfigWebhook {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWebhook
}

func (s *SourceTypeConfig) GetSourceTypeConfigHttp() *SourceTypeConfigHttp {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHttp
}

func (s *SourceTypeConfig) GetSourceTypeConfigManaged() *SourceTypeConfigManaged {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigManaged
}

func (s *SourceTypeConfig) GetSourceTypeConfigSanity() *SourceTypeConfigSanity {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSanity
}

func (s *SourceTypeConfig) GetSourceTypeConfigBridge() *SourceTypeConfigBridge {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigBridge
}

func (s *SourceTypeConfig) GetSourceTypeConfigCloudSignal() *SourceTypeConfigCloudSignal {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigCloudSignal
}

func (s *SourceTypeConfig) GetSourceTypeConfigCourier() *SourceTypeConfigCourier {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigCourier
}

func (s *SourceTypeConfig) GetSourceTypeConfigFrontApp() *SourceTypeConfigFrontApp {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigFrontApp
}

func (s *SourceTypeConfig) GetSourceTypeConfigZoom() *SourceTypeConfigZoom {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigZoom
}

func (s *SourceTypeConfig) GetSourceTypeConfigTwitter() *SourceTypeConfigTwitter {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTwitter
}

func (s *SourceTypeConfig) GetSourceTypeConfigRecharge() *SourceTypeConfigRecharge {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigRecharge
}

func (s *SourceTypeConfig) GetSourceTypeConfigStripe() *SourceTypeConfigStripe {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigStripe
}

func (s *SourceTypeConfig) GetSourceTypeConfigPropertyFinder() *SourceTypeConfigPropertyFinder {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPropertyFinder
}

func (s *SourceTypeConfig) GetSourceTypeConfigShopify() *SourceTypeConfigShopify {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigShopify
}

func (s *SourceTypeConfig) GetSourceTypeConfigTwilio() *SourceTypeConfigTwilio {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTwilio
}

func (s *SourceTypeConfig) GetSourceTypeConfigGitHub() *SourceTypeConfigGitHub {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigGitHub
}

func (s *SourceTypeConfig) GetSourceTypeConfigPostmark() *SourceTypeConfigPostmark {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPostmark
}

func (s *SourceTypeConfig) GetSourceTypeConfigTypeform() *SourceTypeConfigTypeform {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTypeform
}

func (s *SourceTypeConfig) GetSourceTypeConfigXero() *SourceTypeConfigXero {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigXero
}

func (s *SourceTypeConfig) GetSourceTypeConfigSvix() *SourceTypeConfigSvix {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSvix
}

func (s *SourceTypeConfig) GetSourceTypeConfigAdyen() *SourceTypeConfigAdyen {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigAdyen
}

func (s *SourceTypeConfig) GetSourceTypeConfigAkeneo() *SourceTypeConfigAkeneo {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigAkeneo
}

func (s *SourceTypeConfig) GetSourceTypeConfigGitLab() *SourceTypeConfigGitLab {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigGitLab
}

func (s *SourceTypeConfig) GetSourceTypeConfigWooCommerce() *SourceTypeConfigWooCommerce {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWooCommerce
}

func (s *SourceTypeConfig) GetSourceTypeConfigOura() *SourceTypeConfigOura {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigOura
}

func (s *SourceTypeConfig) GetSourceTypeConfigCommerceLayer() *SourceTypeConfigCommerceLayer {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigCommerceLayer
}

func (s *SourceTypeConfig) GetSourceTypeConfigHubspot() *SourceTypeConfigHubspot {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHubspot
}

func (s *SourceTypeConfig) GetSourceTypeConfigMailgun() *SourceTypeConfigMailgun {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigMailgun
}

func (s *SourceTypeConfig) GetSourceTypeConfigPersona() *SourceTypeConfigPersona {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPersona
}

func (s *SourceTypeConfig) GetSourceTypeConfigPipedrive() *SourceTypeConfigPipedrive {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPipedrive
}

func (s *SourceTypeConfig) GetSourceTypeConfigSendgrid() *SourceTypeConfigSendgrid {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSendgrid
}

func (s *SourceTypeConfig) GetSourceTypeConfigWorkOs() *SourceTypeConfigWorkOs {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWorkOs
}

func (s *SourceTypeConfig) GetSourceTypeConfigSynctera() *SourceTypeConfigSynctera {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSynctera
}

func (s *SourceTypeConfig) GetSourceTypeConfigAwssns() *SourceTypeConfigAwssns {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigAwssns
}

func (s *SourceTypeConfig) GetSourceTypeConfig3DEye() *SourceTypeConfig3DEye {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfig3DEye
}

func (s *SourceTypeConfig) GetSourceTypeConfigTwitch() *SourceTypeConfigTwitch {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTwitch
}

func (s *SourceTypeConfig) GetSourceTypeConfigEnode() *SourceTypeConfigEnode {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigEnode
}

func (s *SourceTypeConfig) GetSourceTypeConfigFavro() *SourceTypeConfigFavro {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigFavro
}

func (s *SourceTypeConfig) GetSourceTypeConfigLinear() *SourceTypeConfigLinear {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigLinear
}

func (s *SourceTypeConfig) GetSourceTypeConfigShopline() *SourceTypeConfigShopline {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigShopline
}

func (s *SourceTypeConfig) GetSourceTypeConfigWix() *SourceTypeConfigWix {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWix
}

func (s *SourceTypeConfig) GetSourceTypeConfigNmiPaymentGateway() *SourceTypeConfigNmiPaymentGateway {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigNmiPaymentGateway
}

func (s *SourceTypeConfig) GetSourceTypeConfigOrb() *SourceTypeConfigOrb {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigOrb
}

func (s *SourceTypeConfig) GetSourceTypeConfigPylon() *SourceTypeConfigPylon {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPylon
}

func (s *SourceTypeConfig) GetSourceTypeConfigRazorpay() *SourceTypeConfigRazorpay {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigRazorpay
}

func (s *SourceTypeConfig) GetSourceTypeConfigRepay() *SourceTypeConfigRepay {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigRepay
}

func (s *SourceTypeConfig) GetSourceTypeConfigSquare() *SourceTypeConfigSquare {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSquare
}

func (s *SourceTypeConfig) GetSourceTypeConfigSolidgate() *SourceTypeConfigSolidgate {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSolidgate
}

func (s *SourceTypeConfig) GetSourceTypeConfigTrello() *SourceTypeConfigTrello {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTrello
}

func (s *SourceTypeConfig) GetSourceTypeConfigEbay() *SourceTypeConfigEbay {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigEbay
}

func (s *SourceTypeConfig) GetSourceTypeConfigTelnyx() *SourceTypeConfigTelnyx {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTelnyx
}

func (s *SourceTypeConfig) GetSourceTypeConfigDiscord() *SourceTypeConfigDiscord {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigDiscord
}

func (s *SourceTypeConfig) GetSourceTypeConfigTokenIo() *SourceTypeConfigTokenIo {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTokenIo
}

func (s *SourceTypeConfig) GetSourceTypeConfigFiserv() *SourceTypeConfigFiserv {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigFiserv
}

func (s *SourceTypeConfig) GetSourceTypeConfigBondsmith() *SourceTypeConfigBondsmith {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigBondsmith
}

func (s *SourceTypeConfig) GetSourceTypeConfigVercelLogDrains() *SourceTypeConfigVercelLogDrains {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigVercelLogDrains
}

func (s *SourceTypeConfig) GetSourceTypeConfigVercelWebhooks() *SourceTypeConfigVercelWebhooks {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigVercelWebhooks
}

func (s *SourceTypeConfig) GetSourceTypeConfigTebex() *SourceTypeConfigTebex {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTebex
}

func (s *SourceTypeConfig) GetSourceTypeConfigSlack() *SourceTypeConfigSlack {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSlack
}

func (s *SourceTypeConfig) GetSourceTypeConfigMailchimp() *SourceTypeConfigMailchimp {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigMailchimp
}

func (s *SourceTypeConfig) GetSourceTypeConfigPaddle() *SourceTypeConfigPaddle {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPaddle
}

func (s *SourceTypeConfig) GetSourceTypeConfigPaypal() *SourceTypeConfigPaypal {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPaypal
}

func (s *SourceTypeConfig) GetSourceTypeConfigTreezor() *SourceTypeConfigTreezor {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTreezor
}

func (s *SourceTypeConfig) GetSourceTypeConfigPraxis() *SourceTypeConfigPraxis {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPraxis
}

func (s *SourceTypeConfig) GetSourceTypeConfigCustomerIo() *SourceTypeConfigCustomerIo {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigCustomerIo
}

func (s *SourceTypeConfig) GetSourceTypeConfigFacebook() *SourceTypeConfigFacebook {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigFacebook
}

func (s *SourceTypeConfig) GetSourceTypeConfigWhatsApp() *SourceTypeConfigWhatsApp {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWhatsApp
}

func (s *SourceTypeConfig) GetSourceTypeConfigReplicate() *SourceTypeConfigReplicate {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigReplicate
}

func (s *SourceTypeConfig) GetSourceTypeConfigTikTok() *SourceTypeConfigTikTok {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTikTok
}

func (s *SourceTypeConfig) GetSourceTypeConfigAirwallex() *SourceTypeConfigAirwallex {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigAirwallex
}

func (s *SourceTypeConfig) GetSourceTypeConfigZendesk() *SourceTypeConfigZendesk {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigZendesk
}

func (s *SourceTypeConfig) GetSourceTypeConfigUpollo() *SourceTypeConfigUpollo {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigUpollo
}

func (s *SourceTypeConfig) GetSourceTypeConfigLinkedIn() *SourceTypeConfigLinkedIn {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigLinkedIn
}

func (s *SourceTypeConfig) UnmarshalJSON(data []byte) error {
	valueSourceTypeConfigWebhook := new(SourceTypeConfigWebhook)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWebhook); err == nil {
		s.typ = "SourceTypeConfigWebhook"
		s.SourceTypeConfigWebhook = valueSourceTypeConfigWebhook
		return nil
	}
	valueSourceTypeConfigHttp := new(SourceTypeConfigHttp)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHttp); err == nil {
		s.typ = "SourceTypeConfigHttp"
		s.SourceTypeConfigHttp = valueSourceTypeConfigHttp
		return nil
	}
	valueSourceTypeConfigManaged := new(SourceTypeConfigManaged)
	if err := json.Unmarshal(data, &valueSourceTypeConfigManaged); err == nil {
		s.typ = "SourceTypeConfigManaged"
		s.SourceTypeConfigManaged = valueSourceTypeConfigManaged
		return nil
	}
	valueSourceTypeConfigSanity := new(SourceTypeConfigSanity)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSanity); err == nil {
		s.typ = "SourceTypeConfigSanity"
		s.SourceTypeConfigSanity = valueSourceTypeConfigSanity
		return nil
	}
	valueSourceTypeConfigBridge := new(SourceTypeConfigBridge)
	if err := json.Unmarshal(data, &valueSourceTypeConfigBridge); err == nil {
		s.typ = "SourceTypeConfigBridge"
		s.SourceTypeConfigBridge = valueSourceTypeConfigBridge
		return nil
	}
	valueSourceTypeConfigCloudSignal := new(SourceTypeConfigCloudSignal)
	if err := json.Unmarshal(data, &valueSourceTypeConfigCloudSignal); err == nil {
		s.typ = "SourceTypeConfigCloudSignal"
		s.SourceTypeConfigCloudSignal = valueSourceTypeConfigCloudSignal
		return nil
	}
	valueSourceTypeConfigCourier := new(SourceTypeConfigCourier)
	if err := json.Unmarshal(data, &valueSourceTypeConfigCourier); err == nil {
		s.typ = "SourceTypeConfigCourier"
		s.SourceTypeConfigCourier = valueSourceTypeConfigCourier
		return nil
	}
	valueSourceTypeConfigFrontApp := new(SourceTypeConfigFrontApp)
	if err := json.Unmarshal(data, &valueSourceTypeConfigFrontApp); err == nil {
		s.typ = "SourceTypeConfigFrontApp"
		s.SourceTypeConfigFrontApp = valueSourceTypeConfigFrontApp
		return nil
	}
	valueSourceTypeConfigZoom := new(SourceTypeConfigZoom)
	if err := json.Unmarshal(data, &valueSourceTypeConfigZoom); err == nil {
		s.typ = "SourceTypeConfigZoom"
		s.SourceTypeConfigZoom = valueSourceTypeConfigZoom
		return nil
	}
	valueSourceTypeConfigTwitter := new(SourceTypeConfigTwitter)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTwitter); err == nil {
		s.typ = "SourceTypeConfigTwitter"
		s.SourceTypeConfigTwitter = valueSourceTypeConfigTwitter
		return nil
	}
	valueSourceTypeConfigRecharge := new(SourceTypeConfigRecharge)
	if err := json.Unmarshal(data, &valueSourceTypeConfigRecharge); err == nil {
		s.typ = "SourceTypeConfigRecharge"
		s.SourceTypeConfigRecharge = valueSourceTypeConfigRecharge
		return nil
	}
	valueSourceTypeConfigStripe := new(SourceTypeConfigStripe)
	if err := json.Unmarshal(data, &valueSourceTypeConfigStripe); err == nil {
		s.typ = "SourceTypeConfigStripe"
		s.SourceTypeConfigStripe = valueSourceTypeConfigStripe
		return nil
	}
	valueSourceTypeConfigPropertyFinder := new(SourceTypeConfigPropertyFinder)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPropertyFinder); err == nil {
		s.typ = "SourceTypeConfigPropertyFinder"
		s.SourceTypeConfigPropertyFinder = valueSourceTypeConfigPropertyFinder
		return nil
	}
	valueSourceTypeConfigShopify := new(SourceTypeConfigShopify)
	if err := json.Unmarshal(data, &valueSourceTypeConfigShopify); err == nil {
		s.typ = "SourceTypeConfigShopify"
		s.SourceTypeConfigShopify = valueSourceTypeConfigShopify
		return nil
	}
	valueSourceTypeConfigTwilio := new(SourceTypeConfigTwilio)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTwilio); err == nil {
		s.typ = "SourceTypeConfigTwilio"
		s.SourceTypeConfigTwilio = valueSourceTypeConfigTwilio
		return nil
	}
	valueSourceTypeConfigGitHub := new(SourceTypeConfigGitHub)
	if err := json.Unmarshal(data, &valueSourceTypeConfigGitHub); err == nil {
		s.typ = "SourceTypeConfigGitHub"
		s.SourceTypeConfigGitHub = valueSourceTypeConfigGitHub
		return nil
	}
	valueSourceTypeConfigPostmark := new(SourceTypeConfigPostmark)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPostmark); err == nil {
		s.typ = "SourceTypeConfigPostmark"
		s.SourceTypeConfigPostmark = valueSourceTypeConfigPostmark
		return nil
	}
	valueSourceTypeConfigTypeform := new(SourceTypeConfigTypeform)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTypeform); err == nil {
		s.typ = "SourceTypeConfigTypeform"
		s.SourceTypeConfigTypeform = valueSourceTypeConfigTypeform
		return nil
	}
	valueSourceTypeConfigXero := new(SourceTypeConfigXero)
	if err := json.Unmarshal(data, &valueSourceTypeConfigXero); err == nil {
		s.typ = "SourceTypeConfigXero"
		s.SourceTypeConfigXero = valueSourceTypeConfigXero
		return nil
	}
	valueSourceTypeConfigSvix := new(SourceTypeConfigSvix)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSvix); err == nil {
		s.typ = "SourceTypeConfigSvix"
		s.SourceTypeConfigSvix = valueSourceTypeConfigSvix
		return nil
	}
	valueSourceTypeConfigAdyen := new(SourceTypeConfigAdyen)
	if err := json.Unmarshal(data, &valueSourceTypeConfigAdyen); err == nil {
		s.typ = "SourceTypeConfigAdyen"
		s.SourceTypeConfigAdyen = valueSourceTypeConfigAdyen
		return nil
	}
	valueSourceTypeConfigAkeneo := new(SourceTypeConfigAkeneo)
	if err := json.Unmarshal(data, &valueSourceTypeConfigAkeneo); err == nil {
		s.typ = "SourceTypeConfigAkeneo"
		s.SourceTypeConfigAkeneo = valueSourceTypeConfigAkeneo
		return nil
	}
	valueSourceTypeConfigGitLab := new(SourceTypeConfigGitLab)
	if err := json.Unmarshal(data, &valueSourceTypeConfigGitLab); err == nil {
		s.typ = "SourceTypeConfigGitLab"
		s.SourceTypeConfigGitLab = valueSourceTypeConfigGitLab
		return nil
	}
	valueSourceTypeConfigWooCommerce := new(SourceTypeConfigWooCommerce)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWooCommerce); err == nil {
		s.typ = "SourceTypeConfigWooCommerce"
		s.SourceTypeConfigWooCommerce = valueSourceTypeConfigWooCommerce
		return nil
	}
	valueSourceTypeConfigOura := new(SourceTypeConfigOura)
	if err := json.Unmarshal(data, &valueSourceTypeConfigOura); err == nil {
		s.typ = "SourceTypeConfigOura"
		s.SourceTypeConfigOura = valueSourceTypeConfigOura
		return nil
	}
	valueSourceTypeConfigCommerceLayer := new(SourceTypeConfigCommerceLayer)
	if err := json.Unmarshal(data, &valueSourceTypeConfigCommerceLayer); err == nil {
		s.typ = "SourceTypeConfigCommerceLayer"
		s.SourceTypeConfigCommerceLayer = valueSourceTypeConfigCommerceLayer
		return nil
	}
	valueSourceTypeConfigHubspot := new(SourceTypeConfigHubspot)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHubspot); err == nil {
		s.typ = "SourceTypeConfigHubspot"
		s.SourceTypeConfigHubspot = valueSourceTypeConfigHubspot
		return nil
	}
	valueSourceTypeConfigMailgun := new(SourceTypeConfigMailgun)
	if err := json.Unmarshal(data, &valueSourceTypeConfigMailgun); err == nil {
		s.typ = "SourceTypeConfigMailgun"
		s.SourceTypeConfigMailgun = valueSourceTypeConfigMailgun
		return nil
	}
	valueSourceTypeConfigPersona := new(SourceTypeConfigPersona)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPersona); err == nil {
		s.typ = "SourceTypeConfigPersona"
		s.SourceTypeConfigPersona = valueSourceTypeConfigPersona
		return nil
	}
	valueSourceTypeConfigPipedrive := new(SourceTypeConfigPipedrive)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPipedrive); err == nil {
		s.typ = "SourceTypeConfigPipedrive"
		s.SourceTypeConfigPipedrive = valueSourceTypeConfigPipedrive
		return nil
	}
	valueSourceTypeConfigSendgrid := new(SourceTypeConfigSendgrid)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSendgrid); err == nil {
		s.typ = "SourceTypeConfigSendgrid"
		s.SourceTypeConfigSendgrid = valueSourceTypeConfigSendgrid
		return nil
	}
	valueSourceTypeConfigWorkOs := new(SourceTypeConfigWorkOs)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWorkOs); err == nil {
		s.typ = "SourceTypeConfigWorkOs"
		s.SourceTypeConfigWorkOs = valueSourceTypeConfigWorkOs
		return nil
	}
	valueSourceTypeConfigSynctera := new(SourceTypeConfigSynctera)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSynctera); err == nil {
		s.typ = "SourceTypeConfigSynctera"
		s.SourceTypeConfigSynctera = valueSourceTypeConfigSynctera
		return nil
	}
	valueSourceTypeConfigAwssns := new(SourceTypeConfigAwssns)
	if err := json.Unmarshal(data, &valueSourceTypeConfigAwssns); err == nil {
		s.typ = "SourceTypeConfigAwssns"
		s.SourceTypeConfigAwssns = valueSourceTypeConfigAwssns
		return nil
	}
	valueSourceTypeConfig3DEye := new(SourceTypeConfig3DEye)
	if err := json.Unmarshal(data, &valueSourceTypeConfig3DEye); err == nil {
		s.typ = "SourceTypeConfig3DEye"
		s.SourceTypeConfig3DEye = valueSourceTypeConfig3DEye
		return nil
	}
	valueSourceTypeConfigTwitch := new(SourceTypeConfigTwitch)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTwitch); err == nil {
		s.typ = "SourceTypeConfigTwitch"
		s.SourceTypeConfigTwitch = valueSourceTypeConfigTwitch
		return nil
	}
	valueSourceTypeConfigEnode := new(SourceTypeConfigEnode)
	if err := json.Unmarshal(data, &valueSourceTypeConfigEnode); err == nil {
		s.typ = "SourceTypeConfigEnode"
		s.SourceTypeConfigEnode = valueSourceTypeConfigEnode
		return nil
	}
	valueSourceTypeConfigFavro := new(SourceTypeConfigFavro)
	if err := json.Unmarshal(data, &valueSourceTypeConfigFavro); err == nil {
		s.typ = "SourceTypeConfigFavro"
		s.SourceTypeConfigFavro = valueSourceTypeConfigFavro
		return nil
	}
	valueSourceTypeConfigLinear := new(SourceTypeConfigLinear)
	if err := json.Unmarshal(data, &valueSourceTypeConfigLinear); err == nil {
		s.typ = "SourceTypeConfigLinear"
		s.SourceTypeConfigLinear = valueSourceTypeConfigLinear
		return nil
	}
	valueSourceTypeConfigShopline := new(SourceTypeConfigShopline)
	if err := json.Unmarshal(data, &valueSourceTypeConfigShopline); err == nil {
		s.typ = "SourceTypeConfigShopline"
		s.SourceTypeConfigShopline = valueSourceTypeConfigShopline
		return nil
	}
	valueSourceTypeConfigWix := new(SourceTypeConfigWix)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWix); err == nil {
		s.typ = "SourceTypeConfigWix"
		s.SourceTypeConfigWix = valueSourceTypeConfigWix
		return nil
	}
	valueSourceTypeConfigNmiPaymentGateway := new(SourceTypeConfigNmiPaymentGateway)
	if err := json.Unmarshal(data, &valueSourceTypeConfigNmiPaymentGateway); err == nil {
		s.typ = "SourceTypeConfigNmiPaymentGateway"
		s.SourceTypeConfigNmiPaymentGateway = valueSourceTypeConfigNmiPaymentGateway
		return nil
	}
	valueSourceTypeConfigOrb := new(SourceTypeConfigOrb)
	if err := json.Unmarshal(data, &valueSourceTypeConfigOrb); err == nil {
		s.typ = "SourceTypeConfigOrb"
		s.SourceTypeConfigOrb = valueSourceTypeConfigOrb
		return nil
	}
	valueSourceTypeConfigPylon := new(SourceTypeConfigPylon)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPylon); err == nil {
		s.typ = "SourceTypeConfigPylon"
		s.SourceTypeConfigPylon = valueSourceTypeConfigPylon
		return nil
	}
	valueSourceTypeConfigRazorpay := new(SourceTypeConfigRazorpay)
	if err := json.Unmarshal(data, &valueSourceTypeConfigRazorpay); err == nil {
		s.typ = "SourceTypeConfigRazorpay"
		s.SourceTypeConfigRazorpay = valueSourceTypeConfigRazorpay
		return nil
	}
	valueSourceTypeConfigRepay := new(SourceTypeConfigRepay)
	if err := json.Unmarshal(data, &valueSourceTypeConfigRepay); err == nil {
		s.typ = "SourceTypeConfigRepay"
		s.SourceTypeConfigRepay = valueSourceTypeConfigRepay
		return nil
	}
	valueSourceTypeConfigSquare := new(SourceTypeConfigSquare)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSquare); err == nil {
		s.typ = "SourceTypeConfigSquare"
		s.SourceTypeConfigSquare = valueSourceTypeConfigSquare
		return nil
	}
	valueSourceTypeConfigSolidgate := new(SourceTypeConfigSolidgate)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSolidgate); err == nil {
		s.typ = "SourceTypeConfigSolidgate"
		s.SourceTypeConfigSolidgate = valueSourceTypeConfigSolidgate
		return nil
	}
	valueSourceTypeConfigTrello := new(SourceTypeConfigTrello)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTrello); err == nil {
		s.typ = "SourceTypeConfigTrello"
		s.SourceTypeConfigTrello = valueSourceTypeConfigTrello
		return nil
	}
	valueSourceTypeConfigEbay := new(SourceTypeConfigEbay)
	if err := json.Unmarshal(data, &valueSourceTypeConfigEbay); err == nil {
		s.typ = "SourceTypeConfigEbay"
		s.SourceTypeConfigEbay = valueSourceTypeConfigEbay
		return nil
	}
	valueSourceTypeConfigTelnyx := new(SourceTypeConfigTelnyx)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTelnyx); err == nil {
		s.typ = "SourceTypeConfigTelnyx"
		s.SourceTypeConfigTelnyx = valueSourceTypeConfigTelnyx
		return nil
	}
	valueSourceTypeConfigDiscord := new(SourceTypeConfigDiscord)
	if err := json.Unmarshal(data, &valueSourceTypeConfigDiscord); err == nil {
		s.typ = "SourceTypeConfigDiscord"
		s.SourceTypeConfigDiscord = valueSourceTypeConfigDiscord
		return nil
	}
	valueSourceTypeConfigTokenIo := new(SourceTypeConfigTokenIo)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTokenIo); err == nil {
		s.typ = "SourceTypeConfigTokenIo"
		s.SourceTypeConfigTokenIo = valueSourceTypeConfigTokenIo
		return nil
	}
	valueSourceTypeConfigFiserv := new(SourceTypeConfigFiserv)
	if err := json.Unmarshal(data, &valueSourceTypeConfigFiserv); err == nil {
		s.typ = "SourceTypeConfigFiserv"
		s.SourceTypeConfigFiserv = valueSourceTypeConfigFiserv
		return nil
	}
	valueSourceTypeConfigBondsmith := new(SourceTypeConfigBondsmith)
	if err := json.Unmarshal(data, &valueSourceTypeConfigBondsmith); err == nil {
		s.typ = "SourceTypeConfigBondsmith"
		s.SourceTypeConfigBondsmith = valueSourceTypeConfigBondsmith
		return nil
	}
	valueSourceTypeConfigVercelLogDrains := new(SourceTypeConfigVercelLogDrains)
	if err := json.Unmarshal(data, &valueSourceTypeConfigVercelLogDrains); err == nil {
		s.typ = "SourceTypeConfigVercelLogDrains"
		s.SourceTypeConfigVercelLogDrains = valueSourceTypeConfigVercelLogDrains
		return nil
	}
	valueSourceTypeConfigVercelWebhooks := new(SourceTypeConfigVercelWebhooks)
	if err := json.Unmarshal(data, &valueSourceTypeConfigVercelWebhooks); err == nil {
		s.typ = "SourceTypeConfigVercelWebhooks"
		s.SourceTypeConfigVercelWebhooks = valueSourceTypeConfigVercelWebhooks
		return nil
	}
	valueSourceTypeConfigTebex := new(SourceTypeConfigTebex)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTebex); err == nil {
		s.typ = "SourceTypeConfigTebex"
		s.SourceTypeConfigTebex = valueSourceTypeConfigTebex
		return nil
	}
	valueSourceTypeConfigSlack := new(SourceTypeConfigSlack)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSlack); err == nil {
		s.typ = "SourceTypeConfigSlack"
		s.SourceTypeConfigSlack = valueSourceTypeConfigSlack
		return nil
	}
	valueSourceTypeConfigMailchimp := new(SourceTypeConfigMailchimp)
	if err := json.Unmarshal(data, &valueSourceTypeConfigMailchimp); err == nil {
		s.typ = "SourceTypeConfigMailchimp"
		s.SourceTypeConfigMailchimp = valueSourceTypeConfigMailchimp
		return nil
	}
	valueSourceTypeConfigPaddle := new(SourceTypeConfigPaddle)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPaddle); err == nil {
		s.typ = "SourceTypeConfigPaddle"
		s.SourceTypeConfigPaddle = valueSourceTypeConfigPaddle
		return nil
	}
	valueSourceTypeConfigPaypal := new(SourceTypeConfigPaypal)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPaypal); err == nil {
		s.typ = "SourceTypeConfigPaypal"
		s.SourceTypeConfigPaypal = valueSourceTypeConfigPaypal
		return nil
	}
	valueSourceTypeConfigTreezor := new(SourceTypeConfigTreezor)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTreezor); err == nil {
		s.typ = "SourceTypeConfigTreezor"
		s.SourceTypeConfigTreezor = valueSourceTypeConfigTreezor
		return nil
	}
	valueSourceTypeConfigPraxis := new(SourceTypeConfigPraxis)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPraxis); err == nil {
		s.typ = "SourceTypeConfigPraxis"
		s.SourceTypeConfigPraxis = valueSourceTypeConfigPraxis
		return nil
	}
	valueSourceTypeConfigCustomerIo := new(SourceTypeConfigCustomerIo)
	if err := json.Unmarshal(data, &valueSourceTypeConfigCustomerIo); err == nil {
		s.typ = "SourceTypeConfigCustomerIo"
		s.SourceTypeConfigCustomerIo = valueSourceTypeConfigCustomerIo
		return nil
	}
	valueSourceTypeConfigFacebook := new(SourceTypeConfigFacebook)
	if err := json.Unmarshal(data, &valueSourceTypeConfigFacebook); err == nil {
		s.typ = "SourceTypeConfigFacebook"
		s.SourceTypeConfigFacebook = valueSourceTypeConfigFacebook
		return nil
	}
	valueSourceTypeConfigWhatsApp := new(SourceTypeConfigWhatsApp)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWhatsApp); err == nil {
		s.typ = "SourceTypeConfigWhatsApp"
		s.SourceTypeConfigWhatsApp = valueSourceTypeConfigWhatsApp
		return nil
	}
	valueSourceTypeConfigReplicate := new(SourceTypeConfigReplicate)
	if err := json.Unmarshal(data, &valueSourceTypeConfigReplicate); err == nil {
		s.typ = "SourceTypeConfigReplicate"
		s.SourceTypeConfigReplicate = valueSourceTypeConfigReplicate
		return nil
	}
	valueSourceTypeConfigTikTok := new(SourceTypeConfigTikTok)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTikTok); err == nil {
		s.typ = "SourceTypeConfigTikTok"
		s.SourceTypeConfigTikTok = valueSourceTypeConfigTikTok
		return nil
	}
	valueSourceTypeConfigAirwallex := new(SourceTypeConfigAirwallex)
	if err := json.Unmarshal(data, &valueSourceTypeConfigAirwallex); err == nil {
		s.typ = "SourceTypeConfigAirwallex"
		s.SourceTypeConfigAirwallex = valueSourceTypeConfigAirwallex
		return nil
	}
	valueSourceTypeConfigZendesk := new(SourceTypeConfigZendesk)
	if err := json.Unmarshal(data, &valueSourceTypeConfigZendesk); err == nil {
		s.typ = "SourceTypeConfigZendesk"
		s.SourceTypeConfigZendesk = valueSourceTypeConfigZendesk
		return nil
	}
	valueSourceTypeConfigUpollo := new(SourceTypeConfigUpollo)
	if err := json.Unmarshal(data, &valueSourceTypeConfigUpollo); err == nil {
		s.typ = "SourceTypeConfigUpollo"
		s.SourceTypeConfigUpollo = valueSourceTypeConfigUpollo
		return nil
	}
	valueSourceTypeConfigLinkedIn := new(SourceTypeConfigLinkedIn)
	if err := json.Unmarshal(data, &valueSourceTypeConfigLinkedIn); err == nil {
		s.typ = "SourceTypeConfigLinkedIn"
		s.SourceTypeConfigLinkedIn = valueSourceTypeConfigLinkedIn
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SourceTypeConfig) MarshalJSON() ([]byte, error) {
	if s.typ == "SourceTypeConfigWebhook" || s.SourceTypeConfigWebhook != nil {
		return json.Marshal(s.SourceTypeConfigWebhook)
	}
	if s.typ == "SourceTypeConfigHttp" || s.SourceTypeConfigHttp != nil {
		return json.Marshal(s.SourceTypeConfigHttp)
	}
	if s.typ == "SourceTypeConfigManaged" || s.SourceTypeConfigManaged != nil {
		return json.Marshal(s.SourceTypeConfigManaged)
	}
	if s.typ == "SourceTypeConfigSanity" || s.SourceTypeConfigSanity != nil {
		return json.Marshal(s.SourceTypeConfigSanity)
	}
	if s.typ == "SourceTypeConfigBridge" || s.SourceTypeConfigBridge != nil {
		return json.Marshal(s.SourceTypeConfigBridge)
	}
	if s.typ == "SourceTypeConfigCloudSignal" || s.SourceTypeConfigCloudSignal != nil {
		return json.Marshal(s.SourceTypeConfigCloudSignal)
	}
	if s.typ == "SourceTypeConfigCourier" || s.SourceTypeConfigCourier != nil {
		return json.Marshal(s.SourceTypeConfigCourier)
	}
	if s.typ == "SourceTypeConfigFrontApp" || s.SourceTypeConfigFrontApp != nil {
		return json.Marshal(s.SourceTypeConfigFrontApp)
	}
	if s.typ == "SourceTypeConfigZoom" || s.SourceTypeConfigZoom != nil {
		return json.Marshal(s.SourceTypeConfigZoom)
	}
	if s.typ == "SourceTypeConfigTwitter" || s.SourceTypeConfigTwitter != nil {
		return json.Marshal(s.SourceTypeConfigTwitter)
	}
	if s.typ == "SourceTypeConfigRecharge" || s.SourceTypeConfigRecharge != nil {
		return json.Marshal(s.SourceTypeConfigRecharge)
	}
	if s.typ == "SourceTypeConfigStripe" || s.SourceTypeConfigStripe != nil {
		return json.Marshal(s.SourceTypeConfigStripe)
	}
	if s.typ == "SourceTypeConfigPropertyFinder" || s.SourceTypeConfigPropertyFinder != nil {
		return json.Marshal(s.SourceTypeConfigPropertyFinder)
	}
	if s.typ == "SourceTypeConfigShopify" || s.SourceTypeConfigShopify != nil {
		return json.Marshal(s.SourceTypeConfigShopify)
	}
	if s.typ == "SourceTypeConfigTwilio" || s.SourceTypeConfigTwilio != nil {
		return json.Marshal(s.SourceTypeConfigTwilio)
	}
	if s.typ == "SourceTypeConfigGitHub" || s.SourceTypeConfigGitHub != nil {
		return json.Marshal(s.SourceTypeConfigGitHub)
	}
	if s.typ == "SourceTypeConfigPostmark" || s.SourceTypeConfigPostmark != nil {
		return json.Marshal(s.SourceTypeConfigPostmark)
	}
	if s.typ == "SourceTypeConfigTypeform" || s.SourceTypeConfigTypeform != nil {
		return json.Marshal(s.SourceTypeConfigTypeform)
	}
	if s.typ == "SourceTypeConfigXero" || s.SourceTypeConfigXero != nil {
		return json.Marshal(s.SourceTypeConfigXero)
	}
	if s.typ == "SourceTypeConfigSvix" || s.SourceTypeConfigSvix != nil {
		return json.Marshal(s.SourceTypeConfigSvix)
	}
	if s.typ == "SourceTypeConfigAdyen" || s.SourceTypeConfigAdyen != nil {
		return json.Marshal(s.SourceTypeConfigAdyen)
	}
	if s.typ == "SourceTypeConfigAkeneo" || s.SourceTypeConfigAkeneo != nil {
		return json.Marshal(s.SourceTypeConfigAkeneo)
	}
	if s.typ == "SourceTypeConfigGitLab" || s.SourceTypeConfigGitLab != nil {
		return json.Marshal(s.SourceTypeConfigGitLab)
	}
	if s.typ == "SourceTypeConfigWooCommerce" || s.SourceTypeConfigWooCommerce != nil {
		return json.Marshal(s.SourceTypeConfigWooCommerce)
	}
	if s.typ == "SourceTypeConfigOura" || s.SourceTypeConfigOura != nil {
		return json.Marshal(s.SourceTypeConfigOura)
	}
	if s.typ == "SourceTypeConfigCommerceLayer" || s.SourceTypeConfigCommerceLayer != nil {
		return json.Marshal(s.SourceTypeConfigCommerceLayer)
	}
	if s.typ == "SourceTypeConfigHubspot" || s.SourceTypeConfigHubspot != nil {
		return json.Marshal(s.SourceTypeConfigHubspot)
	}
	if s.typ == "SourceTypeConfigMailgun" || s.SourceTypeConfigMailgun != nil {
		return json.Marshal(s.SourceTypeConfigMailgun)
	}
	if s.typ == "SourceTypeConfigPersona" || s.SourceTypeConfigPersona != nil {
		return json.Marshal(s.SourceTypeConfigPersona)
	}
	if s.typ == "SourceTypeConfigPipedrive" || s.SourceTypeConfigPipedrive != nil {
		return json.Marshal(s.SourceTypeConfigPipedrive)
	}
	if s.typ == "SourceTypeConfigSendgrid" || s.SourceTypeConfigSendgrid != nil {
		return json.Marshal(s.SourceTypeConfigSendgrid)
	}
	if s.typ == "SourceTypeConfigWorkOs" || s.SourceTypeConfigWorkOs != nil {
		return json.Marshal(s.SourceTypeConfigWorkOs)
	}
	if s.typ == "SourceTypeConfigSynctera" || s.SourceTypeConfigSynctera != nil {
		return json.Marshal(s.SourceTypeConfigSynctera)
	}
	if s.typ == "SourceTypeConfigAwssns" || s.SourceTypeConfigAwssns != nil {
		return json.Marshal(s.SourceTypeConfigAwssns)
	}
	if s.typ == "SourceTypeConfig3DEye" || s.SourceTypeConfig3DEye != nil {
		return json.Marshal(s.SourceTypeConfig3DEye)
	}
	if s.typ == "SourceTypeConfigTwitch" || s.SourceTypeConfigTwitch != nil {
		return json.Marshal(s.SourceTypeConfigTwitch)
	}
	if s.typ == "SourceTypeConfigEnode" || s.SourceTypeConfigEnode != nil {
		return json.Marshal(s.SourceTypeConfigEnode)
	}
	if s.typ == "SourceTypeConfigFavro" || s.SourceTypeConfigFavro != nil {
		return json.Marshal(s.SourceTypeConfigFavro)
	}
	if s.typ == "SourceTypeConfigLinear" || s.SourceTypeConfigLinear != nil {
		return json.Marshal(s.SourceTypeConfigLinear)
	}
	if s.typ == "SourceTypeConfigShopline" || s.SourceTypeConfigShopline != nil {
		return json.Marshal(s.SourceTypeConfigShopline)
	}
	if s.typ == "SourceTypeConfigWix" || s.SourceTypeConfigWix != nil {
		return json.Marshal(s.SourceTypeConfigWix)
	}
	if s.typ == "SourceTypeConfigNmiPaymentGateway" || s.SourceTypeConfigNmiPaymentGateway != nil {
		return json.Marshal(s.SourceTypeConfigNmiPaymentGateway)
	}
	if s.typ == "SourceTypeConfigOrb" || s.SourceTypeConfigOrb != nil {
		return json.Marshal(s.SourceTypeConfigOrb)
	}
	if s.typ == "SourceTypeConfigPylon" || s.SourceTypeConfigPylon != nil {
		return json.Marshal(s.SourceTypeConfigPylon)
	}
	if s.typ == "SourceTypeConfigRazorpay" || s.SourceTypeConfigRazorpay != nil {
		return json.Marshal(s.SourceTypeConfigRazorpay)
	}
	if s.typ == "SourceTypeConfigRepay" || s.SourceTypeConfigRepay != nil {
		return json.Marshal(s.SourceTypeConfigRepay)
	}
	if s.typ == "SourceTypeConfigSquare" || s.SourceTypeConfigSquare != nil {
		return json.Marshal(s.SourceTypeConfigSquare)
	}
	if s.typ == "SourceTypeConfigSolidgate" || s.SourceTypeConfigSolidgate != nil {
		return json.Marshal(s.SourceTypeConfigSolidgate)
	}
	if s.typ == "SourceTypeConfigTrello" || s.SourceTypeConfigTrello != nil {
		return json.Marshal(s.SourceTypeConfigTrello)
	}
	if s.typ == "SourceTypeConfigEbay" || s.SourceTypeConfigEbay != nil {
		return json.Marshal(s.SourceTypeConfigEbay)
	}
	if s.typ == "SourceTypeConfigTelnyx" || s.SourceTypeConfigTelnyx != nil {
		return json.Marshal(s.SourceTypeConfigTelnyx)
	}
	if s.typ == "SourceTypeConfigDiscord" || s.SourceTypeConfigDiscord != nil {
		return json.Marshal(s.SourceTypeConfigDiscord)
	}
	if s.typ == "SourceTypeConfigTokenIo" || s.SourceTypeConfigTokenIo != nil {
		return json.Marshal(s.SourceTypeConfigTokenIo)
	}
	if s.typ == "SourceTypeConfigFiserv" || s.SourceTypeConfigFiserv != nil {
		return json.Marshal(s.SourceTypeConfigFiserv)
	}
	if s.typ == "SourceTypeConfigBondsmith" || s.SourceTypeConfigBondsmith != nil {
		return json.Marshal(s.SourceTypeConfigBondsmith)
	}
	if s.typ == "SourceTypeConfigVercelLogDrains" || s.SourceTypeConfigVercelLogDrains != nil {
		return json.Marshal(s.SourceTypeConfigVercelLogDrains)
	}
	if s.typ == "SourceTypeConfigVercelWebhooks" || s.SourceTypeConfigVercelWebhooks != nil {
		return json.Marshal(s.SourceTypeConfigVercelWebhooks)
	}
	if s.typ == "SourceTypeConfigTebex" || s.SourceTypeConfigTebex != nil {
		return json.Marshal(s.SourceTypeConfigTebex)
	}
	if s.typ == "SourceTypeConfigSlack" || s.SourceTypeConfigSlack != nil {
		return json.Marshal(s.SourceTypeConfigSlack)
	}
	if s.typ == "SourceTypeConfigMailchimp" || s.SourceTypeConfigMailchimp != nil {
		return json.Marshal(s.SourceTypeConfigMailchimp)
	}
	if s.typ == "SourceTypeConfigPaddle" || s.SourceTypeConfigPaddle != nil {
		return json.Marshal(s.SourceTypeConfigPaddle)
	}
	if s.typ == "SourceTypeConfigPaypal" || s.SourceTypeConfigPaypal != nil {
		return json.Marshal(s.SourceTypeConfigPaypal)
	}
	if s.typ == "SourceTypeConfigTreezor" || s.SourceTypeConfigTreezor != nil {
		return json.Marshal(s.SourceTypeConfigTreezor)
	}
	if s.typ == "SourceTypeConfigPraxis" || s.SourceTypeConfigPraxis != nil {
		return json.Marshal(s.SourceTypeConfigPraxis)
	}
	if s.typ == "SourceTypeConfigCustomerIo" || s.SourceTypeConfigCustomerIo != nil {
		return json.Marshal(s.SourceTypeConfigCustomerIo)
	}
	if s.typ == "SourceTypeConfigFacebook" || s.SourceTypeConfigFacebook != nil {
		return json.Marshal(s.SourceTypeConfigFacebook)
	}
	if s.typ == "SourceTypeConfigWhatsApp" || s.SourceTypeConfigWhatsApp != nil {
		return json.Marshal(s.SourceTypeConfigWhatsApp)
	}
	if s.typ == "SourceTypeConfigReplicate" || s.SourceTypeConfigReplicate != nil {
		return json.Marshal(s.SourceTypeConfigReplicate)
	}
	if s.typ == "SourceTypeConfigTikTok" || s.SourceTypeConfigTikTok != nil {
		return json.Marshal(s.SourceTypeConfigTikTok)
	}
	if s.typ == "SourceTypeConfigAirwallex" || s.SourceTypeConfigAirwallex != nil {
		return json.Marshal(s.SourceTypeConfigAirwallex)
	}
	if s.typ == "SourceTypeConfigZendesk" || s.SourceTypeConfigZendesk != nil {
		return json.Marshal(s.SourceTypeConfigZendesk)
	}
	if s.typ == "SourceTypeConfigUpollo" || s.SourceTypeConfigUpollo != nil {
		return json.Marshal(s.SourceTypeConfigUpollo)
	}
	if s.typ == "SourceTypeConfigLinkedIn" || s.SourceTypeConfigLinkedIn != nil {
		return json.Marshal(s.SourceTypeConfigLinkedIn)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SourceTypeConfigVisitor interface {
	VisitSourceTypeConfigWebhook(*SourceTypeConfigWebhook) error
	VisitSourceTypeConfigHttp(*SourceTypeConfigHttp) error
	VisitSourceTypeConfigManaged(*SourceTypeConfigManaged) error
	VisitSourceTypeConfigSanity(*SourceTypeConfigSanity) error
	VisitSourceTypeConfigBridge(*SourceTypeConfigBridge) error
	VisitSourceTypeConfigCloudSignal(*SourceTypeConfigCloudSignal) error
	VisitSourceTypeConfigCourier(*SourceTypeConfigCourier) error
	VisitSourceTypeConfigFrontApp(*SourceTypeConfigFrontApp) error
	VisitSourceTypeConfigZoom(*SourceTypeConfigZoom) error
	VisitSourceTypeConfigTwitter(*SourceTypeConfigTwitter) error
	VisitSourceTypeConfigRecharge(*SourceTypeConfigRecharge) error
	VisitSourceTypeConfigStripe(*SourceTypeConfigStripe) error
	VisitSourceTypeConfigPropertyFinder(*SourceTypeConfigPropertyFinder) error
	VisitSourceTypeConfigShopify(*SourceTypeConfigShopify) error
	VisitSourceTypeConfigTwilio(*SourceTypeConfigTwilio) error
	VisitSourceTypeConfigGitHub(*SourceTypeConfigGitHub) error
	VisitSourceTypeConfigPostmark(*SourceTypeConfigPostmark) error
	VisitSourceTypeConfigTypeform(*SourceTypeConfigTypeform) error
	VisitSourceTypeConfigXero(*SourceTypeConfigXero) error
	VisitSourceTypeConfigSvix(*SourceTypeConfigSvix) error
	VisitSourceTypeConfigAdyen(*SourceTypeConfigAdyen) error
	VisitSourceTypeConfigAkeneo(*SourceTypeConfigAkeneo) error
	VisitSourceTypeConfigGitLab(*SourceTypeConfigGitLab) error
	VisitSourceTypeConfigWooCommerce(*SourceTypeConfigWooCommerce) error
	VisitSourceTypeConfigOura(*SourceTypeConfigOura) error
	VisitSourceTypeConfigCommerceLayer(*SourceTypeConfigCommerceLayer) error
	VisitSourceTypeConfigHubspot(*SourceTypeConfigHubspot) error
	VisitSourceTypeConfigMailgun(*SourceTypeConfigMailgun) error
	VisitSourceTypeConfigPersona(*SourceTypeConfigPersona) error
	VisitSourceTypeConfigPipedrive(*SourceTypeConfigPipedrive) error
	VisitSourceTypeConfigSendgrid(*SourceTypeConfigSendgrid) error
	VisitSourceTypeConfigWorkOs(*SourceTypeConfigWorkOs) error
	VisitSourceTypeConfigSynctera(*SourceTypeConfigSynctera) error
	VisitSourceTypeConfigAwssns(*SourceTypeConfigAwssns) error
	VisitSourceTypeConfig3DEye(*SourceTypeConfig3DEye) error
	VisitSourceTypeConfigTwitch(*SourceTypeConfigTwitch) error
	VisitSourceTypeConfigEnode(*SourceTypeConfigEnode) error
	VisitSourceTypeConfigFavro(*SourceTypeConfigFavro) error
	VisitSourceTypeConfigLinear(*SourceTypeConfigLinear) error
	VisitSourceTypeConfigShopline(*SourceTypeConfigShopline) error
	VisitSourceTypeConfigWix(*SourceTypeConfigWix) error
	VisitSourceTypeConfigNmiPaymentGateway(*SourceTypeConfigNmiPaymentGateway) error
	VisitSourceTypeConfigOrb(*SourceTypeConfigOrb) error
	VisitSourceTypeConfigPylon(*SourceTypeConfigPylon) error
	VisitSourceTypeConfigRazorpay(*SourceTypeConfigRazorpay) error
	VisitSourceTypeConfigRepay(*SourceTypeConfigRepay) error
	VisitSourceTypeConfigSquare(*SourceTypeConfigSquare) error
	VisitSourceTypeConfigSolidgate(*SourceTypeConfigSolidgate) error
	VisitSourceTypeConfigTrello(*SourceTypeConfigTrello) error
	VisitSourceTypeConfigEbay(*SourceTypeConfigEbay) error
	VisitSourceTypeConfigTelnyx(*SourceTypeConfigTelnyx) error
	VisitSourceTypeConfigDiscord(*SourceTypeConfigDiscord) error
	VisitSourceTypeConfigTokenIo(*SourceTypeConfigTokenIo) error
	VisitSourceTypeConfigFiserv(*SourceTypeConfigFiserv) error
	VisitSourceTypeConfigBondsmith(*SourceTypeConfigBondsmith) error
	VisitSourceTypeConfigVercelLogDrains(*SourceTypeConfigVercelLogDrains) error
	VisitSourceTypeConfigVercelWebhooks(*SourceTypeConfigVercelWebhooks) error
	VisitSourceTypeConfigTebex(*SourceTypeConfigTebex) error
	VisitSourceTypeConfigSlack(*SourceTypeConfigSlack) error
	VisitSourceTypeConfigMailchimp(*SourceTypeConfigMailchimp) error
	VisitSourceTypeConfigPaddle(*SourceTypeConfigPaddle) error
	VisitSourceTypeConfigPaypal(*SourceTypeConfigPaypal) error
	VisitSourceTypeConfigTreezor(*SourceTypeConfigTreezor) error
	VisitSourceTypeConfigPraxis(*SourceTypeConfigPraxis) error
	VisitSourceTypeConfigCustomerIo(*SourceTypeConfigCustomerIo) error
	VisitSourceTypeConfigFacebook(*SourceTypeConfigFacebook) error
	VisitSourceTypeConfigWhatsApp(*SourceTypeConfigWhatsApp) error
	VisitSourceTypeConfigReplicate(*SourceTypeConfigReplicate) error
	VisitSourceTypeConfigTikTok(*SourceTypeConfigTikTok) error
	VisitSourceTypeConfigAirwallex(*SourceTypeConfigAirwallex) error
	VisitSourceTypeConfigZendesk(*SourceTypeConfigZendesk) error
	VisitSourceTypeConfigUpollo(*SourceTypeConfigUpollo) error
	VisitSourceTypeConfigLinkedIn(*SourceTypeConfigLinkedIn) error
}

func (s *SourceTypeConfig) Accept(visitor SourceTypeConfigVisitor) error {
	if s.typ == "SourceTypeConfigWebhook" || s.SourceTypeConfigWebhook != nil {
		return visitor.VisitSourceTypeConfigWebhook(s.SourceTypeConfigWebhook)
	}
	if s.typ == "SourceTypeConfigHttp" || s.SourceTypeConfigHttp != nil {
		return visitor.VisitSourceTypeConfigHttp(s.SourceTypeConfigHttp)
	}
	if s.typ == "SourceTypeConfigManaged" || s.SourceTypeConfigManaged != nil {
		return visitor.VisitSourceTypeConfigManaged(s.SourceTypeConfigManaged)
	}
	if s.typ == "SourceTypeConfigSanity" || s.SourceTypeConfigSanity != nil {
		return visitor.VisitSourceTypeConfigSanity(s.SourceTypeConfigSanity)
	}
	if s.typ == "SourceTypeConfigBridge" || s.SourceTypeConfigBridge != nil {
		return visitor.VisitSourceTypeConfigBridge(s.SourceTypeConfigBridge)
	}
	if s.typ == "SourceTypeConfigCloudSignal" || s.SourceTypeConfigCloudSignal != nil {
		return visitor.VisitSourceTypeConfigCloudSignal(s.SourceTypeConfigCloudSignal)
	}
	if s.typ == "SourceTypeConfigCourier" || s.SourceTypeConfigCourier != nil {
		return visitor.VisitSourceTypeConfigCourier(s.SourceTypeConfigCourier)
	}
	if s.typ == "SourceTypeConfigFrontApp" || s.SourceTypeConfigFrontApp != nil {
		return visitor.VisitSourceTypeConfigFrontApp(s.SourceTypeConfigFrontApp)
	}
	if s.typ == "SourceTypeConfigZoom" || s.SourceTypeConfigZoom != nil {
		return visitor.VisitSourceTypeConfigZoom(s.SourceTypeConfigZoom)
	}
	if s.typ == "SourceTypeConfigTwitter" || s.SourceTypeConfigTwitter != nil {
		return visitor.VisitSourceTypeConfigTwitter(s.SourceTypeConfigTwitter)
	}
	if s.typ == "SourceTypeConfigRecharge" || s.SourceTypeConfigRecharge != nil {
		return visitor.VisitSourceTypeConfigRecharge(s.SourceTypeConfigRecharge)
	}
	if s.typ == "SourceTypeConfigStripe" || s.SourceTypeConfigStripe != nil {
		return visitor.VisitSourceTypeConfigStripe(s.SourceTypeConfigStripe)
	}
	if s.typ == "SourceTypeConfigPropertyFinder" || s.SourceTypeConfigPropertyFinder != nil {
		return visitor.VisitSourceTypeConfigPropertyFinder(s.SourceTypeConfigPropertyFinder)
	}
	if s.typ == "SourceTypeConfigShopify" || s.SourceTypeConfigShopify != nil {
		return visitor.VisitSourceTypeConfigShopify(s.SourceTypeConfigShopify)
	}
	if s.typ == "SourceTypeConfigTwilio" || s.SourceTypeConfigTwilio != nil {
		return visitor.VisitSourceTypeConfigTwilio(s.SourceTypeConfigTwilio)
	}
	if s.typ == "SourceTypeConfigGitHub" || s.SourceTypeConfigGitHub != nil {
		return visitor.VisitSourceTypeConfigGitHub(s.SourceTypeConfigGitHub)
	}
	if s.typ == "SourceTypeConfigPostmark" || s.SourceTypeConfigPostmark != nil {
		return visitor.VisitSourceTypeConfigPostmark(s.SourceTypeConfigPostmark)
	}
	if s.typ == "SourceTypeConfigTypeform" || s.SourceTypeConfigTypeform != nil {
		return visitor.VisitSourceTypeConfigTypeform(s.SourceTypeConfigTypeform)
	}
	if s.typ == "SourceTypeConfigXero" || s.SourceTypeConfigXero != nil {
		return visitor.VisitSourceTypeConfigXero(s.SourceTypeConfigXero)
	}
	if s.typ == "SourceTypeConfigSvix" || s.SourceTypeConfigSvix != nil {
		return visitor.VisitSourceTypeConfigSvix(s.SourceTypeConfigSvix)
	}
	if s.typ == "SourceTypeConfigAdyen" || s.SourceTypeConfigAdyen != nil {
		return visitor.VisitSourceTypeConfigAdyen(s.SourceTypeConfigAdyen)
	}
	if s.typ == "SourceTypeConfigAkeneo" || s.SourceTypeConfigAkeneo != nil {
		return visitor.VisitSourceTypeConfigAkeneo(s.SourceTypeConfigAkeneo)
	}
	if s.typ == "SourceTypeConfigGitLab" || s.SourceTypeConfigGitLab != nil {
		return visitor.VisitSourceTypeConfigGitLab(s.SourceTypeConfigGitLab)
	}
	if s.typ == "SourceTypeConfigWooCommerce" || s.SourceTypeConfigWooCommerce != nil {
		return visitor.VisitSourceTypeConfigWooCommerce(s.SourceTypeConfigWooCommerce)
	}
	if s.typ == "SourceTypeConfigOura" || s.SourceTypeConfigOura != nil {
		return visitor.VisitSourceTypeConfigOura(s.SourceTypeConfigOura)
	}
	if s.typ == "SourceTypeConfigCommerceLayer" || s.SourceTypeConfigCommerceLayer != nil {
		return visitor.VisitSourceTypeConfigCommerceLayer(s.SourceTypeConfigCommerceLayer)
	}
	if s.typ == "SourceTypeConfigHubspot" || s.SourceTypeConfigHubspot != nil {
		return visitor.VisitSourceTypeConfigHubspot(s.SourceTypeConfigHubspot)
	}
	if s.typ == "SourceTypeConfigMailgun" || s.SourceTypeConfigMailgun != nil {
		return visitor.VisitSourceTypeConfigMailgun(s.SourceTypeConfigMailgun)
	}
	if s.typ == "SourceTypeConfigPersona" || s.SourceTypeConfigPersona != nil {
		return visitor.VisitSourceTypeConfigPersona(s.SourceTypeConfigPersona)
	}
	if s.typ == "SourceTypeConfigPipedrive" || s.SourceTypeConfigPipedrive != nil {
		return visitor.VisitSourceTypeConfigPipedrive(s.SourceTypeConfigPipedrive)
	}
	if s.typ == "SourceTypeConfigSendgrid" || s.SourceTypeConfigSendgrid != nil {
		return visitor.VisitSourceTypeConfigSendgrid(s.SourceTypeConfigSendgrid)
	}
	if s.typ == "SourceTypeConfigWorkOs" || s.SourceTypeConfigWorkOs != nil {
		return visitor.VisitSourceTypeConfigWorkOs(s.SourceTypeConfigWorkOs)
	}
	if s.typ == "SourceTypeConfigSynctera" || s.SourceTypeConfigSynctera != nil {
		return visitor.VisitSourceTypeConfigSynctera(s.SourceTypeConfigSynctera)
	}
	if s.typ == "SourceTypeConfigAwssns" || s.SourceTypeConfigAwssns != nil {
		return visitor.VisitSourceTypeConfigAwssns(s.SourceTypeConfigAwssns)
	}
	if s.typ == "SourceTypeConfig3DEye" || s.SourceTypeConfig3DEye != nil {
		return visitor.VisitSourceTypeConfig3DEye(s.SourceTypeConfig3DEye)
	}
	if s.typ == "SourceTypeConfigTwitch" || s.SourceTypeConfigTwitch != nil {
		return visitor.VisitSourceTypeConfigTwitch(s.SourceTypeConfigTwitch)
	}
	if s.typ == "SourceTypeConfigEnode" || s.SourceTypeConfigEnode != nil {
		return visitor.VisitSourceTypeConfigEnode(s.SourceTypeConfigEnode)
	}
	if s.typ == "SourceTypeConfigFavro" || s.SourceTypeConfigFavro != nil {
		return visitor.VisitSourceTypeConfigFavro(s.SourceTypeConfigFavro)
	}
	if s.typ == "SourceTypeConfigLinear" || s.SourceTypeConfigLinear != nil {
		return visitor.VisitSourceTypeConfigLinear(s.SourceTypeConfigLinear)
	}
	if s.typ == "SourceTypeConfigShopline" || s.SourceTypeConfigShopline != nil {
		return visitor.VisitSourceTypeConfigShopline(s.SourceTypeConfigShopline)
	}
	if s.typ == "SourceTypeConfigWix" || s.SourceTypeConfigWix != nil {
		return visitor.VisitSourceTypeConfigWix(s.SourceTypeConfigWix)
	}
	if s.typ == "SourceTypeConfigNmiPaymentGateway" || s.SourceTypeConfigNmiPaymentGateway != nil {
		return visitor.VisitSourceTypeConfigNmiPaymentGateway(s.SourceTypeConfigNmiPaymentGateway)
	}
	if s.typ == "SourceTypeConfigOrb" || s.SourceTypeConfigOrb != nil {
		return visitor.VisitSourceTypeConfigOrb(s.SourceTypeConfigOrb)
	}
	if s.typ == "SourceTypeConfigPylon" || s.SourceTypeConfigPylon != nil {
		return visitor.VisitSourceTypeConfigPylon(s.SourceTypeConfigPylon)
	}
	if s.typ == "SourceTypeConfigRazorpay" || s.SourceTypeConfigRazorpay != nil {
		return visitor.VisitSourceTypeConfigRazorpay(s.SourceTypeConfigRazorpay)
	}
	if s.typ == "SourceTypeConfigRepay" || s.SourceTypeConfigRepay != nil {
		return visitor.VisitSourceTypeConfigRepay(s.SourceTypeConfigRepay)
	}
	if s.typ == "SourceTypeConfigSquare" || s.SourceTypeConfigSquare != nil {
		return visitor.VisitSourceTypeConfigSquare(s.SourceTypeConfigSquare)
	}
	if s.typ == "SourceTypeConfigSolidgate" || s.SourceTypeConfigSolidgate != nil {
		return visitor.VisitSourceTypeConfigSolidgate(s.SourceTypeConfigSolidgate)
	}
	if s.typ == "SourceTypeConfigTrello" || s.SourceTypeConfigTrello != nil {
		return visitor.VisitSourceTypeConfigTrello(s.SourceTypeConfigTrello)
	}
	if s.typ == "SourceTypeConfigEbay" || s.SourceTypeConfigEbay != nil {
		return visitor.VisitSourceTypeConfigEbay(s.SourceTypeConfigEbay)
	}
	if s.typ == "SourceTypeConfigTelnyx" || s.SourceTypeConfigTelnyx != nil {
		return visitor.VisitSourceTypeConfigTelnyx(s.SourceTypeConfigTelnyx)
	}
	if s.typ == "SourceTypeConfigDiscord" || s.SourceTypeConfigDiscord != nil {
		return visitor.VisitSourceTypeConfigDiscord(s.SourceTypeConfigDiscord)
	}
	if s.typ == "SourceTypeConfigTokenIo" || s.SourceTypeConfigTokenIo != nil {
		return visitor.VisitSourceTypeConfigTokenIo(s.SourceTypeConfigTokenIo)
	}
	if s.typ == "SourceTypeConfigFiserv" || s.SourceTypeConfigFiserv != nil {
		return visitor.VisitSourceTypeConfigFiserv(s.SourceTypeConfigFiserv)
	}
	if s.typ == "SourceTypeConfigBondsmith" || s.SourceTypeConfigBondsmith != nil {
		return visitor.VisitSourceTypeConfigBondsmith(s.SourceTypeConfigBondsmith)
	}
	if s.typ == "SourceTypeConfigVercelLogDrains" || s.SourceTypeConfigVercelLogDrains != nil {
		return visitor.VisitSourceTypeConfigVercelLogDrains(s.SourceTypeConfigVercelLogDrains)
	}
	if s.typ == "SourceTypeConfigVercelWebhooks" || s.SourceTypeConfigVercelWebhooks != nil {
		return visitor.VisitSourceTypeConfigVercelWebhooks(s.SourceTypeConfigVercelWebhooks)
	}
	if s.typ == "SourceTypeConfigTebex" || s.SourceTypeConfigTebex != nil {
		return visitor.VisitSourceTypeConfigTebex(s.SourceTypeConfigTebex)
	}
	if s.typ == "SourceTypeConfigSlack" || s.SourceTypeConfigSlack != nil {
		return visitor.VisitSourceTypeConfigSlack(s.SourceTypeConfigSlack)
	}
	if s.typ == "SourceTypeConfigMailchimp" || s.SourceTypeConfigMailchimp != nil {
		return visitor.VisitSourceTypeConfigMailchimp(s.SourceTypeConfigMailchimp)
	}
	if s.typ == "SourceTypeConfigPaddle" || s.SourceTypeConfigPaddle != nil {
		return visitor.VisitSourceTypeConfigPaddle(s.SourceTypeConfigPaddle)
	}
	if s.typ == "SourceTypeConfigPaypal" || s.SourceTypeConfigPaypal != nil {
		return visitor.VisitSourceTypeConfigPaypal(s.SourceTypeConfigPaypal)
	}
	if s.typ == "SourceTypeConfigTreezor" || s.SourceTypeConfigTreezor != nil {
		return visitor.VisitSourceTypeConfigTreezor(s.SourceTypeConfigTreezor)
	}
	if s.typ == "SourceTypeConfigPraxis" || s.SourceTypeConfigPraxis != nil {
		return visitor.VisitSourceTypeConfigPraxis(s.SourceTypeConfigPraxis)
	}
	if s.typ == "SourceTypeConfigCustomerIo" || s.SourceTypeConfigCustomerIo != nil {
		return visitor.VisitSourceTypeConfigCustomerIo(s.SourceTypeConfigCustomerIo)
	}
	if s.typ == "SourceTypeConfigFacebook" || s.SourceTypeConfigFacebook != nil {
		return visitor.VisitSourceTypeConfigFacebook(s.SourceTypeConfigFacebook)
	}
	if s.typ == "SourceTypeConfigWhatsApp" || s.SourceTypeConfigWhatsApp != nil {
		return visitor.VisitSourceTypeConfigWhatsApp(s.SourceTypeConfigWhatsApp)
	}
	if s.typ == "SourceTypeConfigReplicate" || s.SourceTypeConfigReplicate != nil {
		return visitor.VisitSourceTypeConfigReplicate(s.SourceTypeConfigReplicate)
	}
	if s.typ == "SourceTypeConfigTikTok" || s.SourceTypeConfigTikTok != nil {
		return visitor.VisitSourceTypeConfigTikTok(s.SourceTypeConfigTikTok)
	}
	if s.typ == "SourceTypeConfigAirwallex" || s.SourceTypeConfigAirwallex != nil {
		return visitor.VisitSourceTypeConfigAirwallex(s.SourceTypeConfigAirwallex)
	}
	if s.typ == "SourceTypeConfigZendesk" || s.SourceTypeConfigZendesk != nil {
		return visitor.VisitSourceTypeConfigZendesk(s.SourceTypeConfigZendesk)
	}
	if s.typ == "SourceTypeConfigUpollo" || s.SourceTypeConfigUpollo != nil {
		return visitor.VisitSourceTypeConfigUpollo(s.SourceTypeConfigUpollo)
	}
	if s.typ == "SourceTypeConfigLinkedIn" || s.SourceTypeConfigLinkedIn != nil {
		return visitor.VisitSourceTypeConfigLinkedIn(s.SourceTypeConfigLinkedIn)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// The type config for 3d Eye. Requires type to be `THREE_D_EYE`.
type SourceTypeConfig3DEye struct {
	Auth *SourceConfig3DEyeAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfig3DEye) GetAuth() *SourceConfig3DEyeAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfig3DEye) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfig3DEye) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfig3DEye
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfig3DEye(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfig3DEye) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Adyen. Requires type to be `ADYEN`.
type SourceTypeConfigAdyen struct {
	Auth *SourceConfigAdyenAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigAdyen) GetAuth() *SourceConfigAdyenAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigAdyen) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigAdyen) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigAdyen
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigAdyen(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigAdyen) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Airwallex. Requires type to be `AIRWALLEX`.
type SourceTypeConfigAirwallex struct {
	Auth *SourceConfigAirwallexAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigAirwallex) GetAuth() *SourceConfigAirwallexAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigAirwallex) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigAirwallex) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigAirwallex
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigAirwallex(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigAirwallex) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Akeneo. Requires type to be `AKENEO`.
type SourceTypeConfigAkeneo struct {
	Auth *SourceConfigAkeneoAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigAkeneo) GetAuth() *SourceConfigAkeneoAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigAkeneo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigAkeneo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigAkeneo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigAkeneo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigAkeneo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for AWS SNS. Requires type to be `AWS_SNS`.
type SourceTypeConfigAwssns struct {
	Auth *SourceConfigAwssnsAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigAwssns) GetAuth() *SourceConfigAwssnsAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigAwssns) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigAwssns) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigAwssns
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigAwssns(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigAwssns) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Bondsmith. Requires type to be `BONDSMITH`.
type SourceTypeConfigBondsmith struct {
	Auth *SourceConfigBondsmithAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigBondsmith) GetAuth() *SourceConfigBondsmithAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigBondsmith) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigBondsmith) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigBondsmith
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigBondsmith(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigBondsmith) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Bridge. Requires type to be `BRIDGE`.
type SourceTypeConfigBridge struct {
	Auth *SourceConfigBridgeAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigBridge) GetAuth() *SourceConfigBridgeAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigBridge) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigBridge) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigBridge
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigBridge(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigBridge) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Cloud Signal. Requires type to be `CLOUDSIGNAL`.
type SourceTypeConfigCloudSignal struct {
	Auth *SourceConfigCloudSignalAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigCloudSignal) GetAuth() *SourceConfigCloudSignalAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigCloudSignal) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigCloudSignal) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigCloudSignal
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigCloudSignal(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigCloudSignal) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Commerce Layer. Requires type to be `COMMERCELAYER`.
type SourceTypeConfigCommerceLayer struct {
	Auth *SourceConfigCommerceLayerAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigCommerceLayer) GetAuth() *SourceConfigCommerceLayerAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigCommerceLayer) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigCommerceLayer) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigCommerceLayer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigCommerceLayer(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigCommerceLayer) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Courier. Requires type to be `COURIER`.
type SourceTypeConfigCourier struct {
	Auth *SourceConfigCourierAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigCourier) GetAuth() *SourceConfigCourierAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigCourier) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigCourier) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigCourier
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigCourier(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigCourier) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Customer.IO. Requires type to be `CUSTOMERIO`.
type SourceTypeConfigCustomerIo struct {
	Auth *SourceConfigCustomerIoAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigCustomerIo) GetAuth() *SourceConfigCustomerIoAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigCustomerIo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigCustomerIo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigCustomerIo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigCustomerIo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigCustomerIo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Discord. Requires type to be `DISCORD`.
type SourceTypeConfigDiscord struct {
	Auth *SourceConfigDiscordAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigDiscord) GetAuth() *SourceConfigDiscordAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigDiscord) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigDiscord) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigDiscord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigDiscord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigDiscord) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Ebay. Requires type to be `EBAY`.
type SourceTypeConfigEbay struct {
	Auth *SourceConfigEbayAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigEbay) GetAuth() *SourceConfigEbayAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigEbay) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigEbay) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigEbay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigEbay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigEbay) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Enode. Requires type to be `ENODE`.
type SourceTypeConfigEnode struct {
	Auth *SourceConfigEnodeAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigEnode) GetAuth() *SourceConfigEnodeAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigEnode) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigEnode) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigEnode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigEnode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigEnode) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Facebook. Requires type to be `FACEBOOK`.
type SourceTypeConfigFacebook struct {
	Auth *SourceConfigFacebookAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigFacebook) GetAuth() *SourceConfigFacebookAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigFacebook) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigFacebook) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigFacebook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigFacebook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigFacebook) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Favro. Requires type to be `FAVRO`.
type SourceTypeConfigFavro struct {
	Auth *SourceConfigFavroAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigFavro) GetAuth() *SourceConfigFavroAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigFavro) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigFavro) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigFavro
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigFavro(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigFavro) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Fiserv. Requires type to be `FISERV`.
type SourceTypeConfigFiserv struct {
	Auth *SourceConfigFiservAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigFiserv) GetAuth() *SourceConfigFiservAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigFiserv) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigFiserv) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigFiserv
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigFiserv(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigFiserv) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for FrontApp. Requires type to be `FRONTAPP`.
type SourceTypeConfigFrontApp struct {
	Auth *SourceConfigFrontAppAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigFrontApp) GetAuth() *SourceConfigFrontAppAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigFrontApp) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigFrontApp) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigFrontApp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigFrontApp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigFrontApp) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for GitHub. Requires type to be `GITHUB`.
type SourceTypeConfigGitHub struct {
	Auth *SourceConfigGitHubAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigGitHub) GetAuth() *SourceConfigGitHubAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigGitHub) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigGitHub) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigGitHub
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigGitHub(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigGitHub) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for GitLab. Requires type to be `GITLAB`.
type SourceTypeConfigGitLab struct {
	Auth *SourceConfigGitLabAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigGitLab) GetAuth() *SourceConfigGitLabAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigGitLab) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigGitLab) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigGitLab
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigGitLab(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigGitLab) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for HTTP. Requires type to be `HTTP`.
type SourceTypeConfigHttp struct {
	AllowedHttpMethods []SourceTypeConfigHttpAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	CustomResponse     *SourceTypeConfigHttpCustomResponse          `json:"custom_response,omitempty" url:"custom_response,omitempty"`
	AuthType           *SourceTypeConfigHttpAuthType                `json:"auth_type,omitempty" url:"auth_type,omitempty"`
	Auth               *SourceTypeConfigHttpAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHttp) GetAllowedHttpMethods() []SourceTypeConfigHttpAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigHttp) GetCustomResponse() *SourceTypeConfigHttpCustomResponse {
	if s == nil {
		return nil
	}
	return s.CustomResponse
}

func (s *SourceTypeConfigHttp) GetAuthType() *SourceTypeConfigHttpAuthType {
	if s == nil {
		return nil
	}
	return s.AuthType
}

func (s *SourceTypeConfigHttp) GetAuth() *SourceTypeConfigHttpAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigHttp) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHttp) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHttp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHttp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHttp) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHttpAllowedHttpMethodsItem string

const (
	SourceTypeConfigHttpAllowedHttpMethodsItemGet    SourceTypeConfigHttpAllowedHttpMethodsItem = "GET"
	SourceTypeConfigHttpAllowedHttpMethodsItemPost   SourceTypeConfigHttpAllowedHttpMethodsItem = "POST"
	SourceTypeConfigHttpAllowedHttpMethodsItemPut    SourceTypeConfigHttpAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigHttpAllowedHttpMethodsItemPatch  SourceTypeConfigHttpAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigHttpAllowedHttpMethodsItemDelete SourceTypeConfigHttpAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigHttpAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigHttpAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigHttpAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigHttpAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigHttpAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigHttpAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigHttpAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigHttpAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHttpAllowedHttpMethodsItem) Ptr() *SourceTypeConfigHttpAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigHttpAuth struct {
	SourceTypeConfigHttpAuthAlgorithm *SourceTypeConfigHttpAuthAlgorithm
	SourceTypeConfigHttpAuthPassword  *SourceTypeConfigHttpAuthPassword
	SourceTypeConfigHttpAuthApiKey    *SourceTypeConfigHttpAuthApiKey

	typ string
}

func NewSourceTypeConfigHttpAuthFromSourceTypeConfigHttpAuthAlgorithm(value *SourceTypeConfigHttpAuthAlgorithm) *SourceTypeConfigHttpAuth {
	return &SourceTypeConfigHttpAuth{typ: "SourceTypeConfigHttpAuthAlgorithm", SourceTypeConfigHttpAuthAlgorithm: value}
}

func NewSourceTypeConfigHttpAuthFromSourceTypeConfigHttpAuthPassword(value *SourceTypeConfigHttpAuthPassword) *SourceTypeConfigHttpAuth {
	return &SourceTypeConfigHttpAuth{typ: "SourceTypeConfigHttpAuthPassword", SourceTypeConfigHttpAuthPassword: value}
}

func NewSourceTypeConfigHttpAuthFromSourceTypeConfigHttpAuthApiKey(value *SourceTypeConfigHttpAuthApiKey) *SourceTypeConfigHttpAuth {
	return &SourceTypeConfigHttpAuth{typ: "SourceTypeConfigHttpAuthApiKey", SourceTypeConfigHttpAuthApiKey: value}
}

func (s *SourceTypeConfigHttpAuth) GetSourceTypeConfigHttpAuthAlgorithm() *SourceTypeConfigHttpAuthAlgorithm {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHttpAuthAlgorithm
}

func (s *SourceTypeConfigHttpAuth) GetSourceTypeConfigHttpAuthPassword() *SourceTypeConfigHttpAuthPassword {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHttpAuthPassword
}

func (s *SourceTypeConfigHttpAuth) GetSourceTypeConfigHttpAuthApiKey() *SourceTypeConfigHttpAuthApiKey {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHttpAuthApiKey
}

func (s *SourceTypeConfigHttpAuth) UnmarshalJSON(data []byte) error {
	valueSourceTypeConfigHttpAuthAlgorithm := new(SourceTypeConfigHttpAuthAlgorithm)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHttpAuthAlgorithm); err == nil {
		s.typ = "SourceTypeConfigHttpAuthAlgorithm"
		s.SourceTypeConfigHttpAuthAlgorithm = valueSourceTypeConfigHttpAuthAlgorithm
		return nil
	}
	valueSourceTypeConfigHttpAuthPassword := new(SourceTypeConfigHttpAuthPassword)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHttpAuthPassword); err == nil {
		s.typ = "SourceTypeConfigHttpAuthPassword"
		s.SourceTypeConfigHttpAuthPassword = valueSourceTypeConfigHttpAuthPassword
		return nil
	}
	valueSourceTypeConfigHttpAuthApiKey := new(SourceTypeConfigHttpAuthApiKey)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHttpAuthApiKey); err == nil {
		s.typ = "SourceTypeConfigHttpAuthApiKey"
		s.SourceTypeConfigHttpAuthApiKey = valueSourceTypeConfigHttpAuthApiKey
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SourceTypeConfigHttpAuth) MarshalJSON() ([]byte, error) {
	if s.typ == "SourceTypeConfigHttpAuthAlgorithm" || s.SourceTypeConfigHttpAuthAlgorithm != nil {
		return json.Marshal(s.SourceTypeConfigHttpAuthAlgorithm)
	}
	if s.typ == "SourceTypeConfigHttpAuthPassword" || s.SourceTypeConfigHttpAuthPassword != nil {
		return json.Marshal(s.SourceTypeConfigHttpAuthPassword)
	}
	if s.typ == "SourceTypeConfigHttpAuthApiKey" || s.SourceTypeConfigHttpAuthApiKey != nil {
		return json.Marshal(s.SourceTypeConfigHttpAuthApiKey)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SourceTypeConfigHttpAuthVisitor interface {
	VisitSourceTypeConfigHttpAuthAlgorithm(*SourceTypeConfigHttpAuthAlgorithm) error
	VisitSourceTypeConfigHttpAuthPassword(*SourceTypeConfigHttpAuthPassword) error
	VisitSourceTypeConfigHttpAuthApiKey(*SourceTypeConfigHttpAuthApiKey) error
}

func (s *SourceTypeConfigHttpAuth) Accept(visitor SourceTypeConfigHttpAuthVisitor) error {
	if s.typ == "SourceTypeConfigHttpAuthAlgorithm" || s.SourceTypeConfigHttpAuthAlgorithm != nil {
		return visitor.VisitSourceTypeConfigHttpAuthAlgorithm(s.SourceTypeConfigHttpAuthAlgorithm)
	}
	if s.typ == "SourceTypeConfigHttpAuthPassword" || s.SourceTypeConfigHttpAuthPassword != nil {
		return visitor.VisitSourceTypeConfigHttpAuthPassword(s.SourceTypeConfigHttpAuthPassword)
	}
	if s.typ == "SourceTypeConfigHttpAuthApiKey" || s.SourceTypeConfigHttpAuthApiKey != nil {
		return visitor.VisitSourceTypeConfigHttpAuthApiKey(s.SourceTypeConfigHttpAuthApiKey)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SourceTypeConfigHttpAuthAlgorithm struct {
	Algorithm        SourceTypeConfigHttpAuthAlgorithmAlgorithm `json:"algorithm" url:"algorithm"`
	Encoding         SourceTypeConfigHttpAuthAlgorithmEncoding  `json:"encoding" url:"encoding"`
	HeaderKey        string                                     `json:"header_key" url:"header_key"`
	WebhookSecretKey string                                     `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHttpAuthAlgorithm) GetAlgorithm() SourceTypeConfigHttpAuthAlgorithmAlgorithm {
	if s == nil {
		return ""
	}
	return s.Algorithm
}

func (s *SourceTypeConfigHttpAuthAlgorithm) GetEncoding() SourceTypeConfigHttpAuthAlgorithmEncoding {
	if s == nil {
		return ""
	}
	return s.Encoding
}

func (s *SourceTypeConfigHttpAuthAlgorithm) GetHeaderKey() string {
	if s == nil {
		return ""
	}
	return s.HeaderKey
}

func (s *SourceTypeConfigHttpAuthAlgorithm) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigHttpAuthAlgorithm) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHttpAuthAlgorithm) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHttpAuthAlgorithm
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHttpAuthAlgorithm(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHttpAuthAlgorithm) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHttpAuthAlgorithmAlgorithm string

const (
	SourceTypeConfigHttpAuthAlgorithmAlgorithmSha1   SourceTypeConfigHttpAuthAlgorithmAlgorithm = "sha1"
	SourceTypeConfigHttpAuthAlgorithmAlgorithmSha256 SourceTypeConfigHttpAuthAlgorithmAlgorithm = "sha256"
	SourceTypeConfigHttpAuthAlgorithmAlgorithmSha512 SourceTypeConfigHttpAuthAlgorithmAlgorithm = "sha512"
	SourceTypeConfigHttpAuthAlgorithmAlgorithmMd5    SourceTypeConfigHttpAuthAlgorithmAlgorithm = "md5"
)

func NewSourceTypeConfigHttpAuthAlgorithmAlgorithmFromString(s string) (SourceTypeConfigHttpAuthAlgorithmAlgorithm, error) {
	switch s {
	case "sha1":
		return SourceTypeConfigHttpAuthAlgorithmAlgorithmSha1, nil
	case "sha256":
		return SourceTypeConfigHttpAuthAlgorithmAlgorithmSha256, nil
	case "sha512":
		return SourceTypeConfigHttpAuthAlgorithmAlgorithmSha512, nil
	case "md5":
		return SourceTypeConfigHttpAuthAlgorithmAlgorithmMd5, nil
	}
	var t SourceTypeConfigHttpAuthAlgorithmAlgorithm
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHttpAuthAlgorithmAlgorithm) Ptr() *SourceTypeConfigHttpAuthAlgorithmAlgorithm {
	return &s
}

type SourceTypeConfigHttpAuthAlgorithmEncoding string

const (
	SourceTypeConfigHttpAuthAlgorithmEncodingBase64    SourceTypeConfigHttpAuthAlgorithmEncoding = "base64"
	SourceTypeConfigHttpAuthAlgorithmEncodingBase64Url SourceTypeConfigHttpAuthAlgorithmEncoding = "base64url"
	SourceTypeConfigHttpAuthAlgorithmEncodingHex       SourceTypeConfigHttpAuthAlgorithmEncoding = "hex"
)

func NewSourceTypeConfigHttpAuthAlgorithmEncodingFromString(s string) (SourceTypeConfigHttpAuthAlgorithmEncoding, error) {
	switch s {
	case "base64":
		return SourceTypeConfigHttpAuthAlgorithmEncodingBase64, nil
	case "base64url":
		return SourceTypeConfigHttpAuthAlgorithmEncodingBase64Url, nil
	case "hex":
		return SourceTypeConfigHttpAuthAlgorithmEncodingHex, nil
	}
	var t SourceTypeConfigHttpAuthAlgorithmEncoding
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHttpAuthAlgorithmEncoding) Ptr() *SourceTypeConfigHttpAuthAlgorithmEncoding {
	return &s
}

type SourceTypeConfigHttpAuthApiKey struct {
	HeaderKey string `json:"header_key" url:"header_key"`
	ApiKey    string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHttpAuthApiKey) GetHeaderKey() string {
	if s == nil {
		return ""
	}
	return s.HeaderKey
}

func (s *SourceTypeConfigHttpAuthApiKey) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceTypeConfigHttpAuthApiKey) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHttpAuthApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHttpAuthApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHttpAuthApiKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHttpAuthApiKey) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHttpAuthPassword struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHttpAuthPassword) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

func (s *SourceTypeConfigHttpAuthPassword) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SourceTypeConfigHttpAuthPassword) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHttpAuthPassword) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHttpAuthPassword
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHttpAuthPassword(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHttpAuthPassword) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHttpAuthType string

const (
	SourceTypeConfigHttpAuthTypeHmac      SourceTypeConfigHttpAuthType = "HMAC"
	SourceTypeConfigHttpAuthTypeBasicAuth SourceTypeConfigHttpAuthType = "BASIC_AUTH"
	SourceTypeConfigHttpAuthTypeApiKey    SourceTypeConfigHttpAuthType = "API_KEY"
)

func NewSourceTypeConfigHttpAuthTypeFromString(s string) (SourceTypeConfigHttpAuthType, error) {
	switch s {
	case "HMAC":
		return SourceTypeConfigHttpAuthTypeHmac, nil
	case "BASIC_AUTH":
		return SourceTypeConfigHttpAuthTypeBasicAuth, nil
	case "API_KEY":
		return SourceTypeConfigHttpAuthTypeApiKey, nil
	}
	var t SourceTypeConfigHttpAuthType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHttpAuthType) Ptr() *SourceTypeConfigHttpAuthType {
	return &s
}

type SourceTypeConfigHttpCustomResponse struct {
	ContentType SourceTypeConfigHttpCustomResponseContentType `json:"content_type" url:"content_type"`
	Body        string                                        `json:"body" url:"body"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHttpCustomResponse) GetContentType() SourceTypeConfigHttpCustomResponseContentType {
	if s == nil {
		return ""
	}
	return s.ContentType
}

func (s *SourceTypeConfigHttpCustomResponse) GetBody() string {
	if s == nil {
		return ""
	}
	return s.Body
}

func (s *SourceTypeConfigHttpCustomResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHttpCustomResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHttpCustomResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHttpCustomResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHttpCustomResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHttpCustomResponseContentType string

const (
	SourceTypeConfigHttpCustomResponseContentTypeJson SourceTypeConfigHttpCustomResponseContentType = "json"
	SourceTypeConfigHttpCustomResponseContentTypeText SourceTypeConfigHttpCustomResponseContentType = "text"
	SourceTypeConfigHttpCustomResponseContentTypeXml  SourceTypeConfigHttpCustomResponseContentType = "xml"
)

func NewSourceTypeConfigHttpCustomResponseContentTypeFromString(s string) (SourceTypeConfigHttpCustomResponseContentType, error) {
	switch s {
	case "json":
		return SourceTypeConfigHttpCustomResponseContentTypeJson, nil
	case "text":
		return SourceTypeConfigHttpCustomResponseContentTypeText, nil
	case "xml":
		return SourceTypeConfigHttpCustomResponseContentTypeXml, nil
	}
	var t SourceTypeConfigHttpCustomResponseContentType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHttpCustomResponseContentType) Ptr() *SourceTypeConfigHttpCustomResponseContentType {
	return &s
}

// The type config for Hubspot. Requires type to be `HUBSPOT`.
type SourceTypeConfigHubspot struct {
	Auth *SourceConfigHubspotAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHubspot) GetAuth() *SourceConfigHubspotAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigHubspot) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHubspot) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHubspot
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHubspot(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHubspot) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Linear. Requires type to be `LINEAR`.
type SourceTypeConfigLinear struct {
	Auth *SourceConfigLinearAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigLinear) GetAuth() *SourceConfigLinearAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigLinear) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigLinear) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigLinear
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigLinear(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigLinear) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for LinkedIn. Requires type to be `LINKEDIN`.
type SourceTypeConfigLinkedIn struct {
	Auth *SourceConfigLinkedInAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigLinkedIn) GetAuth() *SourceConfigLinkedInAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigLinkedIn) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigLinkedIn) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigLinkedIn
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigLinkedIn(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigLinkedIn) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Mailchimp. Requires type to be `MAILCHIMP`.
type SourceTypeConfigMailchimp struct {
	Auth *SourceConfigMailchimpAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigMailchimp) GetAuth() *SourceConfigMailchimpAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigMailchimp) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigMailchimp) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigMailchimp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigMailchimp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigMailchimp) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Mailgun. Requires type to be `MAILGUN`.
type SourceTypeConfigMailgun struct {
	Auth *SourceConfigMailgunAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigMailgun) GetAuth() *SourceConfigMailgunAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigMailgun) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigMailgun) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigMailgun
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigMailgun(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigMailgun) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigManaged struct {
	Auth *SourceTypeConfigManagedAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigManaged) GetAuth() *SourceTypeConfigManagedAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigManaged) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigManaged) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigManaged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigManaged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigManaged) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigManagedAuth struct {
	Token string `json:"token" url:"token"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigManagedAuth) GetToken() string {
	if s == nil {
		return ""
	}
	return s.Token
}

func (s *SourceTypeConfigManagedAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigManagedAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigManagedAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigManagedAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigManagedAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for NMI Payment Gateway. Requires type to be `NMI`.
type SourceTypeConfigNmiPaymentGateway struct {
	Auth *SourceConfigNmiPaymentGatewayAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigNmiPaymentGateway) GetAuth() *SourceConfigNmiPaymentGatewayAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigNmiPaymentGateway) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigNmiPaymentGateway) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigNmiPaymentGateway
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigNmiPaymentGateway(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigNmiPaymentGateway) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Orb. Requires type to be `ORB`.
type SourceTypeConfigOrb struct {
	Auth *SourceConfigOrbAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigOrb) GetAuth() *SourceConfigOrbAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigOrb) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigOrb) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigOrb
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigOrb(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigOrb) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Oura. Requires type to be `OURA`.
type SourceTypeConfigOura struct {
	Auth *SourceConfigOuraAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigOura) GetAuth() *SourceConfigOuraAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigOura) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigOura) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigOura
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigOura(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigOura) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Paddle. Requires type to be `PADDLE`.
type SourceTypeConfigPaddle struct {
	Auth *SourceConfigPaddleAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPaddle) GetAuth() *SourceConfigPaddleAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPaddle) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPaddle) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPaddle
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPaddle(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPaddle) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Paypal. Requires type to be `PAYPAL`.
type SourceTypeConfigPaypal struct {
	Auth *SourceConfigPaypalAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPaypal) GetAuth() *SourceConfigPaypalAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPaypal) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPaypal) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPaypal
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPaypal(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPaypal) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Persona. Requires type to be `PERSONA`.
type SourceTypeConfigPersona struct {
	Auth *SourceConfigPersonaAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPersona) GetAuth() *SourceConfigPersonaAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPersona) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPersona) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPersona
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPersona(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPersona) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Pipedrive. Requires type to be `PIPEDRIVE`.
type SourceTypeConfigPipedrive struct {
	Auth *SourceConfigPipedriveAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPipedrive) GetAuth() *SourceConfigPipedriveAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPipedrive) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPipedrive) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPipedrive
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPipedrive(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPipedrive) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Postmark. Requires type to be `POSTMARK`.
type SourceTypeConfigPostmark struct {
	Auth *SourceConfigPostmarkAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPostmark) GetAuth() *SourceConfigPostmarkAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPostmark) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPostmark) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPostmark
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPostmark(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPostmark) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Praxis. Requires type to be `PRAXIS`.
type SourceTypeConfigPraxis struct {
	Auth *SourceConfigPraxisAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPraxis) GetAuth() *SourceConfigPraxisAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPraxis) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPraxis) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPraxis
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPraxis(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPraxis) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Property Finder. Requires type to be `PROPERTY-FINDER`.
type SourceTypeConfigPropertyFinder struct {
	Auth *SourceConfigPropertyFinderAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPropertyFinder) GetAuth() *SourceConfigPropertyFinderAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPropertyFinder) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPropertyFinder) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPropertyFinder
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPropertyFinder(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPropertyFinder) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Pylon. Requires type to be `PYLON`.
type SourceTypeConfigPylon struct {
	Auth *SourceConfigPylonAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPylon) GetAuth() *SourceConfigPylonAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPylon) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPylon) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPylon
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPylon(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPylon) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Razorpay. Requires type to be `RAZORPAY`.
type SourceTypeConfigRazorpay struct {
	Auth *SourceConfigRazorpayAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigRazorpay) GetAuth() *SourceConfigRazorpayAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigRazorpay) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigRazorpay) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigRazorpay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigRazorpay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigRazorpay) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Recharge. Requires type to be `RECHARGE`.
type SourceTypeConfigRecharge struct {
	Auth *SourceConfigRechargeAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigRecharge) GetAuth() *SourceConfigRechargeAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigRecharge) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigRecharge) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigRecharge
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigRecharge(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigRecharge) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Repay. Requires type to be `REPAY`.
type SourceTypeConfigRepay struct {
	Auth *SourceConfigRepayAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigRepay) GetAuth() *SourceConfigRepayAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigRepay) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigRepay) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigRepay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigRepay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigRepay) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Replicate. Requires type to be `REPLICATE`.
type SourceTypeConfigReplicate struct {
	Auth *SourceConfigReplicateAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigReplicate) GetAuth() *SourceConfigReplicateAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigReplicate) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigReplicate) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigReplicate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigReplicate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigReplicate) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Sanity. Requires type to be `SANITY`.
type SourceTypeConfigSanity struct {
	Auth *SourceConfigSanityAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSanity) GetAuth() *SourceConfigSanityAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSanity) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSanity) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSanity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSanity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSanity) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Sendgrid. Requires type to be `SENDGRID`.
type SourceTypeConfigSendgrid struct {
	Auth *SourceConfigSendgridAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSendgrid) GetAuth() *SourceConfigSendgridAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSendgrid) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSendgrid) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSendgrid
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSendgrid(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSendgrid) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Shopify. Requires type to be `SHOPIFY`.
type SourceTypeConfigShopify struct {
	Auth *SourceConfigShopifyAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigShopify) GetAuth() *SourceConfigShopifyAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigShopify) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigShopify) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigShopify
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigShopify(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigShopify) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Shopline. Requires type to be `SHOPLINE`.
type SourceTypeConfigShopline struct {
	Auth *SourceConfigShoplineAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigShopline) GetAuth() *SourceConfigShoplineAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigShopline) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigShopline) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigShopline
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigShopline(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigShopline) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Slack. Requires type to be `SLACK`.
type SourceTypeConfigSlack struct {
	Auth *SourceConfigSlackAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSlack) GetAuth() *SourceConfigSlackAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSlack) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSlack) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSlack
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSlack(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSlack) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Solidgate. Requires type to be `SOLIDGATE`.
type SourceTypeConfigSolidgate struct {
	Auth *SourceConfigSolidgateAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSolidgate) GetAuth() *SourceConfigSolidgateAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSolidgate) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSolidgate) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSolidgate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSolidgate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSolidgate) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Square. Requires type to be `SQUARE`.
type SourceTypeConfigSquare struct {
	Auth *SourceConfigSquareAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSquare) GetAuth() *SourceConfigSquareAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSquare) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSquare) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSquare
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSquare(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSquare) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Stripe. Requires type to be `STRIPE`.
type SourceTypeConfigStripe struct {
	Auth *SourceConfigStripeAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigStripe) GetAuth() *SourceConfigStripeAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigStripe) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigStripe) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigStripe
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigStripe(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigStripe) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Svix. Requires type to be `SVIX`.
type SourceTypeConfigSvix struct {
	Auth *SourceConfigSvixAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSvix) GetAuth() *SourceConfigSvixAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSvix) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSvix) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSvix
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSvix(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSvix) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Synctera. Requires type to be `SYNCTERA`.
type SourceTypeConfigSynctera struct {
	Auth *SourceConfigSyncteraAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSynctera) GetAuth() *SourceConfigSyncteraAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSynctera) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSynctera) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSynctera
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSynctera(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSynctera) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Tebex. Requires type to be `TEBEX`.
type SourceTypeConfigTebex struct {
	Auth *SourceConfigTebexAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTebex) GetAuth() *SourceConfigTebexAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTebex) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTebex) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTebex
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTebex(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTebex) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Telnyx. Requires type to be `TELNYX`.
type SourceTypeConfigTelnyx struct {
	Auth *SourceConfigTelnyxAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTelnyx) GetAuth() *SourceConfigTelnyxAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTelnyx) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTelnyx) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTelnyx
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTelnyx(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTelnyx) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for TikTok. Requires type to be `TIKTOK`.
type SourceTypeConfigTikTok struct {
	Auth *SourceConfigTikTokAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTikTok) GetAuth() *SourceConfigTikTokAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTikTok) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTikTok) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTikTok
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTikTok(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTikTok) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for TokenIO. Requires type to be `TOKENIO`.
type SourceTypeConfigTokenIo struct {
	Auth *SourceConfigTokenIoAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTokenIo) GetAuth() *SourceConfigTokenIoAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTokenIo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTokenIo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTokenIo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTokenIo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTokenIo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Treezor. Requires type to be `TREEZOR`.
type SourceTypeConfigTreezor struct {
	Auth *SourceConfigTreezorAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTreezor) GetAuth() *SourceConfigTreezorAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTreezor) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTreezor) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTreezor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTreezor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTreezor) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Trello. Requires type to be `TRELLO`.
type SourceTypeConfigTrello struct {
	Auth *SourceConfigTrelloAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTrello) GetAuth() *SourceConfigTrelloAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTrello) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTrello) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTrello
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTrello(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTrello) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Twilio. Requires type to be `TWILIO`.
type SourceTypeConfigTwilio struct {
	Auth *SourceConfigTwilioAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTwilio) GetAuth() *SourceConfigTwilioAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTwilio) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTwilio) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTwilio
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTwilio(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTwilio) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Twitch. Requires type to be `TWITCH`.
type SourceTypeConfigTwitch struct {
	Auth *SourceConfigTwitchAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTwitch) GetAuth() *SourceConfigTwitchAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTwitch) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTwitch) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTwitch
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTwitch(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTwitch) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Twitter. Requires type to be `TWITTER`.
type SourceTypeConfigTwitter struct {
	Auth *SourceConfigTwitterAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTwitter) GetAuth() *SourceConfigTwitterAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTwitter) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTwitter) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTwitter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTwitter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTwitter) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Typeform. Requires type to be `TYPEFORM`.
type SourceTypeConfigTypeform struct {
	Auth *SourceConfigTypeformAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTypeform) GetAuth() *SourceConfigTypeformAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTypeform) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTypeform) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTypeform
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTypeform(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTypeform) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Upollo. Requires type to be `UPOLLO`.
type SourceTypeConfigUpollo struct {
	Auth *SourceConfigUpolloAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigUpollo) GetAuth() *SourceConfigUpolloAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigUpollo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigUpollo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigUpollo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigUpollo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigUpollo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Vercel Log Drains. Requires type to be `VERCEL_LOG_DRAINS`.
type SourceTypeConfigVercelLogDrains struct {
	VercelLogDrainsSecret *string                          `json:"vercel_log_drains_secret,omitempty" url:"vercel_log_drains_secret,omitempty"`
	Auth                  *SourceConfigVercelLogDrainsAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigVercelLogDrains) GetVercelLogDrainsSecret() *string {
	if s == nil {
		return nil
	}
	return s.VercelLogDrainsSecret
}

func (s *SourceTypeConfigVercelLogDrains) GetAuth() *SourceConfigVercelLogDrainsAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigVercelLogDrains) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigVercelLogDrains) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigVercelLogDrains
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigVercelLogDrains(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigVercelLogDrains) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Vercel Webhooks. Requires type to be `VERCEL`.
type SourceTypeConfigVercelWebhooks struct {
	Auth *SourceConfigVercelWebhooksAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigVercelWebhooks) GetAuth() *SourceConfigVercelWebhooksAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigVercelWebhooks) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigVercelWebhooks) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigVercelWebhooks
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigVercelWebhooks(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigVercelWebhooks) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Webhook. Requires type to be `WEBHOOK`.
type SourceTypeConfigWebhook struct {
	AllowedHttpMethods []SourceTypeConfigWebhookAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	CustomResponse     *SourceTypeConfigWebhookCustomResponse          `json:"custom_response,omitempty" url:"custom_response,omitempty"`
	AuthType           *SourceTypeConfigWebhookAuthType                `json:"auth_type,omitempty" url:"auth_type,omitempty"`
	Auth               *SourceTypeConfigWebhookAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWebhook) GetAllowedHttpMethods() []SourceTypeConfigWebhookAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigWebhook) GetCustomResponse() *SourceTypeConfigWebhookCustomResponse {
	if s == nil {
		return nil
	}
	return s.CustomResponse
}

func (s *SourceTypeConfigWebhook) GetAuthType() *SourceTypeConfigWebhookAuthType {
	if s == nil {
		return nil
	}
	return s.AuthType
}

func (s *SourceTypeConfigWebhook) GetAuth() *SourceTypeConfigWebhookAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigWebhook) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWebhook) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigWebhookAllowedHttpMethodsItem string

const (
	SourceTypeConfigWebhookAllowedHttpMethodsItemGet    SourceTypeConfigWebhookAllowedHttpMethodsItem = "GET"
	SourceTypeConfigWebhookAllowedHttpMethodsItemPost   SourceTypeConfigWebhookAllowedHttpMethodsItem = "POST"
	SourceTypeConfigWebhookAllowedHttpMethodsItemPut    SourceTypeConfigWebhookAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigWebhookAllowedHttpMethodsItemPatch  SourceTypeConfigWebhookAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigWebhookAllowedHttpMethodsItemDelete SourceTypeConfigWebhookAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigWebhookAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigWebhookAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigWebhookAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigWebhookAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigWebhookAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigWebhookAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigWebhookAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigWebhookAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigWebhookAllowedHttpMethodsItem) Ptr() *SourceTypeConfigWebhookAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigWebhookAuth struct {
	SourceConfigWebhookAuthHmac              *SourceConfigWebhookAuthHmac
	SourceConfigWebhookAuthBasicAuth         *SourceConfigWebhookAuthBasicAuth
	SourceConfigWebhookAuthApiKey            *SourceConfigWebhookAuthApiKey
	SourceConfigWebhookAuthSanity            *SourceConfigWebhookAuthSanity
	SourceConfigWebhookAuthBridge            *SourceConfigWebhookAuthBridge
	SourceConfigWebhookAuthCloudSignal       *SourceConfigWebhookAuthCloudSignal
	SourceConfigWebhookAuthCourier           *SourceConfigWebhookAuthCourier
	SourceConfigWebhookAuthFrontApp          *SourceConfigWebhookAuthFrontApp
	SourceConfigWebhookAuthZoom              *SourceConfigWebhookAuthZoom
	SourceConfigWebhookAuthTwitter           *SourceConfigWebhookAuthTwitter
	SourceConfigWebhookAuthRecharge          *SourceConfigWebhookAuthRecharge
	SourceConfigWebhookAuthStripe            *SourceConfigWebhookAuthStripe
	SourceConfigWebhookAuthPropertyFinder    *SourceConfigWebhookAuthPropertyFinder
	SourceConfigWebhookAuthShopify           *SourceConfigWebhookAuthShopify
	SourceConfigWebhookAuthTwilio            *SourceConfigWebhookAuthTwilio
	SourceConfigWebhookAuthGitHub            *SourceConfigWebhookAuthGitHub
	SourceConfigWebhookAuthPostmark          *SourceConfigWebhookAuthPostmark
	SourceConfigWebhookAuthTypeform          *SourceConfigWebhookAuthTypeform
	SourceConfigWebhookAuthXero              *SourceConfigWebhookAuthXero
	SourceConfigWebhookAuthSvix              *SourceConfigWebhookAuthSvix
	SourceConfigWebhookAuthAdyen             *SourceConfigWebhookAuthAdyen
	SourceConfigWebhookAuthAkeneo            *SourceConfigWebhookAuthAkeneo
	SourceConfigWebhookAuthGitLab            *SourceConfigWebhookAuthGitLab
	SourceConfigWebhookAuthWooCommerce       *SourceConfigWebhookAuthWooCommerce
	SourceConfigWebhookAuthOura              *SourceConfigWebhookAuthOura
	SourceConfigWebhookAuthCommerceLayer     *SourceConfigWebhookAuthCommerceLayer
	SourceConfigWebhookAuthHubspot           *SourceConfigWebhookAuthHubspot
	SourceConfigWebhookAuthMailgun           *SourceConfigWebhookAuthMailgun
	SourceConfigWebhookAuthPersona           *SourceConfigWebhookAuthPersona
	SourceConfigWebhookAuthPipedrive         *SourceConfigWebhookAuthPipedrive
	SourceConfigWebhookAuthSendgrid          *SourceConfigWebhookAuthSendgrid
	SourceConfigWebhookAuthWorkOs            *SourceConfigWebhookAuthWorkOs
	SourceConfigWebhookAuthSynctera          *SourceConfigWebhookAuthSynctera
	SourceConfigWebhookAuthAwssns            *SourceConfigWebhookAuthAwssns
	SourceConfigWebhookAuth3DEye             *SourceConfigWebhookAuth3DEye
	SourceConfigWebhookAuthTwitch            *SourceConfigWebhookAuthTwitch
	SourceConfigWebhookAuthEnode             *SourceConfigWebhookAuthEnode
	SourceConfigWebhookAuthFavro             *SourceConfigWebhookAuthFavro
	SourceConfigWebhookAuthLinear            *SourceConfigWebhookAuthLinear
	SourceConfigWebhookAuthShopline          *SourceConfigWebhookAuthShopline
	SourceConfigWebhookAuthWix               *SourceConfigWebhookAuthWix
	SourceConfigWebhookAuthNmiPaymentGateway *SourceConfigWebhookAuthNmiPaymentGateway
	SourceConfigWebhookAuthOrb               *SourceConfigWebhookAuthOrb
	SourceConfigWebhookAuthPylon             *SourceConfigWebhookAuthPylon
	SourceConfigWebhookAuthRazorpay          *SourceConfigWebhookAuthRazorpay
	SourceConfigWebhookAuthRepay             *SourceConfigWebhookAuthRepay
	SourceConfigWebhookAuthSquare            *SourceConfigWebhookAuthSquare
	SourceConfigWebhookAuthSolidgate         *SourceConfigWebhookAuthSolidgate
	SourceConfigWebhookAuthTrello            *SourceConfigWebhookAuthTrello
	SourceConfigWebhookAuthEbay              *SourceConfigWebhookAuthEbay
	SourceConfigWebhookAuthTelnyx            *SourceConfigWebhookAuthTelnyx
	SourceConfigWebhookAuthDiscord           *SourceConfigWebhookAuthDiscord
	SourceConfigWebhookAuthTokenIo           *SourceConfigWebhookAuthTokenIo
	SourceConfigWebhookAuthFiserv            *SourceConfigWebhookAuthFiserv
	SourceConfigWebhookAuthBondsmith         *SourceConfigWebhookAuthBondsmith
	SourceConfigWebhookAuthVercelLogDrains   *SourceConfigWebhookAuthVercelLogDrains
	SourceConfigWebhookAuthVercelWebhooks    *SourceConfigWebhookAuthVercelWebhooks
	SourceConfigWebhookAuthTebex             *SourceConfigWebhookAuthTebex
	SourceConfigWebhookAuthSlack             *SourceConfigWebhookAuthSlack
	SourceConfigWebhookAuthMailchimp         *SourceConfigWebhookAuthMailchimp
	SourceConfigWebhookAuthPaddle            *SourceConfigWebhookAuthPaddle
	SourceConfigWebhookAuthPaypal            *SourceConfigWebhookAuthPaypal
	SourceConfigWebhookAuthTreezor           *SourceConfigWebhookAuthTreezor
	SourceConfigWebhookAuthPraxis            *SourceConfigWebhookAuthPraxis
	SourceConfigWebhookAuthCustomerIo        *SourceConfigWebhookAuthCustomerIo
	SourceConfigWebhookAuthFacebook          *SourceConfigWebhookAuthFacebook
	SourceConfigWebhookAuthWhatsApp          *SourceConfigWebhookAuthWhatsApp
	SourceConfigWebhookAuthReplicate         *SourceConfigWebhookAuthReplicate
	SourceConfigWebhookAuthTikTok            *SourceConfigWebhookAuthTikTok
	SourceConfigWebhookAuthAirwallex         *SourceConfigWebhookAuthAirwallex
	SourceConfigWebhookAuthZendesk           *SourceConfigWebhookAuthZendesk
	SourceConfigWebhookAuthUpollo            *SourceConfigWebhookAuthUpollo
	SourceConfigWebhookAuthLinkedIn          *SourceConfigWebhookAuthLinkedIn

	typ string
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthHmac(value *SourceConfigWebhookAuthHmac) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthHmac", SourceConfigWebhookAuthHmac: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthBasicAuth(value *SourceConfigWebhookAuthBasicAuth) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthBasicAuth", SourceConfigWebhookAuthBasicAuth: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthApiKey(value *SourceConfigWebhookAuthApiKey) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthApiKey", SourceConfigWebhookAuthApiKey: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthSanity(value *SourceConfigWebhookAuthSanity) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthSanity", SourceConfigWebhookAuthSanity: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthBridge(value *SourceConfigWebhookAuthBridge) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthBridge", SourceConfigWebhookAuthBridge: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthCloudSignal(value *SourceConfigWebhookAuthCloudSignal) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthCloudSignal", SourceConfigWebhookAuthCloudSignal: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthCourier(value *SourceConfigWebhookAuthCourier) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthCourier", SourceConfigWebhookAuthCourier: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthFrontApp(value *SourceConfigWebhookAuthFrontApp) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthFrontApp", SourceConfigWebhookAuthFrontApp: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthZoom(value *SourceConfigWebhookAuthZoom) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthZoom", SourceConfigWebhookAuthZoom: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthTwitter(value *SourceConfigWebhookAuthTwitter) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthTwitter", SourceConfigWebhookAuthTwitter: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthRecharge(value *SourceConfigWebhookAuthRecharge) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthRecharge", SourceConfigWebhookAuthRecharge: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthStripe(value *SourceConfigWebhookAuthStripe) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthStripe", SourceConfigWebhookAuthStripe: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthPropertyFinder(value *SourceConfigWebhookAuthPropertyFinder) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthPropertyFinder", SourceConfigWebhookAuthPropertyFinder: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthShopify(value *SourceConfigWebhookAuthShopify) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthShopify", SourceConfigWebhookAuthShopify: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthTwilio(value *SourceConfigWebhookAuthTwilio) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthTwilio", SourceConfigWebhookAuthTwilio: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthGitHub(value *SourceConfigWebhookAuthGitHub) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthGitHub", SourceConfigWebhookAuthGitHub: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthPostmark(value *SourceConfigWebhookAuthPostmark) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthPostmark", SourceConfigWebhookAuthPostmark: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthTypeform(value *SourceConfigWebhookAuthTypeform) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthTypeform", SourceConfigWebhookAuthTypeform: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthXero(value *SourceConfigWebhookAuthXero) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthXero", SourceConfigWebhookAuthXero: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthSvix(value *SourceConfigWebhookAuthSvix) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthSvix", SourceConfigWebhookAuthSvix: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthAdyen(value *SourceConfigWebhookAuthAdyen) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthAdyen", SourceConfigWebhookAuthAdyen: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthAkeneo(value *SourceConfigWebhookAuthAkeneo) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthAkeneo", SourceConfigWebhookAuthAkeneo: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthGitLab(value *SourceConfigWebhookAuthGitLab) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthGitLab", SourceConfigWebhookAuthGitLab: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthWooCommerce(value *SourceConfigWebhookAuthWooCommerce) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthWooCommerce", SourceConfigWebhookAuthWooCommerce: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthOura(value *SourceConfigWebhookAuthOura) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthOura", SourceConfigWebhookAuthOura: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthCommerceLayer(value *SourceConfigWebhookAuthCommerceLayer) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthCommerceLayer", SourceConfigWebhookAuthCommerceLayer: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthHubspot(value *SourceConfigWebhookAuthHubspot) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthHubspot", SourceConfigWebhookAuthHubspot: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthMailgun(value *SourceConfigWebhookAuthMailgun) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthMailgun", SourceConfigWebhookAuthMailgun: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthPersona(value *SourceConfigWebhookAuthPersona) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthPersona", SourceConfigWebhookAuthPersona: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthPipedrive(value *SourceConfigWebhookAuthPipedrive) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthPipedrive", SourceConfigWebhookAuthPipedrive: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthSendgrid(value *SourceConfigWebhookAuthSendgrid) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthSendgrid", SourceConfigWebhookAuthSendgrid: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthWorkOs(value *SourceConfigWebhookAuthWorkOs) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthWorkOs", SourceConfigWebhookAuthWorkOs: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthSynctera(value *SourceConfigWebhookAuthSynctera) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthSynctera", SourceConfigWebhookAuthSynctera: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthAwssns(value *SourceConfigWebhookAuthAwssns) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthAwssns", SourceConfigWebhookAuthAwssns: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuth3DEye(value *SourceConfigWebhookAuth3DEye) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuth3DEye", SourceConfigWebhookAuth3DEye: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthTwitch(value *SourceConfigWebhookAuthTwitch) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthTwitch", SourceConfigWebhookAuthTwitch: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthEnode(value *SourceConfigWebhookAuthEnode) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthEnode", SourceConfigWebhookAuthEnode: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthFavro(value *SourceConfigWebhookAuthFavro) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthFavro", SourceConfigWebhookAuthFavro: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthLinear(value *SourceConfigWebhookAuthLinear) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthLinear", SourceConfigWebhookAuthLinear: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthShopline(value *SourceConfigWebhookAuthShopline) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthShopline", SourceConfigWebhookAuthShopline: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthWix(value *SourceConfigWebhookAuthWix) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthWix", SourceConfigWebhookAuthWix: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthNmiPaymentGateway(value *SourceConfigWebhookAuthNmiPaymentGateway) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthNmiPaymentGateway", SourceConfigWebhookAuthNmiPaymentGateway: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthOrb(value *SourceConfigWebhookAuthOrb) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthOrb", SourceConfigWebhookAuthOrb: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthPylon(value *SourceConfigWebhookAuthPylon) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthPylon", SourceConfigWebhookAuthPylon: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthRazorpay(value *SourceConfigWebhookAuthRazorpay) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthRazorpay", SourceConfigWebhookAuthRazorpay: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthRepay(value *SourceConfigWebhookAuthRepay) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthRepay", SourceConfigWebhookAuthRepay: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthSquare(value *SourceConfigWebhookAuthSquare) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthSquare", SourceConfigWebhookAuthSquare: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthSolidgate(value *SourceConfigWebhookAuthSolidgate) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthSolidgate", SourceConfigWebhookAuthSolidgate: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthTrello(value *SourceConfigWebhookAuthTrello) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthTrello", SourceConfigWebhookAuthTrello: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthEbay(value *SourceConfigWebhookAuthEbay) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthEbay", SourceConfigWebhookAuthEbay: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthTelnyx(value *SourceConfigWebhookAuthTelnyx) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthTelnyx", SourceConfigWebhookAuthTelnyx: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthDiscord(value *SourceConfigWebhookAuthDiscord) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthDiscord", SourceConfigWebhookAuthDiscord: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthTokenIo(value *SourceConfigWebhookAuthTokenIo) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthTokenIo", SourceConfigWebhookAuthTokenIo: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthFiserv(value *SourceConfigWebhookAuthFiserv) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthFiserv", SourceConfigWebhookAuthFiserv: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthBondsmith(value *SourceConfigWebhookAuthBondsmith) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthBondsmith", SourceConfigWebhookAuthBondsmith: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthVercelLogDrains(value *SourceConfigWebhookAuthVercelLogDrains) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthVercelLogDrains", SourceConfigWebhookAuthVercelLogDrains: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthVercelWebhooks(value *SourceConfigWebhookAuthVercelWebhooks) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthVercelWebhooks", SourceConfigWebhookAuthVercelWebhooks: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthTebex(value *SourceConfigWebhookAuthTebex) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthTebex", SourceConfigWebhookAuthTebex: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthSlack(value *SourceConfigWebhookAuthSlack) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthSlack", SourceConfigWebhookAuthSlack: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthMailchimp(value *SourceConfigWebhookAuthMailchimp) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthMailchimp", SourceConfigWebhookAuthMailchimp: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthPaddle(value *SourceConfigWebhookAuthPaddle) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthPaddle", SourceConfigWebhookAuthPaddle: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthPaypal(value *SourceConfigWebhookAuthPaypal) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthPaypal", SourceConfigWebhookAuthPaypal: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthTreezor(value *SourceConfigWebhookAuthTreezor) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthTreezor", SourceConfigWebhookAuthTreezor: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthPraxis(value *SourceConfigWebhookAuthPraxis) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthPraxis", SourceConfigWebhookAuthPraxis: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthCustomerIo(value *SourceConfigWebhookAuthCustomerIo) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthCustomerIo", SourceConfigWebhookAuthCustomerIo: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthFacebook(value *SourceConfigWebhookAuthFacebook) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthFacebook", SourceConfigWebhookAuthFacebook: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthWhatsApp(value *SourceConfigWebhookAuthWhatsApp) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthWhatsApp", SourceConfigWebhookAuthWhatsApp: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthReplicate(value *SourceConfigWebhookAuthReplicate) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthReplicate", SourceConfigWebhookAuthReplicate: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthTikTok(value *SourceConfigWebhookAuthTikTok) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthTikTok", SourceConfigWebhookAuthTikTok: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthAirwallex(value *SourceConfigWebhookAuthAirwallex) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthAirwallex", SourceConfigWebhookAuthAirwallex: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthZendesk(value *SourceConfigWebhookAuthZendesk) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthZendesk", SourceConfigWebhookAuthZendesk: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthUpollo(value *SourceConfigWebhookAuthUpollo) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthUpollo", SourceConfigWebhookAuthUpollo: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceConfigWebhookAuthLinkedIn(value *SourceConfigWebhookAuthLinkedIn) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceConfigWebhookAuthLinkedIn", SourceConfigWebhookAuthLinkedIn: value}
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthHmac() *SourceConfigWebhookAuthHmac {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthHmac
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthBasicAuth() *SourceConfigWebhookAuthBasicAuth {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthBasicAuth
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthApiKey() *SourceConfigWebhookAuthApiKey {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthApiKey
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthSanity() *SourceConfigWebhookAuthSanity {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthSanity
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthBridge() *SourceConfigWebhookAuthBridge {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthBridge
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthCloudSignal() *SourceConfigWebhookAuthCloudSignal {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthCloudSignal
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthCourier() *SourceConfigWebhookAuthCourier {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthCourier
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthFrontApp() *SourceConfigWebhookAuthFrontApp {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthFrontApp
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthZoom() *SourceConfigWebhookAuthZoom {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthZoom
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthTwitter() *SourceConfigWebhookAuthTwitter {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthTwitter
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthRecharge() *SourceConfigWebhookAuthRecharge {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthRecharge
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthStripe() *SourceConfigWebhookAuthStripe {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthStripe
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthPropertyFinder() *SourceConfigWebhookAuthPropertyFinder {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthPropertyFinder
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthShopify() *SourceConfigWebhookAuthShopify {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthShopify
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthTwilio() *SourceConfigWebhookAuthTwilio {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthTwilio
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthGitHub() *SourceConfigWebhookAuthGitHub {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthGitHub
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthPostmark() *SourceConfigWebhookAuthPostmark {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthPostmark
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthTypeform() *SourceConfigWebhookAuthTypeform {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthTypeform
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthXero() *SourceConfigWebhookAuthXero {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthXero
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthSvix() *SourceConfigWebhookAuthSvix {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthSvix
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthAdyen() *SourceConfigWebhookAuthAdyen {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthAdyen
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthAkeneo() *SourceConfigWebhookAuthAkeneo {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthAkeneo
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthGitLab() *SourceConfigWebhookAuthGitLab {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthGitLab
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthWooCommerce() *SourceConfigWebhookAuthWooCommerce {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthWooCommerce
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthOura() *SourceConfigWebhookAuthOura {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthOura
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthCommerceLayer() *SourceConfigWebhookAuthCommerceLayer {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthCommerceLayer
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthHubspot() *SourceConfigWebhookAuthHubspot {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthHubspot
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthMailgun() *SourceConfigWebhookAuthMailgun {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthMailgun
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthPersona() *SourceConfigWebhookAuthPersona {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthPersona
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthPipedrive() *SourceConfigWebhookAuthPipedrive {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthPipedrive
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthSendgrid() *SourceConfigWebhookAuthSendgrid {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthSendgrid
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthWorkOs() *SourceConfigWebhookAuthWorkOs {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthWorkOs
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthSynctera() *SourceConfigWebhookAuthSynctera {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthSynctera
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthAwssns() *SourceConfigWebhookAuthAwssns {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthAwssns
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuth3DEye() *SourceConfigWebhookAuth3DEye {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuth3DEye
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthTwitch() *SourceConfigWebhookAuthTwitch {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthTwitch
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthEnode() *SourceConfigWebhookAuthEnode {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthEnode
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthFavro() *SourceConfigWebhookAuthFavro {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthFavro
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthLinear() *SourceConfigWebhookAuthLinear {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthLinear
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthShopline() *SourceConfigWebhookAuthShopline {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthShopline
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthWix() *SourceConfigWebhookAuthWix {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthWix
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthNmiPaymentGateway() *SourceConfigWebhookAuthNmiPaymentGateway {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthNmiPaymentGateway
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthOrb() *SourceConfigWebhookAuthOrb {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthOrb
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthPylon() *SourceConfigWebhookAuthPylon {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthPylon
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthRazorpay() *SourceConfigWebhookAuthRazorpay {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthRazorpay
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthRepay() *SourceConfigWebhookAuthRepay {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthRepay
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthSquare() *SourceConfigWebhookAuthSquare {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthSquare
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthSolidgate() *SourceConfigWebhookAuthSolidgate {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthSolidgate
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthTrello() *SourceConfigWebhookAuthTrello {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthTrello
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthEbay() *SourceConfigWebhookAuthEbay {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthEbay
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthTelnyx() *SourceConfigWebhookAuthTelnyx {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthTelnyx
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthDiscord() *SourceConfigWebhookAuthDiscord {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthDiscord
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthTokenIo() *SourceConfigWebhookAuthTokenIo {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthTokenIo
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthFiserv() *SourceConfigWebhookAuthFiserv {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthFiserv
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthBondsmith() *SourceConfigWebhookAuthBondsmith {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthBondsmith
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthVercelLogDrains() *SourceConfigWebhookAuthVercelLogDrains {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthVercelLogDrains
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthVercelWebhooks() *SourceConfigWebhookAuthVercelWebhooks {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthVercelWebhooks
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthTebex() *SourceConfigWebhookAuthTebex {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthTebex
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthSlack() *SourceConfigWebhookAuthSlack {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthSlack
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthMailchimp() *SourceConfigWebhookAuthMailchimp {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthMailchimp
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthPaddle() *SourceConfigWebhookAuthPaddle {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthPaddle
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthPaypal() *SourceConfigWebhookAuthPaypal {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthPaypal
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthTreezor() *SourceConfigWebhookAuthTreezor {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthTreezor
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthPraxis() *SourceConfigWebhookAuthPraxis {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthPraxis
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthCustomerIo() *SourceConfigWebhookAuthCustomerIo {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthCustomerIo
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthFacebook() *SourceConfigWebhookAuthFacebook {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthFacebook
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthWhatsApp() *SourceConfigWebhookAuthWhatsApp {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthWhatsApp
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthReplicate() *SourceConfigWebhookAuthReplicate {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthReplicate
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthTikTok() *SourceConfigWebhookAuthTikTok {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthTikTok
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthAirwallex() *SourceConfigWebhookAuthAirwallex {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthAirwallex
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthZendesk() *SourceConfigWebhookAuthZendesk {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthZendesk
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthUpollo() *SourceConfigWebhookAuthUpollo {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthUpollo
}

func (s *SourceTypeConfigWebhookAuth) GetSourceConfigWebhookAuthLinkedIn() *SourceConfigWebhookAuthLinkedIn {
	if s == nil {
		return nil
	}
	return s.SourceConfigWebhookAuthLinkedIn
}

func (s *SourceTypeConfigWebhookAuth) UnmarshalJSON(data []byte) error {
	valueSourceConfigWebhookAuthHmac := new(SourceConfigWebhookAuthHmac)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthHmac); err == nil {
		s.typ = "SourceConfigWebhookAuthHmac"
		s.SourceConfigWebhookAuthHmac = valueSourceConfigWebhookAuthHmac
		return nil
	}
	valueSourceConfigWebhookAuthBasicAuth := new(SourceConfigWebhookAuthBasicAuth)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthBasicAuth); err == nil {
		s.typ = "SourceConfigWebhookAuthBasicAuth"
		s.SourceConfigWebhookAuthBasicAuth = valueSourceConfigWebhookAuthBasicAuth
		return nil
	}
	valueSourceConfigWebhookAuthApiKey := new(SourceConfigWebhookAuthApiKey)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthApiKey); err == nil {
		s.typ = "SourceConfigWebhookAuthApiKey"
		s.SourceConfigWebhookAuthApiKey = valueSourceConfigWebhookAuthApiKey
		return nil
	}
	valueSourceConfigWebhookAuthSanity := new(SourceConfigWebhookAuthSanity)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthSanity); err == nil {
		s.typ = "SourceConfigWebhookAuthSanity"
		s.SourceConfigWebhookAuthSanity = valueSourceConfigWebhookAuthSanity
		return nil
	}
	valueSourceConfigWebhookAuthBridge := new(SourceConfigWebhookAuthBridge)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthBridge); err == nil {
		s.typ = "SourceConfigWebhookAuthBridge"
		s.SourceConfigWebhookAuthBridge = valueSourceConfigWebhookAuthBridge
		return nil
	}
	valueSourceConfigWebhookAuthCloudSignal := new(SourceConfigWebhookAuthCloudSignal)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthCloudSignal); err == nil {
		s.typ = "SourceConfigWebhookAuthCloudSignal"
		s.SourceConfigWebhookAuthCloudSignal = valueSourceConfigWebhookAuthCloudSignal
		return nil
	}
	valueSourceConfigWebhookAuthCourier := new(SourceConfigWebhookAuthCourier)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthCourier); err == nil {
		s.typ = "SourceConfigWebhookAuthCourier"
		s.SourceConfigWebhookAuthCourier = valueSourceConfigWebhookAuthCourier
		return nil
	}
	valueSourceConfigWebhookAuthFrontApp := new(SourceConfigWebhookAuthFrontApp)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthFrontApp); err == nil {
		s.typ = "SourceConfigWebhookAuthFrontApp"
		s.SourceConfigWebhookAuthFrontApp = valueSourceConfigWebhookAuthFrontApp
		return nil
	}
	valueSourceConfigWebhookAuthZoom := new(SourceConfigWebhookAuthZoom)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthZoom); err == nil {
		s.typ = "SourceConfigWebhookAuthZoom"
		s.SourceConfigWebhookAuthZoom = valueSourceConfigWebhookAuthZoom
		return nil
	}
	valueSourceConfigWebhookAuthTwitter := new(SourceConfigWebhookAuthTwitter)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthTwitter); err == nil {
		s.typ = "SourceConfigWebhookAuthTwitter"
		s.SourceConfigWebhookAuthTwitter = valueSourceConfigWebhookAuthTwitter
		return nil
	}
	valueSourceConfigWebhookAuthRecharge := new(SourceConfigWebhookAuthRecharge)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthRecharge); err == nil {
		s.typ = "SourceConfigWebhookAuthRecharge"
		s.SourceConfigWebhookAuthRecharge = valueSourceConfigWebhookAuthRecharge
		return nil
	}
	valueSourceConfigWebhookAuthStripe := new(SourceConfigWebhookAuthStripe)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthStripe); err == nil {
		s.typ = "SourceConfigWebhookAuthStripe"
		s.SourceConfigWebhookAuthStripe = valueSourceConfigWebhookAuthStripe
		return nil
	}
	valueSourceConfigWebhookAuthPropertyFinder := new(SourceConfigWebhookAuthPropertyFinder)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthPropertyFinder); err == nil {
		s.typ = "SourceConfigWebhookAuthPropertyFinder"
		s.SourceConfigWebhookAuthPropertyFinder = valueSourceConfigWebhookAuthPropertyFinder
		return nil
	}
	valueSourceConfigWebhookAuthShopify := new(SourceConfigWebhookAuthShopify)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthShopify); err == nil {
		s.typ = "SourceConfigWebhookAuthShopify"
		s.SourceConfigWebhookAuthShopify = valueSourceConfigWebhookAuthShopify
		return nil
	}
	valueSourceConfigWebhookAuthTwilio := new(SourceConfigWebhookAuthTwilio)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthTwilio); err == nil {
		s.typ = "SourceConfigWebhookAuthTwilio"
		s.SourceConfigWebhookAuthTwilio = valueSourceConfigWebhookAuthTwilio
		return nil
	}
	valueSourceConfigWebhookAuthGitHub := new(SourceConfigWebhookAuthGitHub)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthGitHub); err == nil {
		s.typ = "SourceConfigWebhookAuthGitHub"
		s.SourceConfigWebhookAuthGitHub = valueSourceConfigWebhookAuthGitHub
		return nil
	}
	valueSourceConfigWebhookAuthPostmark := new(SourceConfigWebhookAuthPostmark)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthPostmark); err == nil {
		s.typ = "SourceConfigWebhookAuthPostmark"
		s.SourceConfigWebhookAuthPostmark = valueSourceConfigWebhookAuthPostmark
		return nil
	}
	valueSourceConfigWebhookAuthTypeform := new(SourceConfigWebhookAuthTypeform)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthTypeform); err == nil {
		s.typ = "SourceConfigWebhookAuthTypeform"
		s.SourceConfigWebhookAuthTypeform = valueSourceConfigWebhookAuthTypeform
		return nil
	}
	valueSourceConfigWebhookAuthXero := new(SourceConfigWebhookAuthXero)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthXero); err == nil {
		s.typ = "SourceConfigWebhookAuthXero"
		s.SourceConfigWebhookAuthXero = valueSourceConfigWebhookAuthXero
		return nil
	}
	valueSourceConfigWebhookAuthSvix := new(SourceConfigWebhookAuthSvix)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthSvix); err == nil {
		s.typ = "SourceConfigWebhookAuthSvix"
		s.SourceConfigWebhookAuthSvix = valueSourceConfigWebhookAuthSvix
		return nil
	}
	valueSourceConfigWebhookAuthAdyen := new(SourceConfigWebhookAuthAdyen)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthAdyen); err == nil {
		s.typ = "SourceConfigWebhookAuthAdyen"
		s.SourceConfigWebhookAuthAdyen = valueSourceConfigWebhookAuthAdyen
		return nil
	}
	valueSourceConfigWebhookAuthAkeneo := new(SourceConfigWebhookAuthAkeneo)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthAkeneo); err == nil {
		s.typ = "SourceConfigWebhookAuthAkeneo"
		s.SourceConfigWebhookAuthAkeneo = valueSourceConfigWebhookAuthAkeneo
		return nil
	}
	valueSourceConfigWebhookAuthGitLab := new(SourceConfigWebhookAuthGitLab)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthGitLab); err == nil {
		s.typ = "SourceConfigWebhookAuthGitLab"
		s.SourceConfigWebhookAuthGitLab = valueSourceConfigWebhookAuthGitLab
		return nil
	}
	valueSourceConfigWebhookAuthWooCommerce := new(SourceConfigWebhookAuthWooCommerce)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthWooCommerce); err == nil {
		s.typ = "SourceConfigWebhookAuthWooCommerce"
		s.SourceConfigWebhookAuthWooCommerce = valueSourceConfigWebhookAuthWooCommerce
		return nil
	}
	valueSourceConfigWebhookAuthOura := new(SourceConfigWebhookAuthOura)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthOura); err == nil {
		s.typ = "SourceConfigWebhookAuthOura"
		s.SourceConfigWebhookAuthOura = valueSourceConfigWebhookAuthOura
		return nil
	}
	valueSourceConfigWebhookAuthCommerceLayer := new(SourceConfigWebhookAuthCommerceLayer)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthCommerceLayer); err == nil {
		s.typ = "SourceConfigWebhookAuthCommerceLayer"
		s.SourceConfigWebhookAuthCommerceLayer = valueSourceConfigWebhookAuthCommerceLayer
		return nil
	}
	valueSourceConfigWebhookAuthHubspot := new(SourceConfigWebhookAuthHubspot)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthHubspot); err == nil {
		s.typ = "SourceConfigWebhookAuthHubspot"
		s.SourceConfigWebhookAuthHubspot = valueSourceConfigWebhookAuthHubspot
		return nil
	}
	valueSourceConfigWebhookAuthMailgun := new(SourceConfigWebhookAuthMailgun)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthMailgun); err == nil {
		s.typ = "SourceConfigWebhookAuthMailgun"
		s.SourceConfigWebhookAuthMailgun = valueSourceConfigWebhookAuthMailgun
		return nil
	}
	valueSourceConfigWebhookAuthPersona := new(SourceConfigWebhookAuthPersona)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthPersona); err == nil {
		s.typ = "SourceConfigWebhookAuthPersona"
		s.SourceConfigWebhookAuthPersona = valueSourceConfigWebhookAuthPersona
		return nil
	}
	valueSourceConfigWebhookAuthPipedrive := new(SourceConfigWebhookAuthPipedrive)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthPipedrive); err == nil {
		s.typ = "SourceConfigWebhookAuthPipedrive"
		s.SourceConfigWebhookAuthPipedrive = valueSourceConfigWebhookAuthPipedrive
		return nil
	}
	valueSourceConfigWebhookAuthSendgrid := new(SourceConfigWebhookAuthSendgrid)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthSendgrid); err == nil {
		s.typ = "SourceConfigWebhookAuthSendgrid"
		s.SourceConfigWebhookAuthSendgrid = valueSourceConfigWebhookAuthSendgrid
		return nil
	}
	valueSourceConfigWebhookAuthWorkOs := new(SourceConfigWebhookAuthWorkOs)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthWorkOs); err == nil {
		s.typ = "SourceConfigWebhookAuthWorkOs"
		s.SourceConfigWebhookAuthWorkOs = valueSourceConfigWebhookAuthWorkOs
		return nil
	}
	valueSourceConfigWebhookAuthSynctera := new(SourceConfigWebhookAuthSynctera)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthSynctera); err == nil {
		s.typ = "SourceConfigWebhookAuthSynctera"
		s.SourceConfigWebhookAuthSynctera = valueSourceConfigWebhookAuthSynctera
		return nil
	}
	valueSourceConfigWebhookAuthAwssns := new(SourceConfigWebhookAuthAwssns)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthAwssns); err == nil {
		s.typ = "SourceConfigWebhookAuthAwssns"
		s.SourceConfigWebhookAuthAwssns = valueSourceConfigWebhookAuthAwssns
		return nil
	}
	valueSourceConfigWebhookAuth3DEye := new(SourceConfigWebhookAuth3DEye)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuth3DEye); err == nil {
		s.typ = "SourceConfigWebhookAuth3DEye"
		s.SourceConfigWebhookAuth3DEye = valueSourceConfigWebhookAuth3DEye
		return nil
	}
	valueSourceConfigWebhookAuthTwitch := new(SourceConfigWebhookAuthTwitch)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthTwitch); err == nil {
		s.typ = "SourceConfigWebhookAuthTwitch"
		s.SourceConfigWebhookAuthTwitch = valueSourceConfigWebhookAuthTwitch
		return nil
	}
	valueSourceConfigWebhookAuthEnode := new(SourceConfigWebhookAuthEnode)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthEnode); err == nil {
		s.typ = "SourceConfigWebhookAuthEnode"
		s.SourceConfigWebhookAuthEnode = valueSourceConfigWebhookAuthEnode
		return nil
	}
	valueSourceConfigWebhookAuthFavro := new(SourceConfigWebhookAuthFavro)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthFavro); err == nil {
		s.typ = "SourceConfigWebhookAuthFavro"
		s.SourceConfigWebhookAuthFavro = valueSourceConfigWebhookAuthFavro
		return nil
	}
	valueSourceConfigWebhookAuthLinear := new(SourceConfigWebhookAuthLinear)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthLinear); err == nil {
		s.typ = "SourceConfigWebhookAuthLinear"
		s.SourceConfigWebhookAuthLinear = valueSourceConfigWebhookAuthLinear
		return nil
	}
	valueSourceConfigWebhookAuthShopline := new(SourceConfigWebhookAuthShopline)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthShopline); err == nil {
		s.typ = "SourceConfigWebhookAuthShopline"
		s.SourceConfigWebhookAuthShopline = valueSourceConfigWebhookAuthShopline
		return nil
	}
	valueSourceConfigWebhookAuthWix := new(SourceConfigWebhookAuthWix)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthWix); err == nil {
		s.typ = "SourceConfigWebhookAuthWix"
		s.SourceConfigWebhookAuthWix = valueSourceConfigWebhookAuthWix
		return nil
	}
	valueSourceConfigWebhookAuthNmiPaymentGateway := new(SourceConfigWebhookAuthNmiPaymentGateway)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthNmiPaymentGateway); err == nil {
		s.typ = "SourceConfigWebhookAuthNmiPaymentGateway"
		s.SourceConfigWebhookAuthNmiPaymentGateway = valueSourceConfigWebhookAuthNmiPaymentGateway
		return nil
	}
	valueSourceConfigWebhookAuthOrb := new(SourceConfigWebhookAuthOrb)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthOrb); err == nil {
		s.typ = "SourceConfigWebhookAuthOrb"
		s.SourceConfigWebhookAuthOrb = valueSourceConfigWebhookAuthOrb
		return nil
	}
	valueSourceConfigWebhookAuthPylon := new(SourceConfigWebhookAuthPylon)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthPylon); err == nil {
		s.typ = "SourceConfigWebhookAuthPylon"
		s.SourceConfigWebhookAuthPylon = valueSourceConfigWebhookAuthPylon
		return nil
	}
	valueSourceConfigWebhookAuthRazorpay := new(SourceConfigWebhookAuthRazorpay)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthRazorpay); err == nil {
		s.typ = "SourceConfigWebhookAuthRazorpay"
		s.SourceConfigWebhookAuthRazorpay = valueSourceConfigWebhookAuthRazorpay
		return nil
	}
	valueSourceConfigWebhookAuthRepay := new(SourceConfigWebhookAuthRepay)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthRepay); err == nil {
		s.typ = "SourceConfigWebhookAuthRepay"
		s.SourceConfigWebhookAuthRepay = valueSourceConfigWebhookAuthRepay
		return nil
	}
	valueSourceConfigWebhookAuthSquare := new(SourceConfigWebhookAuthSquare)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthSquare); err == nil {
		s.typ = "SourceConfigWebhookAuthSquare"
		s.SourceConfigWebhookAuthSquare = valueSourceConfigWebhookAuthSquare
		return nil
	}
	valueSourceConfigWebhookAuthSolidgate := new(SourceConfigWebhookAuthSolidgate)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthSolidgate); err == nil {
		s.typ = "SourceConfigWebhookAuthSolidgate"
		s.SourceConfigWebhookAuthSolidgate = valueSourceConfigWebhookAuthSolidgate
		return nil
	}
	valueSourceConfigWebhookAuthTrello := new(SourceConfigWebhookAuthTrello)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthTrello); err == nil {
		s.typ = "SourceConfigWebhookAuthTrello"
		s.SourceConfigWebhookAuthTrello = valueSourceConfigWebhookAuthTrello
		return nil
	}
	valueSourceConfigWebhookAuthEbay := new(SourceConfigWebhookAuthEbay)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthEbay); err == nil {
		s.typ = "SourceConfigWebhookAuthEbay"
		s.SourceConfigWebhookAuthEbay = valueSourceConfigWebhookAuthEbay
		return nil
	}
	valueSourceConfigWebhookAuthTelnyx := new(SourceConfigWebhookAuthTelnyx)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthTelnyx); err == nil {
		s.typ = "SourceConfigWebhookAuthTelnyx"
		s.SourceConfigWebhookAuthTelnyx = valueSourceConfigWebhookAuthTelnyx
		return nil
	}
	valueSourceConfigWebhookAuthDiscord := new(SourceConfigWebhookAuthDiscord)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthDiscord); err == nil {
		s.typ = "SourceConfigWebhookAuthDiscord"
		s.SourceConfigWebhookAuthDiscord = valueSourceConfigWebhookAuthDiscord
		return nil
	}
	valueSourceConfigWebhookAuthTokenIo := new(SourceConfigWebhookAuthTokenIo)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthTokenIo); err == nil {
		s.typ = "SourceConfigWebhookAuthTokenIo"
		s.SourceConfigWebhookAuthTokenIo = valueSourceConfigWebhookAuthTokenIo
		return nil
	}
	valueSourceConfigWebhookAuthFiserv := new(SourceConfigWebhookAuthFiserv)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthFiserv); err == nil {
		s.typ = "SourceConfigWebhookAuthFiserv"
		s.SourceConfigWebhookAuthFiserv = valueSourceConfigWebhookAuthFiserv
		return nil
	}
	valueSourceConfigWebhookAuthBondsmith := new(SourceConfigWebhookAuthBondsmith)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthBondsmith); err == nil {
		s.typ = "SourceConfigWebhookAuthBondsmith"
		s.SourceConfigWebhookAuthBondsmith = valueSourceConfigWebhookAuthBondsmith
		return nil
	}
	valueSourceConfigWebhookAuthVercelLogDrains := new(SourceConfigWebhookAuthVercelLogDrains)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthVercelLogDrains); err == nil {
		s.typ = "SourceConfigWebhookAuthVercelLogDrains"
		s.SourceConfigWebhookAuthVercelLogDrains = valueSourceConfigWebhookAuthVercelLogDrains
		return nil
	}
	valueSourceConfigWebhookAuthVercelWebhooks := new(SourceConfigWebhookAuthVercelWebhooks)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthVercelWebhooks); err == nil {
		s.typ = "SourceConfigWebhookAuthVercelWebhooks"
		s.SourceConfigWebhookAuthVercelWebhooks = valueSourceConfigWebhookAuthVercelWebhooks
		return nil
	}
	valueSourceConfigWebhookAuthTebex := new(SourceConfigWebhookAuthTebex)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthTebex); err == nil {
		s.typ = "SourceConfigWebhookAuthTebex"
		s.SourceConfigWebhookAuthTebex = valueSourceConfigWebhookAuthTebex
		return nil
	}
	valueSourceConfigWebhookAuthSlack := new(SourceConfigWebhookAuthSlack)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthSlack); err == nil {
		s.typ = "SourceConfigWebhookAuthSlack"
		s.SourceConfigWebhookAuthSlack = valueSourceConfigWebhookAuthSlack
		return nil
	}
	valueSourceConfigWebhookAuthMailchimp := new(SourceConfigWebhookAuthMailchimp)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthMailchimp); err == nil {
		s.typ = "SourceConfigWebhookAuthMailchimp"
		s.SourceConfigWebhookAuthMailchimp = valueSourceConfigWebhookAuthMailchimp
		return nil
	}
	valueSourceConfigWebhookAuthPaddle := new(SourceConfigWebhookAuthPaddle)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthPaddle); err == nil {
		s.typ = "SourceConfigWebhookAuthPaddle"
		s.SourceConfigWebhookAuthPaddle = valueSourceConfigWebhookAuthPaddle
		return nil
	}
	valueSourceConfigWebhookAuthPaypal := new(SourceConfigWebhookAuthPaypal)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthPaypal); err == nil {
		s.typ = "SourceConfigWebhookAuthPaypal"
		s.SourceConfigWebhookAuthPaypal = valueSourceConfigWebhookAuthPaypal
		return nil
	}
	valueSourceConfigWebhookAuthTreezor := new(SourceConfigWebhookAuthTreezor)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthTreezor); err == nil {
		s.typ = "SourceConfigWebhookAuthTreezor"
		s.SourceConfigWebhookAuthTreezor = valueSourceConfigWebhookAuthTreezor
		return nil
	}
	valueSourceConfigWebhookAuthPraxis := new(SourceConfigWebhookAuthPraxis)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthPraxis); err == nil {
		s.typ = "SourceConfigWebhookAuthPraxis"
		s.SourceConfigWebhookAuthPraxis = valueSourceConfigWebhookAuthPraxis
		return nil
	}
	valueSourceConfigWebhookAuthCustomerIo := new(SourceConfigWebhookAuthCustomerIo)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthCustomerIo); err == nil {
		s.typ = "SourceConfigWebhookAuthCustomerIo"
		s.SourceConfigWebhookAuthCustomerIo = valueSourceConfigWebhookAuthCustomerIo
		return nil
	}
	valueSourceConfigWebhookAuthFacebook := new(SourceConfigWebhookAuthFacebook)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthFacebook); err == nil {
		s.typ = "SourceConfigWebhookAuthFacebook"
		s.SourceConfigWebhookAuthFacebook = valueSourceConfigWebhookAuthFacebook
		return nil
	}
	valueSourceConfigWebhookAuthWhatsApp := new(SourceConfigWebhookAuthWhatsApp)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthWhatsApp); err == nil {
		s.typ = "SourceConfigWebhookAuthWhatsApp"
		s.SourceConfigWebhookAuthWhatsApp = valueSourceConfigWebhookAuthWhatsApp
		return nil
	}
	valueSourceConfigWebhookAuthReplicate := new(SourceConfigWebhookAuthReplicate)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthReplicate); err == nil {
		s.typ = "SourceConfigWebhookAuthReplicate"
		s.SourceConfigWebhookAuthReplicate = valueSourceConfigWebhookAuthReplicate
		return nil
	}
	valueSourceConfigWebhookAuthTikTok := new(SourceConfigWebhookAuthTikTok)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthTikTok); err == nil {
		s.typ = "SourceConfigWebhookAuthTikTok"
		s.SourceConfigWebhookAuthTikTok = valueSourceConfigWebhookAuthTikTok
		return nil
	}
	valueSourceConfigWebhookAuthAirwallex := new(SourceConfigWebhookAuthAirwallex)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthAirwallex); err == nil {
		s.typ = "SourceConfigWebhookAuthAirwallex"
		s.SourceConfigWebhookAuthAirwallex = valueSourceConfigWebhookAuthAirwallex
		return nil
	}
	valueSourceConfigWebhookAuthZendesk := new(SourceConfigWebhookAuthZendesk)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthZendesk); err == nil {
		s.typ = "SourceConfigWebhookAuthZendesk"
		s.SourceConfigWebhookAuthZendesk = valueSourceConfigWebhookAuthZendesk
		return nil
	}
	valueSourceConfigWebhookAuthUpollo := new(SourceConfigWebhookAuthUpollo)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthUpollo); err == nil {
		s.typ = "SourceConfigWebhookAuthUpollo"
		s.SourceConfigWebhookAuthUpollo = valueSourceConfigWebhookAuthUpollo
		return nil
	}
	valueSourceConfigWebhookAuthLinkedIn := new(SourceConfigWebhookAuthLinkedIn)
	if err := json.Unmarshal(data, &valueSourceConfigWebhookAuthLinkedIn); err == nil {
		s.typ = "SourceConfigWebhookAuthLinkedIn"
		s.SourceConfigWebhookAuthLinkedIn = valueSourceConfigWebhookAuthLinkedIn
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SourceTypeConfigWebhookAuth) MarshalJSON() ([]byte, error) {
	if s.typ == "SourceConfigWebhookAuthHmac" || s.SourceConfigWebhookAuthHmac != nil {
		return json.Marshal(s.SourceConfigWebhookAuthHmac)
	}
	if s.typ == "SourceConfigWebhookAuthBasicAuth" || s.SourceConfigWebhookAuthBasicAuth != nil {
		return json.Marshal(s.SourceConfigWebhookAuthBasicAuth)
	}
	if s.typ == "SourceConfigWebhookAuthApiKey" || s.SourceConfigWebhookAuthApiKey != nil {
		return json.Marshal(s.SourceConfigWebhookAuthApiKey)
	}
	if s.typ == "SourceConfigWebhookAuthSanity" || s.SourceConfigWebhookAuthSanity != nil {
		return json.Marshal(s.SourceConfigWebhookAuthSanity)
	}
	if s.typ == "SourceConfigWebhookAuthBridge" || s.SourceConfigWebhookAuthBridge != nil {
		return json.Marshal(s.SourceConfigWebhookAuthBridge)
	}
	if s.typ == "SourceConfigWebhookAuthCloudSignal" || s.SourceConfigWebhookAuthCloudSignal != nil {
		return json.Marshal(s.SourceConfigWebhookAuthCloudSignal)
	}
	if s.typ == "SourceConfigWebhookAuthCourier" || s.SourceConfigWebhookAuthCourier != nil {
		return json.Marshal(s.SourceConfigWebhookAuthCourier)
	}
	if s.typ == "SourceConfigWebhookAuthFrontApp" || s.SourceConfigWebhookAuthFrontApp != nil {
		return json.Marshal(s.SourceConfigWebhookAuthFrontApp)
	}
	if s.typ == "SourceConfigWebhookAuthZoom" || s.SourceConfigWebhookAuthZoom != nil {
		return json.Marshal(s.SourceConfigWebhookAuthZoom)
	}
	if s.typ == "SourceConfigWebhookAuthTwitter" || s.SourceConfigWebhookAuthTwitter != nil {
		return json.Marshal(s.SourceConfigWebhookAuthTwitter)
	}
	if s.typ == "SourceConfigWebhookAuthRecharge" || s.SourceConfigWebhookAuthRecharge != nil {
		return json.Marshal(s.SourceConfigWebhookAuthRecharge)
	}
	if s.typ == "SourceConfigWebhookAuthStripe" || s.SourceConfigWebhookAuthStripe != nil {
		return json.Marshal(s.SourceConfigWebhookAuthStripe)
	}
	if s.typ == "SourceConfigWebhookAuthPropertyFinder" || s.SourceConfigWebhookAuthPropertyFinder != nil {
		return json.Marshal(s.SourceConfigWebhookAuthPropertyFinder)
	}
	if s.typ == "SourceConfigWebhookAuthShopify" || s.SourceConfigWebhookAuthShopify != nil {
		return json.Marshal(s.SourceConfigWebhookAuthShopify)
	}
	if s.typ == "SourceConfigWebhookAuthTwilio" || s.SourceConfigWebhookAuthTwilio != nil {
		return json.Marshal(s.SourceConfigWebhookAuthTwilio)
	}
	if s.typ == "SourceConfigWebhookAuthGitHub" || s.SourceConfigWebhookAuthGitHub != nil {
		return json.Marshal(s.SourceConfigWebhookAuthGitHub)
	}
	if s.typ == "SourceConfigWebhookAuthPostmark" || s.SourceConfigWebhookAuthPostmark != nil {
		return json.Marshal(s.SourceConfigWebhookAuthPostmark)
	}
	if s.typ == "SourceConfigWebhookAuthTypeform" || s.SourceConfigWebhookAuthTypeform != nil {
		return json.Marshal(s.SourceConfigWebhookAuthTypeform)
	}
	if s.typ == "SourceConfigWebhookAuthXero" || s.SourceConfigWebhookAuthXero != nil {
		return json.Marshal(s.SourceConfigWebhookAuthXero)
	}
	if s.typ == "SourceConfigWebhookAuthSvix" || s.SourceConfigWebhookAuthSvix != nil {
		return json.Marshal(s.SourceConfigWebhookAuthSvix)
	}
	if s.typ == "SourceConfigWebhookAuthAdyen" || s.SourceConfigWebhookAuthAdyen != nil {
		return json.Marshal(s.SourceConfigWebhookAuthAdyen)
	}
	if s.typ == "SourceConfigWebhookAuthAkeneo" || s.SourceConfigWebhookAuthAkeneo != nil {
		return json.Marshal(s.SourceConfigWebhookAuthAkeneo)
	}
	if s.typ == "SourceConfigWebhookAuthGitLab" || s.SourceConfigWebhookAuthGitLab != nil {
		return json.Marshal(s.SourceConfigWebhookAuthGitLab)
	}
	if s.typ == "SourceConfigWebhookAuthWooCommerce" || s.SourceConfigWebhookAuthWooCommerce != nil {
		return json.Marshal(s.SourceConfigWebhookAuthWooCommerce)
	}
	if s.typ == "SourceConfigWebhookAuthOura" || s.SourceConfigWebhookAuthOura != nil {
		return json.Marshal(s.SourceConfigWebhookAuthOura)
	}
	if s.typ == "SourceConfigWebhookAuthCommerceLayer" || s.SourceConfigWebhookAuthCommerceLayer != nil {
		return json.Marshal(s.SourceConfigWebhookAuthCommerceLayer)
	}
	if s.typ == "SourceConfigWebhookAuthHubspot" || s.SourceConfigWebhookAuthHubspot != nil {
		return json.Marshal(s.SourceConfigWebhookAuthHubspot)
	}
	if s.typ == "SourceConfigWebhookAuthMailgun" || s.SourceConfigWebhookAuthMailgun != nil {
		return json.Marshal(s.SourceConfigWebhookAuthMailgun)
	}
	if s.typ == "SourceConfigWebhookAuthPersona" || s.SourceConfigWebhookAuthPersona != nil {
		return json.Marshal(s.SourceConfigWebhookAuthPersona)
	}
	if s.typ == "SourceConfigWebhookAuthPipedrive" || s.SourceConfigWebhookAuthPipedrive != nil {
		return json.Marshal(s.SourceConfigWebhookAuthPipedrive)
	}
	if s.typ == "SourceConfigWebhookAuthSendgrid" || s.SourceConfigWebhookAuthSendgrid != nil {
		return json.Marshal(s.SourceConfigWebhookAuthSendgrid)
	}
	if s.typ == "SourceConfigWebhookAuthWorkOs" || s.SourceConfigWebhookAuthWorkOs != nil {
		return json.Marshal(s.SourceConfigWebhookAuthWorkOs)
	}
	if s.typ == "SourceConfigWebhookAuthSynctera" || s.SourceConfigWebhookAuthSynctera != nil {
		return json.Marshal(s.SourceConfigWebhookAuthSynctera)
	}
	if s.typ == "SourceConfigWebhookAuthAwssns" || s.SourceConfigWebhookAuthAwssns != nil {
		return json.Marshal(s.SourceConfigWebhookAuthAwssns)
	}
	if s.typ == "SourceConfigWebhookAuth3DEye" || s.SourceConfigWebhookAuth3DEye != nil {
		return json.Marshal(s.SourceConfigWebhookAuth3DEye)
	}
	if s.typ == "SourceConfigWebhookAuthTwitch" || s.SourceConfigWebhookAuthTwitch != nil {
		return json.Marshal(s.SourceConfigWebhookAuthTwitch)
	}
	if s.typ == "SourceConfigWebhookAuthEnode" || s.SourceConfigWebhookAuthEnode != nil {
		return json.Marshal(s.SourceConfigWebhookAuthEnode)
	}
	if s.typ == "SourceConfigWebhookAuthFavro" || s.SourceConfigWebhookAuthFavro != nil {
		return json.Marshal(s.SourceConfigWebhookAuthFavro)
	}
	if s.typ == "SourceConfigWebhookAuthLinear" || s.SourceConfigWebhookAuthLinear != nil {
		return json.Marshal(s.SourceConfigWebhookAuthLinear)
	}
	if s.typ == "SourceConfigWebhookAuthShopline" || s.SourceConfigWebhookAuthShopline != nil {
		return json.Marshal(s.SourceConfigWebhookAuthShopline)
	}
	if s.typ == "SourceConfigWebhookAuthWix" || s.SourceConfigWebhookAuthWix != nil {
		return json.Marshal(s.SourceConfigWebhookAuthWix)
	}
	if s.typ == "SourceConfigWebhookAuthNmiPaymentGateway" || s.SourceConfigWebhookAuthNmiPaymentGateway != nil {
		return json.Marshal(s.SourceConfigWebhookAuthNmiPaymentGateway)
	}
	if s.typ == "SourceConfigWebhookAuthOrb" || s.SourceConfigWebhookAuthOrb != nil {
		return json.Marshal(s.SourceConfigWebhookAuthOrb)
	}
	if s.typ == "SourceConfigWebhookAuthPylon" || s.SourceConfigWebhookAuthPylon != nil {
		return json.Marshal(s.SourceConfigWebhookAuthPylon)
	}
	if s.typ == "SourceConfigWebhookAuthRazorpay" || s.SourceConfigWebhookAuthRazorpay != nil {
		return json.Marshal(s.SourceConfigWebhookAuthRazorpay)
	}
	if s.typ == "SourceConfigWebhookAuthRepay" || s.SourceConfigWebhookAuthRepay != nil {
		return json.Marshal(s.SourceConfigWebhookAuthRepay)
	}
	if s.typ == "SourceConfigWebhookAuthSquare" || s.SourceConfigWebhookAuthSquare != nil {
		return json.Marshal(s.SourceConfigWebhookAuthSquare)
	}
	if s.typ == "SourceConfigWebhookAuthSolidgate" || s.SourceConfigWebhookAuthSolidgate != nil {
		return json.Marshal(s.SourceConfigWebhookAuthSolidgate)
	}
	if s.typ == "SourceConfigWebhookAuthTrello" || s.SourceConfigWebhookAuthTrello != nil {
		return json.Marshal(s.SourceConfigWebhookAuthTrello)
	}
	if s.typ == "SourceConfigWebhookAuthEbay" || s.SourceConfigWebhookAuthEbay != nil {
		return json.Marshal(s.SourceConfigWebhookAuthEbay)
	}
	if s.typ == "SourceConfigWebhookAuthTelnyx" || s.SourceConfigWebhookAuthTelnyx != nil {
		return json.Marshal(s.SourceConfigWebhookAuthTelnyx)
	}
	if s.typ == "SourceConfigWebhookAuthDiscord" || s.SourceConfigWebhookAuthDiscord != nil {
		return json.Marshal(s.SourceConfigWebhookAuthDiscord)
	}
	if s.typ == "SourceConfigWebhookAuthTokenIo" || s.SourceConfigWebhookAuthTokenIo != nil {
		return json.Marshal(s.SourceConfigWebhookAuthTokenIo)
	}
	if s.typ == "SourceConfigWebhookAuthFiserv" || s.SourceConfigWebhookAuthFiserv != nil {
		return json.Marshal(s.SourceConfigWebhookAuthFiserv)
	}
	if s.typ == "SourceConfigWebhookAuthBondsmith" || s.SourceConfigWebhookAuthBondsmith != nil {
		return json.Marshal(s.SourceConfigWebhookAuthBondsmith)
	}
	if s.typ == "SourceConfigWebhookAuthVercelLogDrains" || s.SourceConfigWebhookAuthVercelLogDrains != nil {
		return json.Marshal(s.SourceConfigWebhookAuthVercelLogDrains)
	}
	if s.typ == "SourceConfigWebhookAuthVercelWebhooks" || s.SourceConfigWebhookAuthVercelWebhooks != nil {
		return json.Marshal(s.SourceConfigWebhookAuthVercelWebhooks)
	}
	if s.typ == "SourceConfigWebhookAuthTebex" || s.SourceConfigWebhookAuthTebex != nil {
		return json.Marshal(s.SourceConfigWebhookAuthTebex)
	}
	if s.typ == "SourceConfigWebhookAuthSlack" || s.SourceConfigWebhookAuthSlack != nil {
		return json.Marshal(s.SourceConfigWebhookAuthSlack)
	}
	if s.typ == "SourceConfigWebhookAuthMailchimp" || s.SourceConfigWebhookAuthMailchimp != nil {
		return json.Marshal(s.SourceConfigWebhookAuthMailchimp)
	}
	if s.typ == "SourceConfigWebhookAuthPaddle" || s.SourceConfigWebhookAuthPaddle != nil {
		return json.Marshal(s.SourceConfigWebhookAuthPaddle)
	}
	if s.typ == "SourceConfigWebhookAuthPaypal" || s.SourceConfigWebhookAuthPaypal != nil {
		return json.Marshal(s.SourceConfigWebhookAuthPaypal)
	}
	if s.typ == "SourceConfigWebhookAuthTreezor" || s.SourceConfigWebhookAuthTreezor != nil {
		return json.Marshal(s.SourceConfigWebhookAuthTreezor)
	}
	if s.typ == "SourceConfigWebhookAuthPraxis" || s.SourceConfigWebhookAuthPraxis != nil {
		return json.Marshal(s.SourceConfigWebhookAuthPraxis)
	}
	if s.typ == "SourceConfigWebhookAuthCustomerIo" || s.SourceConfigWebhookAuthCustomerIo != nil {
		return json.Marshal(s.SourceConfigWebhookAuthCustomerIo)
	}
	if s.typ == "SourceConfigWebhookAuthFacebook" || s.SourceConfigWebhookAuthFacebook != nil {
		return json.Marshal(s.SourceConfigWebhookAuthFacebook)
	}
	if s.typ == "SourceConfigWebhookAuthWhatsApp" || s.SourceConfigWebhookAuthWhatsApp != nil {
		return json.Marshal(s.SourceConfigWebhookAuthWhatsApp)
	}
	if s.typ == "SourceConfigWebhookAuthReplicate" || s.SourceConfigWebhookAuthReplicate != nil {
		return json.Marshal(s.SourceConfigWebhookAuthReplicate)
	}
	if s.typ == "SourceConfigWebhookAuthTikTok" || s.SourceConfigWebhookAuthTikTok != nil {
		return json.Marshal(s.SourceConfigWebhookAuthTikTok)
	}
	if s.typ == "SourceConfigWebhookAuthAirwallex" || s.SourceConfigWebhookAuthAirwallex != nil {
		return json.Marshal(s.SourceConfigWebhookAuthAirwallex)
	}
	if s.typ == "SourceConfigWebhookAuthZendesk" || s.SourceConfigWebhookAuthZendesk != nil {
		return json.Marshal(s.SourceConfigWebhookAuthZendesk)
	}
	if s.typ == "SourceConfigWebhookAuthUpollo" || s.SourceConfigWebhookAuthUpollo != nil {
		return json.Marshal(s.SourceConfigWebhookAuthUpollo)
	}
	if s.typ == "SourceConfigWebhookAuthLinkedIn" || s.SourceConfigWebhookAuthLinkedIn != nil {
		return json.Marshal(s.SourceConfigWebhookAuthLinkedIn)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SourceTypeConfigWebhookAuthVisitor interface {
	VisitSourceConfigWebhookAuthHmac(*SourceConfigWebhookAuthHmac) error
	VisitSourceConfigWebhookAuthBasicAuth(*SourceConfigWebhookAuthBasicAuth) error
	VisitSourceConfigWebhookAuthApiKey(*SourceConfigWebhookAuthApiKey) error
	VisitSourceConfigWebhookAuthSanity(*SourceConfigWebhookAuthSanity) error
	VisitSourceConfigWebhookAuthBridge(*SourceConfigWebhookAuthBridge) error
	VisitSourceConfigWebhookAuthCloudSignal(*SourceConfigWebhookAuthCloudSignal) error
	VisitSourceConfigWebhookAuthCourier(*SourceConfigWebhookAuthCourier) error
	VisitSourceConfigWebhookAuthFrontApp(*SourceConfigWebhookAuthFrontApp) error
	VisitSourceConfigWebhookAuthZoom(*SourceConfigWebhookAuthZoom) error
	VisitSourceConfigWebhookAuthTwitter(*SourceConfigWebhookAuthTwitter) error
	VisitSourceConfigWebhookAuthRecharge(*SourceConfigWebhookAuthRecharge) error
	VisitSourceConfigWebhookAuthStripe(*SourceConfigWebhookAuthStripe) error
	VisitSourceConfigWebhookAuthPropertyFinder(*SourceConfigWebhookAuthPropertyFinder) error
	VisitSourceConfigWebhookAuthShopify(*SourceConfigWebhookAuthShopify) error
	VisitSourceConfigWebhookAuthTwilio(*SourceConfigWebhookAuthTwilio) error
	VisitSourceConfigWebhookAuthGitHub(*SourceConfigWebhookAuthGitHub) error
	VisitSourceConfigWebhookAuthPostmark(*SourceConfigWebhookAuthPostmark) error
	VisitSourceConfigWebhookAuthTypeform(*SourceConfigWebhookAuthTypeform) error
	VisitSourceConfigWebhookAuthXero(*SourceConfigWebhookAuthXero) error
	VisitSourceConfigWebhookAuthSvix(*SourceConfigWebhookAuthSvix) error
	VisitSourceConfigWebhookAuthAdyen(*SourceConfigWebhookAuthAdyen) error
	VisitSourceConfigWebhookAuthAkeneo(*SourceConfigWebhookAuthAkeneo) error
	VisitSourceConfigWebhookAuthGitLab(*SourceConfigWebhookAuthGitLab) error
	VisitSourceConfigWebhookAuthWooCommerce(*SourceConfigWebhookAuthWooCommerce) error
	VisitSourceConfigWebhookAuthOura(*SourceConfigWebhookAuthOura) error
	VisitSourceConfigWebhookAuthCommerceLayer(*SourceConfigWebhookAuthCommerceLayer) error
	VisitSourceConfigWebhookAuthHubspot(*SourceConfigWebhookAuthHubspot) error
	VisitSourceConfigWebhookAuthMailgun(*SourceConfigWebhookAuthMailgun) error
	VisitSourceConfigWebhookAuthPersona(*SourceConfigWebhookAuthPersona) error
	VisitSourceConfigWebhookAuthPipedrive(*SourceConfigWebhookAuthPipedrive) error
	VisitSourceConfigWebhookAuthSendgrid(*SourceConfigWebhookAuthSendgrid) error
	VisitSourceConfigWebhookAuthWorkOs(*SourceConfigWebhookAuthWorkOs) error
	VisitSourceConfigWebhookAuthSynctera(*SourceConfigWebhookAuthSynctera) error
	VisitSourceConfigWebhookAuthAwssns(*SourceConfigWebhookAuthAwssns) error
	VisitSourceConfigWebhookAuth3DEye(*SourceConfigWebhookAuth3DEye) error
	VisitSourceConfigWebhookAuthTwitch(*SourceConfigWebhookAuthTwitch) error
	VisitSourceConfigWebhookAuthEnode(*SourceConfigWebhookAuthEnode) error
	VisitSourceConfigWebhookAuthFavro(*SourceConfigWebhookAuthFavro) error
	VisitSourceConfigWebhookAuthLinear(*SourceConfigWebhookAuthLinear) error
	VisitSourceConfigWebhookAuthShopline(*SourceConfigWebhookAuthShopline) error
	VisitSourceConfigWebhookAuthWix(*SourceConfigWebhookAuthWix) error
	VisitSourceConfigWebhookAuthNmiPaymentGateway(*SourceConfigWebhookAuthNmiPaymentGateway) error
	VisitSourceConfigWebhookAuthOrb(*SourceConfigWebhookAuthOrb) error
	VisitSourceConfigWebhookAuthPylon(*SourceConfigWebhookAuthPylon) error
	VisitSourceConfigWebhookAuthRazorpay(*SourceConfigWebhookAuthRazorpay) error
	VisitSourceConfigWebhookAuthRepay(*SourceConfigWebhookAuthRepay) error
	VisitSourceConfigWebhookAuthSquare(*SourceConfigWebhookAuthSquare) error
	VisitSourceConfigWebhookAuthSolidgate(*SourceConfigWebhookAuthSolidgate) error
	VisitSourceConfigWebhookAuthTrello(*SourceConfigWebhookAuthTrello) error
	VisitSourceConfigWebhookAuthEbay(*SourceConfigWebhookAuthEbay) error
	VisitSourceConfigWebhookAuthTelnyx(*SourceConfigWebhookAuthTelnyx) error
	VisitSourceConfigWebhookAuthDiscord(*SourceConfigWebhookAuthDiscord) error
	VisitSourceConfigWebhookAuthTokenIo(*SourceConfigWebhookAuthTokenIo) error
	VisitSourceConfigWebhookAuthFiserv(*SourceConfigWebhookAuthFiserv) error
	VisitSourceConfigWebhookAuthBondsmith(*SourceConfigWebhookAuthBondsmith) error
	VisitSourceConfigWebhookAuthVercelLogDrains(*SourceConfigWebhookAuthVercelLogDrains) error
	VisitSourceConfigWebhookAuthVercelWebhooks(*SourceConfigWebhookAuthVercelWebhooks) error
	VisitSourceConfigWebhookAuthTebex(*SourceConfigWebhookAuthTebex) error
	VisitSourceConfigWebhookAuthSlack(*SourceConfigWebhookAuthSlack) error
	VisitSourceConfigWebhookAuthMailchimp(*SourceConfigWebhookAuthMailchimp) error
	VisitSourceConfigWebhookAuthPaddle(*SourceConfigWebhookAuthPaddle) error
	VisitSourceConfigWebhookAuthPaypal(*SourceConfigWebhookAuthPaypal) error
	VisitSourceConfigWebhookAuthTreezor(*SourceConfigWebhookAuthTreezor) error
	VisitSourceConfigWebhookAuthPraxis(*SourceConfigWebhookAuthPraxis) error
	VisitSourceConfigWebhookAuthCustomerIo(*SourceConfigWebhookAuthCustomerIo) error
	VisitSourceConfigWebhookAuthFacebook(*SourceConfigWebhookAuthFacebook) error
	VisitSourceConfigWebhookAuthWhatsApp(*SourceConfigWebhookAuthWhatsApp) error
	VisitSourceConfigWebhookAuthReplicate(*SourceConfigWebhookAuthReplicate) error
	VisitSourceConfigWebhookAuthTikTok(*SourceConfigWebhookAuthTikTok) error
	VisitSourceConfigWebhookAuthAirwallex(*SourceConfigWebhookAuthAirwallex) error
	VisitSourceConfigWebhookAuthZendesk(*SourceConfigWebhookAuthZendesk) error
	VisitSourceConfigWebhookAuthUpollo(*SourceConfigWebhookAuthUpollo) error
	VisitSourceConfigWebhookAuthLinkedIn(*SourceConfigWebhookAuthLinkedIn) error
}

func (s *SourceTypeConfigWebhookAuth) Accept(visitor SourceTypeConfigWebhookAuthVisitor) error {
	if s.typ == "SourceConfigWebhookAuthHmac" || s.SourceConfigWebhookAuthHmac != nil {
		return visitor.VisitSourceConfigWebhookAuthHmac(s.SourceConfigWebhookAuthHmac)
	}
	if s.typ == "SourceConfigWebhookAuthBasicAuth" || s.SourceConfigWebhookAuthBasicAuth != nil {
		return visitor.VisitSourceConfigWebhookAuthBasicAuth(s.SourceConfigWebhookAuthBasicAuth)
	}
	if s.typ == "SourceConfigWebhookAuthApiKey" || s.SourceConfigWebhookAuthApiKey != nil {
		return visitor.VisitSourceConfigWebhookAuthApiKey(s.SourceConfigWebhookAuthApiKey)
	}
	if s.typ == "SourceConfigWebhookAuthSanity" || s.SourceConfigWebhookAuthSanity != nil {
		return visitor.VisitSourceConfigWebhookAuthSanity(s.SourceConfigWebhookAuthSanity)
	}
	if s.typ == "SourceConfigWebhookAuthBridge" || s.SourceConfigWebhookAuthBridge != nil {
		return visitor.VisitSourceConfigWebhookAuthBridge(s.SourceConfigWebhookAuthBridge)
	}
	if s.typ == "SourceConfigWebhookAuthCloudSignal" || s.SourceConfigWebhookAuthCloudSignal != nil {
		return visitor.VisitSourceConfigWebhookAuthCloudSignal(s.SourceConfigWebhookAuthCloudSignal)
	}
	if s.typ == "SourceConfigWebhookAuthCourier" || s.SourceConfigWebhookAuthCourier != nil {
		return visitor.VisitSourceConfigWebhookAuthCourier(s.SourceConfigWebhookAuthCourier)
	}
	if s.typ == "SourceConfigWebhookAuthFrontApp" || s.SourceConfigWebhookAuthFrontApp != nil {
		return visitor.VisitSourceConfigWebhookAuthFrontApp(s.SourceConfigWebhookAuthFrontApp)
	}
	if s.typ == "SourceConfigWebhookAuthZoom" || s.SourceConfigWebhookAuthZoom != nil {
		return visitor.VisitSourceConfigWebhookAuthZoom(s.SourceConfigWebhookAuthZoom)
	}
	if s.typ == "SourceConfigWebhookAuthTwitter" || s.SourceConfigWebhookAuthTwitter != nil {
		return visitor.VisitSourceConfigWebhookAuthTwitter(s.SourceConfigWebhookAuthTwitter)
	}
	if s.typ == "SourceConfigWebhookAuthRecharge" || s.SourceConfigWebhookAuthRecharge != nil {
		return visitor.VisitSourceConfigWebhookAuthRecharge(s.SourceConfigWebhookAuthRecharge)
	}
	if s.typ == "SourceConfigWebhookAuthStripe" || s.SourceConfigWebhookAuthStripe != nil {
		return visitor.VisitSourceConfigWebhookAuthStripe(s.SourceConfigWebhookAuthStripe)
	}
	if s.typ == "SourceConfigWebhookAuthPropertyFinder" || s.SourceConfigWebhookAuthPropertyFinder != nil {
		return visitor.VisitSourceConfigWebhookAuthPropertyFinder(s.SourceConfigWebhookAuthPropertyFinder)
	}
	if s.typ == "SourceConfigWebhookAuthShopify" || s.SourceConfigWebhookAuthShopify != nil {
		return visitor.VisitSourceConfigWebhookAuthShopify(s.SourceConfigWebhookAuthShopify)
	}
	if s.typ == "SourceConfigWebhookAuthTwilio" || s.SourceConfigWebhookAuthTwilio != nil {
		return visitor.VisitSourceConfigWebhookAuthTwilio(s.SourceConfigWebhookAuthTwilio)
	}
	if s.typ == "SourceConfigWebhookAuthGitHub" || s.SourceConfigWebhookAuthGitHub != nil {
		return visitor.VisitSourceConfigWebhookAuthGitHub(s.SourceConfigWebhookAuthGitHub)
	}
	if s.typ == "SourceConfigWebhookAuthPostmark" || s.SourceConfigWebhookAuthPostmark != nil {
		return visitor.VisitSourceConfigWebhookAuthPostmark(s.SourceConfigWebhookAuthPostmark)
	}
	if s.typ == "SourceConfigWebhookAuthTypeform" || s.SourceConfigWebhookAuthTypeform != nil {
		return visitor.VisitSourceConfigWebhookAuthTypeform(s.SourceConfigWebhookAuthTypeform)
	}
	if s.typ == "SourceConfigWebhookAuthXero" || s.SourceConfigWebhookAuthXero != nil {
		return visitor.VisitSourceConfigWebhookAuthXero(s.SourceConfigWebhookAuthXero)
	}
	if s.typ == "SourceConfigWebhookAuthSvix" || s.SourceConfigWebhookAuthSvix != nil {
		return visitor.VisitSourceConfigWebhookAuthSvix(s.SourceConfigWebhookAuthSvix)
	}
	if s.typ == "SourceConfigWebhookAuthAdyen" || s.SourceConfigWebhookAuthAdyen != nil {
		return visitor.VisitSourceConfigWebhookAuthAdyen(s.SourceConfigWebhookAuthAdyen)
	}
	if s.typ == "SourceConfigWebhookAuthAkeneo" || s.SourceConfigWebhookAuthAkeneo != nil {
		return visitor.VisitSourceConfigWebhookAuthAkeneo(s.SourceConfigWebhookAuthAkeneo)
	}
	if s.typ == "SourceConfigWebhookAuthGitLab" || s.SourceConfigWebhookAuthGitLab != nil {
		return visitor.VisitSourceConfigWebhookAuthGitLab(s.SourceConfigWebhookAuthGitLab)
	}
	if s.typ == "SourceConfigWebhookAuthWooCommerce" || s.SourceConfigWebhookAuthWooCommerce != nil {
		return visitor.VisitSourceConfigWebhookAuthWooCommerce(s.SourceConfigWebhookAuthWooCommerce)
	}
	if s.typ == "SourceConfigWebhookAuthOura" || s.SourceConfigWebhookAuthOura != nil {
		return visitor.VisitSourceConfigWebhookAuthOura(s.SourceConfigWebhookAuthOura)
	}
	if s.typ == "SourceConfigWebhookAuthCommerceLayer" || s.SourceConfigWebhookAuthCommerceLayer != nil {
		return visitor.VisitSourceConfigWebhookAuthCommerceLayer(s.SourceConfigWebhookAuthCommerceLayer)
	}
	if s.typ == "SourceConfigWebhookAuthHubspot" || s.SourceConfigWebhookAuthHubspot != nil {
		return visitor.VisitSourceConfigWebhookAuthHubspot(s.SourceConfigWebhookAuthHubspot)
	}
	if s.typ == "SourceConfigWebhookAuthMailgun" || s.SourceConfigWebhookAuthMailgun != nil {
		return visitor.VisitSourceConfigWebhookAuthMailgun(s.SourceConfigWebhookAuthMailgun)
	}
	if s.typ == "SourceConfigWebhookAuthPersona" || s.SourceConfigWebhookAuthPersona != nil {
		return visitor.VisitSourceConfigWebhookAuthPersona(s.SourceConfigWebhookAuthPersona)
	}
	if s.typ == "SourceConfigWebhookAuthPipedrive" || s.SourceConfigWebhookAuthPipedrive != nil {
		return visitor.VisitSourceConfigWebhookAuthPipedrive(s.SourceConfigWebhookAuthPipedrive)
	}
	if s.typ == "SourceConfigWebhookAuthSendgrid" || s.SourceConfigWebhookAuthSendgrid != nil {
		return visitor.VisitSourceConfigWebhookAuthSendgrid(s.SourceConfigWebhookAuthSendgrid)
	}
	if s.typ == "SourceConfigWebhookAuthWorkOs" || s.SourceConfigWebhookAuthWorkOs != nil {
		return visitor.VisitSourceConfigWebhookAuthWorkOs(s.SourceConfigWebhookAuthWorkOs)
	}
	if s.typ == "SourceConfigWebhookAuthSynctera" || s.SourceConfigWebhookAuthSynctera != nil {
		return visitor.VisitSourceConfigWebhookAuthSynctera(s.SourceConfigWebhookAuthSynctera)
	}
	if s.typ == "SourceConfigWebhookAuthAwssns" || s.SourceConfigWebhookAuthAwssns != nil {
		return visitor.VisitSourceConfigWebhookAuthAwssns(s.SourceConfigWebhookAuthAwssns)
	}
	if s.typ == "SourceConfigWebhookAuth3DEye" || s.SourceConfigWebhookAuth3DEye != nil {
		return visitor.VisitSourceConfigWebhookAuth3DEye(s.SourceConfigWebhookAuth3DEye)
	}
	if s.typ == "SourceConfigWebhookAuthTwitch" || s.SourceConfigWebhookAuthTwitch != nil {
		return visitor.VisitSourceConfigWebhookAuthTwitch(s.SourceConfigWebhookAuthTwitch)
	}
	if s.typ == "SourceConfigWebhookAuthEnode" || s.SourceConfigWebhookAuthEnode != nil {
		return visitor.VisitSourceConfigWebhookAuthEnode(s.SourceConfigWebhookAuthEnode)
	}
	if s.typ == "SourceConfigWebhookAuthFavro" || s.SourceConfigWebhookAuthFavro != nil {
		return visitor.VisitSourceConfigWebhookAuthFavro(s.SourceConfigWebhookAuthFavro)
	}
	if s.typ == "SourceConfigWebhookAuthLinear" || s.SourceConfigWebhookAuthLinear != nil {
		return visitor.VisitSourceConfigWebhookAuthLinear(s.SourceConfigWebhookAuthLinear)
	}
	if s.typ == "SourceConfigWebhookAuthShopline" || s.SourceConfigWebhookAuthShopline != nil {
		return visitor.VisitSourceConfigWebhookAuthShopline(s.SourceConfigWebhookAuthShopline)
	}
	if s.typ == "SourceConfigWebhookAuthWix" || s.SourceConfigWebhookAuthWix != nil {
		return visitor.VisitSourceConfigWebhookAuthWix(s.SourceConfigWebhookAuthWix)
	}
	if s.typ == "SourceConfigWebhookAuthNmiPaymentGateway" || s.SourceConfigWebhookAuthNmiPaymentGateway != nil {
		return visitor.VisitSourceConfigWebhookAuthNmiPaymentGateway(s.SourceConfigWebhookAuthNmiPaymentGateway)
	}
	if s.typ == "SourceConfigWebhookAuthOrb" || s.SourceConfigWebhookAuthOrb != nil {
		return visitor.VisitSourceConfigWebhookAuthOrb(s.SourceConfigWebhookAuthOrb)
	}
	if s.typ == "SourceConfigWebhookAuthPylon" || s.SourceConfigWebhookAuthPylon != nil {
		return visitor.VisitSourceConfigWebhookAuthPylon(s.SourceConfigWebhookAuthPylon)
	}
	if s.typ == "SourceConfigWebhookAuthRazorpay" || s.SourceConfigWebhookAuthRazorpay != nil {
		return visitor.VisitSourceConfigWebhookAuthRazorpay(s.SourceConfigWebhookAuthRazorpay)
	}
	if s.typ == "SourceConfigWebhookAuthRepay" || s.SourceConfigWebhookAuthRepay != nil {
		return visitor.VisitSourceConfigWebhookAuthRepay(s.SourceConfigWebhookAuthRepay)
	}
	if s.typ == "SourceConfigWebhookAuthSquare" || s.SourceConfigWebhookAuthSquare != nil {
		return visitor.VisitSourceConfigWebhookAuthSquare(s.SourceConfigWebhookAuthSquare)
	}
	if s.typ == "SourceConfigWebhookAuthSolidgate" || s.SourceConfigWebhookAuthSolidgate != nil {
		return visitor.VisitSourceConfigWebhookAuthSolidgate(s.SourceConfigWebhookAuthSolidgate)
	}
	if s.typ == "SourceConfigWebhookAuthTrello" || s.SourceConfigWebhookAuthTrello != nil {
		return visitor.VisitSourceConfigWebhookAuthTrello(s.SourceConfigWebhookAuthTrello)
	}
	if s.typ == "SourceConfigWebhookAuthEbay" || s.SourceConfigWebhookAuthEbay != nil {
		return visitor.VisitSourceConfigWebhookAuthEbay(s.SourceConfigWebhookAuthEbay)
	}
	if s.typ == "SourceConfigWebhookAuthTelnyx" || s.SourceConfigWebhookAuthTelnyx != nil {
		return visitor.VisitSourceConfigWebhookAuthTelnyx(s.SourceConfigWebhookAuthTelnyx)
	}
	if s.typ == "SourceConfigWebhookAuthDiscord" || s.SourceConfigWebhookAuthDiscord != nil {
		return visitor.VisitSourceConfigWebhookAuthDiscord(s.SourceConfigWebhookAuthDiscord)
	}
	if s.typ == "SourceConfigWebhookAuthTokenIo" || s.SourceConfigWebhookAuthTokenIo != nil {
		return visitor.VisitSourceConfigWebhookAuthTokenIo(s.SourceConfigWebhookAuthTokenIo)
	}
	if s.typ == "SourceConfigWebhookAuthFiserv" || s.SourceConfigWebhookAuthFiserv != nil {
		return visitor.VisitSourceConfigWebhookAuthFiserv(s.SourceConfigWebhookAuthFiserv)
	}
	if s.typ == "SourceConfigWebhookAuthBondsmith" || s.SourceConfigWebhookAuthBondsmith != nil {
		return visitor.VisitSourceConfigWebhookAuthBondsmith(s.SourceConfigWebhookAuthBondsmith)
	}
	if s.typ == "SourceConfigWebhookAuthVercelLogDrains" || s.SourceConfigWebhookAuthVercelLogDrains != nil {
		return visitor.VisitSourceConfigWebhookAuthVercelLogDrains(s.SourceConfigWebhookAuthVercelLogDrains)
	}
	if s.typ == "SourceConfigWebhookAuthVercelWebhooks" || s.SourceConfigWebhookAuthVercelWebhooks != nil {
		return visitor.VisitSourceConfigWebhookAuthVercelWebhooks(s.SourceConfigWebhookAuthVercelWebhooks)
	}
	if s.typ == "SourceConfigWebhookAuthTebex" || s.SourceConfigWebhookAuthTebex != nil {
		return visitor.VisitSourceConfigWebhookAuthTebex(s.SourceConfigWebhookAuthTebex)
	}
	if s.typ == "SourceConfigWebhookAuthSlack" || s.SourceConfigWebhookAuthSlack != nil {
		return visitor.VisitSourceConfigWebhookAuthSlack(s.SourceConfigWebhookAuthSlack)
	}
	if s.typ == "SourceConfigWebhookAuthMailchimp" || s.SourceConfigWebhookAuthMailchimp != nil {
		return visitor.VisitSourceConfigWebhookAuthMailchimp(s.SourceConfigWebhookAuthMailchimp)
	}
	if s.typ == "SourceConfigWebhookAuthPaddle" || s.SourceConfigWebhookAuthPaddle != nil {
		return visitor.VisitSourceConfigWebhookAuthPaddle(s.SourceConfigWebhookAuthPaddle)
	}
	if s.typ == "SourceConfigWebhookAuthPaypal" || s.SourceConfigWebhookAuthPaypal != nil {
		return visitor.VisitSourceConfigWebhookAuthPaypal(s.SourceConfigWebhookAuthPaypal)
	}
	if s.typ == "SourceConfigWebhookAuthTreezor" || s.SourceConfigWebhookAuthTreezor != nil {
		return visitor.VisitSourceConfigWebhookAuthTreezor(s.SourceConfigWebhookAuthTreezor)
	}
	if s.typ == "SourceConfigWebhookAuthPraxis" || s.SourceConfigWebhookAuthPraxis != nil {
		return visitor.VisitSourceConfigWebhookAuthPraxis(s.SourceConfigWebhookAuthPraxis)
	}
	if s.typ == "SourceConfigWebhookAuthCustomerIo" || s.SourceConfigWebhookAuthCustomerIo != nil {
		return visitor.VisitSourceConfigWebhookAuthCustomerIo(s.SourceConfigWebhookAuthCustomerIo)
	}
	if s.typ == "SourceConfigWebhookAuthFacebook" || s.SourceConfigWebhookAuthFacebook != nil {
		return visitor.VisitSourceConfigWebhookAuthFacebook(s.SourceConfigWebhookAuthFacebook)
	}
	if s.typ == "SourceConfigWebhookAuthWhatsApp" || s.SourceConfigWebhookAuthWhatsApp != nil {
		return visitor.VisitSourceConfigWebhookAuthWhatsApp(s.SourceConfigWebhookAuthWhatsApp)
	}
	if s.typ == "SourceConfigWebhookAuthReplicate" || s.SourceConfigWebhookAuthReplicate != nil {
		return visitor.VisitSourceConfigWebhookAuthReplicate(s.SourceConfigWebhookAuthReplicate)
	}
	if s.typ == "SourceConfigWebhookAuthTikTok" || s.SourceConfigWebhookAuthTikTok != nil {
		return visitor.VisitSourceConfigWebhookAuthTikTok(s.SourceConfigWebhookAuthTikTok)
	}
	if s.typ == "SourceConfigWebhookAuthAirwallex" || s.SourceConfigWebhookAuthAirwallex != nil {
		return visitor.VisitSourceConfigWebhookAuthAirwallex(s.SourceConfigWebhookAuthAirwallex)
	}
	if s.typ == "SourceConfigWebhookAuthZendesk" || s.SourceConfigWebhookAuthZendesk != nil {
		return visitor.VisitSourceConfigWebhookAuthZendesk(s.SourceConfigWebhookAuthZendesk)
	}
	if s.typ == "SourceConfigWebhookAuthUpollo" || s.SourceConfigWebhookAuthUpollo != nil {
		return visitor.VisitSourceConfigWebhookAuthUpollo(s.SourceConfigWebhookAuthUpollo)
	}
	if s.typ == "SourceConfigWebhookAuthLinkedIn" || s.SourceConfigWebhookAuthLinkedIn != nil {
		return visitor.VisitSourceConfigWebhookAuthLinkedIn(s.SourceConfigWebhookAuthLinkedIn)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SourceTypeConfigWebhookAuthType string

const (
	SourceTypeConfigWebhookAuthTypeHmac            SourceTypeConfigWebhookAuthType = "HMAC"
	SourceTypeConfigWebhookAuthTypeBasicAuth       SourceTypeConfigWebhookAuthType = "BASIC_AUTH"
	SourceTypeConfigWebhookAuthTypeApiKey          SourceTypeConfigWebhookAuthType = "API_KEY"
	SourceTypeConfigWebhookAuthTypeWebhook         SourceTypeConfigWebhookAuthType = "WEBHOOK"
	SourceTypeConfigWebhookAuthTypeHttp            SourceTypeConfigWebhookAuthType = "HTTP"
	SourceTypeConfigWebhookAuthTypeManaged         SourceTypeConfigWebhookAuthType = "MANAGED"
	SourceTypeConfigWebhookAuthTypeSanity          SourceTypeConfigWebhookAuthType = "SANITY"
	SourceTypeConfigWebhookAuthTypeBridge          SourceTypeConfigWebhookAuthType = "BRIDGE"
	SourceTypeConfigWebhookAuthTypeCloudsignal     SourceTypeConfigWebhookAuthType = "CLOUDSIGNAL"
	SourceTypeConfigWebhookAuthTypeCourier         SourceTypeConfigWebhookAuthType = "COURIER"
	SourceTypeConfigWebhookAuthTypeFrontapp        SourceTypeConfigWebhookAuthType = "FRONTAPP"
	SourceTypeConfigWebhookAuthTypeZoom            SourceTypeConfigWebhookAuthType = "ZOOM"
	SourceTypeConfigWebhookAuthTypeTwitter         SourceTypeConfigWebhookAuthType = "TWITTER"
	SourceTypeConfigWebhookAuthTypeRecharge        SourceTypeConfigWebhookAuthType = "RECHARGE"
	SourceTypeConfigWebhookAuthTypeStripe          SourceTypeConfigWebhookAuthType = "STRIPE"
	SourceTypeConfigWebhookAuthTypePropertyFinder  SourceTypeConfigWebhookAuthType = "PROPERTY-FINDER"
	SourceTypeConfigWebhookAuthTypeShopify         SourceTypeConfigWebhookAuthType = "SHOPIFY"
	SourceTypeConfigWebhookAuthTypeTwilio          SourceTypeConfigWebhookAuthType = "TWILIO"
	SourceTypeConfigWebhookAuthTypeGithub          SourceTypeConfigWebhookAuthType = "GITHUB"
	SourceTypeConfigWebhookAuthTypePostmark        SourceTypeConfigWebhookAuthType = "POSTMARK"
	SourceTypeConfigWebhookAuthTypeTypeform        SourceTypeConfigWebhookAuthType = "TYPEFORM"
	SourceTypeConfigWebhookAuthTypeXero            SourceTypeConfigWebhookAuthType = "XERO"
	SourceTypeConfigWebhookAuthTypeSvix            SourceTypeConfigWebhookAuthType = "SVIX"
	SourceTypeConfigWebhookAuthTypeAdyen           SourceTypeConfigWebhookAuthType = "ADYEN"
	SourceTypeConfigWebhookAuthTypeAkeneo          SourceTypeConfigWebhookAuthType = "AKENEO"
	SourceTypeConfigWebhookAuthTypeGitlab          SourceTypeConfigWebhookAuthType = "GITLAB"
	SourceTypeConfigWebhookAuthTypeWoocommerce     SourceTypeConfigWebhookAuthType = "WOOCOMMERCE"
	SourceTypeConfigWebhookAuthTypeOura            SourceTypeConfigWebhookAuthType = "OURA"
	SourceTypeConfigWebhookAuthTypeCommercelayer   SourceTypeConfigWebhookAuthType = "COMMERCELAYER"
	SourceTypeConfigWebhookAuthTypeHubspot         SourceTypeConfigWebhookAuthType = "HUBSPOT"
	SourceTypeConfigWebhookAuthTypeMailgun         SourceTypeConfigWebhookAuthType = "MAILGUN"
	SourceTypeConfigWebhookAuthTypePersona         SourceTypeConfigWebhookAuthType = "PERSONA"
	SourceTypeConfigWebhookAuthTypePipedrive       SourceTypeConfigWebhookAuthType = "PIPEDRIVE"
	SourceTypeConfigWebhookAuthTypeSendgrid        SourceTypeConfigWebhookAuthType = "SENDGRID"
	SourceTypeConfigWebhookAuthTypeWorkos          SourceTypeConfigWebhookAuthType = "WORKOS"
	SourceTypeConfigWebhookAuthTypeSynctera        SourceTypeConfigWebhookAuthType = "SYNCTERA"
	SourceTypeConfigWebhookAuthTypeAwsSns          SourceTypeConfigWebhookAuthType = "AWS_SNS"
	SourceTypeConfigWebhookAuthTypeThreeDEye       SourceTypeConfigWebhookAuthType = "THREE_D_EYE"
	SourceTypeConfigWebhookAuthTypeTwitch          SourceTypeConfigWebhookAuthType = "TWITCH"
	SourceTypeConfigWebhookAuthTypeEnode           SourceTypeConfigWebhookAuthType = "ENODE"
	SourceTypeConfigWebhookAuthTypeFavro           SourceTypeConfigWebhookAuthType = "FAVRO"
	SourceTypeConfigWebhookAuthTypeLinear          SourceTypeConfigWebhookAuthType = "LINEAR"
	SourceTypeConfigWebhookAuthTypeShopline        SourceTypeConfigWebhookAuthType = "SHOPLINE"
	SourceTypeConfigWebhookAuthTypeWix             SourceTypeConfigWebhookAuthType = "WIX"
	SourceTypeConfigWebhookAuthTypeNmi             SourceTypeConfigWebhookAuthType = "NMI"
	SourceTypeConfigWebhookAuthTypeOrb             SourceTypeConfigWebhookAuthType = "ORB"
	SourceTypeConfigWebhookAuthTypePylon           SourceTypeConfigWebhookAuthType = "PYLON"
	SourceTypeConfigWebhookAuthTypeRazorpay        SourceTypeConfigWebhookAuthType = "RAZORPAY"
	SourceTypeConfigWebhookAuthTypeRepay           SourceTypeConfigWebhookAuthType = "REPAY"
	SourceTypeConfigWebhookAuthTypeSquare          SourceTypeConfigWebhookAuthType = "SQUARE"
	SourceTypeConfigWebhookAuthTypeSolidgate       SourceTypeConfigWebhookAuthType = "SOLIDGATE"
	SourceTypeConfigWebhookAuthTypeTrello          SourceTypeConfigWebhookAuthType = "TRELLO"
	SourceTypeConfigWebhookAuthTypeEbay            SourceTypeConfigWebhookAuthType = "EBAY"
	SourceTypeConfigWebhookAuthTypeTelnyx          SourceTypeConfigWebhookAuthType = "TELNYX"
	SourceTypeConfigWebhookAuthTypeDiscord         SourceTypeConfigWebhookAuthType = "DISCORD"
	SourceTypeConfigWebhookAuthTypeTokenio         SourceTypeConfigWebhookAuthType = "TOKENIO"
	SourceTypeConfigWebhookAuthTypeFiserv          SourceTypeConfigWebhookAuthType = "FISERV"
	SourceTypeConfigWebhookAuthTypeBondsmith       SourceTypeConfigWebhookAuthType = "BONDSMITH"
	SourceTypeConfigWebhookAuthTypeVercelLogDrains SourceTypeConfigWebhookAuthType = "VERCEL_LOG_DRAINS"
	SourceTypeConfigWebhookAuthTypeVercel          SourceTypeConfigWebhookAuthType = "VERCEL"
	SourceTypeConfigWebhookAuthTypeTebex           SourceTypeConfigWebhookAuthType = "TEBEX"
	SourceTypeConfigWebhookAuthTypeSlack           SourceTypeConfigWebhookAuthType = "SLACK"
	SourceTypeConfigWebhookAuthTypeMailchimp       SourceTypeConfigWebhookAuthType = "MAILCHIMP"
	SourceTypeConfigWebhookAuthTypePaddle          SourceTypeConfigWebhookAuthType = "PADDLE"
	SourceTypeConfigWebhookAuthTypePaypal          SourceTypeConfigWebhookAuthType = "PAYPAL"
	SourceTypeConfigWebhookAuthTypeTreezor         SourceTypeConfigWebhookAuthType = "TREEZOR"
	SourceTypeConfigWebhookAuthTypePraxis          SourceTypeConfigWebhookAuthType = "PRAXIS"
	SourceTypeConfigWebhookAuthTypeCustomerio      SourceTypeConfigWebhookAuthType = "CUSTOMERIO"
	SourceTypeConfigWebhookAuthTypeFacebook        SourceTypeConfigWebhookAuthType = "FACEBOOK"
	SourceTypeConfigWebhookAuthTypeWhatsapp        SourceTypeConfigWebhookAuthType = "WHATSAPP"
	SourceTypeConfigWebhookAuthTypeReplicate       SourceTypeConfigWebhookAuthType = "REPLICATE"
	SourceTypeConfigWebhookAuthTypeTiktok          SourceTypeConfigWebhookAuthType = "TIKTOK"
	SourceTypeConfigWebhookAuthTypeAirwallex       SourceTypeConfigWebhookAuthType = "AIRWALLEX"
	SourceTypeConfigWebhookAuthTypeZendesk         SourceTypeConfigWebhookAuthType = "ZENDESK"
	SourceTypeConfigWebhookAuthTypeUpollo          SourceTypeConfigWebhookAuthType = "UPOLLO"
	SourceTypeConfigWebhookAuthTypeLinkedin        SourceTypeConfigWebhookAuthType = "LINKEDIN"
)

func NewSourceTypeConfigWebhookAuthTypeFromString(s string) (SourceTypeConfigWebhookAuthType, error) {
	switch s {
	case "HMAC":
		return SourceTypeConfigWebhookAuthTypeHmac, nil
	case "BASIC_AUTH":
		return SourceTypeConfigWebhookAuthTypeBasicAuth, nil
	case "API_KEY":
		return SourceTypeConfigWebhookAuthTypeApiKey, nil
	case "WEBHOOK":
		return SourceTypeConfigWebhookAuthTypeWebhook, nil
	case "HTTP":
		return SourceTypeConfigWebhookAuthTypeHttp, nil
	case "MANAGED":
		return SourceTypeConfigWebhookAuthTypeManaged, nil
	case "SANITY":
		return SourceTypeConfigWebhookAuthTypeSanity, nil
	case "BRIDGE":
		return SourceTypeConfigWebhookAuthTypeBridge, nil
	case "CLOUDSIGNAL":
		return SourceTypeConfigWebhookAuthTypeCloudsignal, nil
	case "COURIER":
		return SourceTypeConfigWebhookAuthTypeCourier, nil
	case "FRONTAPP":
		return SourceTypeConfigWebhookAuthTypeFrontapp, nil
	case "ZOOM":
		return SourceTypeConfigWebhookAuthTypeZoom, nil
	case "TWITTER":
		return SourceTypeConfigWebhookAuthTypeTwitter, nil
	case "RECHARGE":
		return SourceTypeConfigWebhookAuthTypeRecharge, nil
	case "STRIPE":
		return SourceTypeConfigWebhookAuthTypeStripe, nil
	case "PROPERTY-FINDER":
		return SourceTypeConfigWebhookAuthTypePropertyFinder, nil
	case "SHOPIFY":
		return SourceTypeConfigWebhookAuthTypeShopify, nil
	case "TWILIO":
		return SourceTypeConfigWebhookAuthTypeTwilio, nil
	case "GITHUB":
		return SourceTypeConfigWebhookAuthTypeGithub, nil
	case "POSTMARK":
		return SourceTypeConfigWebhookAuthTypePostmark, nil
	case "TYPEFORM":
		return SourceTypeConfigWebhookAuthTypeTypeform, nil
	case "XERO":
		return SourceTypeConfigWebhookAuthTypeXero, nil
	case "SVIX":
		return SourceTypeConfigWebhookAuthTypeSvix, nil
	case "ADYEN":
		return SourceTypeConfigWebhookAuthTypeAdyen, nil
	case "AKENEO":
		return SourceTypeConfigWebhookAuthTypeAkeneo, nil
	case "GITLAB":
		return SourceTypeConfigWebhookAuthTypeGitlab, nil
	case "WOOCOMMERCE":
		return SourceTypeConfigWebhookAuthTypeWoocommerce, nil
	case "OURA":
		return SourceTypeConfigWebhookAuthTypeOura, nil
	case "COMMERCELAYER":
		return SourceTypeConfigWebhookAuthTypeCommercelayer, nil
	case "HUBSPOT":
		return SourceTypeConfigWebhookAuthTypeHubspot, nil
	case "MAILGUN":
		return SourceTypeConfigWebhookAuthTypeMailgun, nil
	case "PERSONA":
		return SourceTypeConfigWebhookAuthTypePersona, nil
	case "PIPEDRIVE":
		return SourceTypeConfigWebhookAuthTypePipedrive, nil
	case "SENDGRID":
		return SourceTypeConfigWebhookAuthTypeSendgrid, nil
	case "WORKOS":
		return SourceTypeConfigWebhookAuthTypeWorkos, nil
	case "SYNCTERA":
		return SourceTypeConfigWebhookAuthTypeSynctera, nil
	case "AWS_SNS":
		return SourceTypeConfigWebhookAuthTypeAwsSns, nil
	case "THREE_D_EYE":
		return SourceTypeConfigWebhookAuthTypeThreeDEye, nil
	case "TWITCH":
		return SourceTypeConfigWebhookAuthTypeTwitch, nil
	case "ENODE":
		return SourceTypeConfigWebhookAuthTypeEnode, nil
	case "FAVRO":
		return SourceTypeConfigWebhookAuthTypeFavro, nil
	case "LINEAR":
		return SourceTypeConfigWebhookAuthTypeLinear, nil
	case "SHOPLINE":
		return SourceTypeConfigWebhookAuthTypeShopline, nil
	case "WIX":
		return SourceTypeConfigWebhookAuthTypeWix, nil
	case "NMI":
		return SourceTypeConfigWebhookAuthTypeNmi, nil
	case "ORB":
		return SourceTypeConfigWebhookAuthTypeOrb, nil
	case "PYLON":
		return SourceTypeConfigWebhookAuthTypePylon, nil
	case "RAZORPAY":
		return SourceTypeConfigWebhookAuthTypeRazorpay, nil
	case "REPAY":
		return SourceTypeConfigWebhookAuthTypeRepay, nil
	case "SQUARE":
		return SourceTypeConfigWebhookAuthTypeSquare, nil
	case "SOLIDGATE":
		return SourceTypeConfigWebhookAuthTypeSolidgate, nil
	case "TRELLO":
		return SourceTypeConfigWebhookAuthTypeTrello, nil
	case "EBAY":
		return SourceTypeConfigWebhookAuthTypeEbay, nil
	case "TELNYX":
		return SourceTypeConfigWebhookAuthTypeTelnyx, nil
	case "DISCORD":
		return SourceTypeConfigWebhookAuthTypeDiscord, nil
	case "TOKENIO":
		return SourceTypeConfigWebhookAuthTypeTokenio, nil
	case "FISERV":
		return SourceTypeConfigWebhookAuthTypeFiserv, nil
	case "BONDSMITH":
		return SourceTypeConfigWebhookAuthTypeBondsmith, nil
	case "VERCEL_LOG_DRAINS":
		return SourceTypeConfigWebhookAuthTypeVercelLogDrains, nil
	case "VERCEL":
		return SourceTypeConfigWebhookAuthTypeVercel, nil
	case "TEBEX":
		return SourceTypeConfigWebhookAuthTypeTebex, nil
	case "SLACK":
		return SourceTypeConfigWebhookAuthTypeSlack, nil
	case "MAILCHIMP":
		return SourceTypeConfigWebhookAuthTypeMailchimp, nil
	case "PADDLE":
		return SourceTypeConfigWebhookAuthTypePaddle, nil
	case "PAYPAL":
		return SourceTypeConfigWebhookAuthTypePaypal, nil
	case "TREEZOR":
		return SourceTypeConfigWebhookAuthTypeTreezor, nil
	case "PRAXIS":
		return SourceTypeConfigWebhookAuthTypePraxis, nil
	case "CUSTOMERIO":
		return SourceTypeConfigWebhookAuthTypeCustomerio, nil
	case "FACEBOOK":
		return SourceTypeConfigWebhookAuthTypeFacebook, nil
	case "WHATSAPP":
		return SourceTypeConfigWebhookAuthTypeWhatsapp, nil
	case "REPLICATE":
		return SourceTypeConfigWebhookAuthTypeReplicate, nil
	case "TIKTOK":
		return SourceTypeConfigWebhookAuthTypeTiktok, nil
	case "AIRWALLEX":
		return SourceTypeConfigWebhookAuthTypeAirwallex, nil
	case "ZENDESK":
		return SourceTypeConfigWebhookAuthTypeZendesk, nil
	case "UPOLLO":
		return SourceTypeConfigWebhookAuthTypeUpollo, nil
	case "LINKEDIN":
		return SourceTypeConfigWebhookAuthTypeLinkedin, nil
	}
	var t SourceTypeConfigWebhookAuthType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigWebhookAuthType) Ptr() *SourceTypeConfigWebhookAuthType {
	return &s
}

type SourceTypeConfigWebhookCustomResponse struct {
	ContentType SourceTypeConfigWebhookCustomResponseContentType `json:"content_type" url:"content_type"`
	Body        string                                           `json:"body" url:"body"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWebhookCustomResponse) GetContentType() SourceTypeConfigWebhookCustomResponseContentType {
	if s == nil {
		return ""
	}
	return s.ContentType
}

func (s *SourceTypeConfigWebhookCustomResponse) GetBody() string {
	if s == nil {
		return ""
	}
	return s.Body
}

func (s *SourceTypeConfigWebhookCustomResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWebhookCustomResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWebhookCustomResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWebhookCustomResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWebhookCustomResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigWebhookCustomResponseContentType string

const (
	SourceTypeConfigWebhookCustomResponseContentTypeJson SourceTypeConfigWebhookCustomResponseContentType = "json"
	SourceTypeConfigWebhookCustomResponseContentTypeText SourceTypeConfigWebhookCustomResponseContentType = "text"
	SourceTypeConfigWebhookCustomResponseContentTypeXml  SourceTypeConfigWebhookCustomResponseContentType = "xml"
)

func NewSourceTypeConfigWebhookCustomResponseContentTypeFromString(s string) (SourceTypeConfigWebhookCustomResponseContentType, error) {
	switch s {
	case "json":
		return SourceTypeConfigWebhookCustomResponseContentTypeJson, nil
	case "text":
		return SourceTypeConfigWebhookCustomResponseContentTypeText, nil
	case "xml":
		return SourceTypeConfigWebhookCustomResponseContentTypeXml, nil
	}
	var t SourceTypeConfigWebhookCustomResponseContentType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigWebhookCustomResponseContentType) Ptr() *SourceTypeConfigWebhookCustomResponseContentType {
	return &s
}

// The type config for WhatsApp. Requires type to be `WHATSAPP`.
type SourceTypeConfigWhatsApp struct {
	Auth *SourceConfigWhatsAppAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWhatsApp) GetAuth() *SourceConfigWhatsAppAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigWhatsApp) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWhatsApp) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWhatsApp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWhatsApp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWhatsApp) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Wix. Requires type to be `WIX`.
type SourceTypeConfigWix struct {
	Auth *SourceConfigWixAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWix) GetAuth() *SourceConfigWixAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigWix) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWix) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWix
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWix(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWix) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for WooCommerce. Requires type to be `WOOCOMMERCE`.
type SourceTypeConfigWooCommerce struct {
	Auth *SourceConfigWooCommerceAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWooCommerce) GetAuth() *SourceConfigWooCommerceAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigWooCommerce) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWooCommerce) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWooCommerce
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWooCommerce(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWooCommerce) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for WorkOS. Requires type to be `WORKOS`.
type SourceTypeConfigWorkOs struct {
	Auth *SourceConfigWorkOsAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWorkOs) GetAuth() *SourceConfigWorkOsAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigWorkOs) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWorkOs) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWorkOs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWorkOs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWorkOs) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Xero. Requires type to be `XERO`.
type SourceTypeConfigXero struct {
	Auth *SourceConfigXeroAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigXero) GetAuth() *SourceConfigXeroAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigXero) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigXero) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigXero
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigXero(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigXero) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Zendesk. Requires type to be `ZENDESK`.
type SourceTypeConfigZendesk struct {
	Auth *SourceConfigZendeskAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigZendesk) GetAuth() *SourceConfigZendeskAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigZendesk) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigZendesk) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigZendesk
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigZendesk(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigZendesk) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Zoom. Requires type to be `ZOOM`.
type SourceTypeConfigZoom struct {
	Auth *SourceConfigZoomAuth `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigZoom) GetAuth() *SourceConfigZoomAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigZoom) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigZoom) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigZoom
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigZoom(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigZoom) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type TransformationExecution struct {
	Id                     string `json:"id" url:"id"`
	TransformedEventDataId string `json:"transformed_event_data_id" url:"transformed_event_data_id"`
	OriginalEventDataId    string `json:"original_event_data_id" url:"original_event_data_id"`
	TransformationId       string `json:"transformation_id" url:"transformation_id"`
	// ID of the project
	TeamId               string                          `json:"team_id" url:"team_id"`
	WebhookId            string                          `json:"webhook_id" url:"webhook_id"`
	LogLevel             TransformationExecutionLogLevel `json:"log_level" url:"log_level"`
	Logs                 []*ConsoleLine                  `json:"logs,omitempty" url:"logs,omitempty"`
	UpdatedAt            time.Time                       `json:"updated_at" url:"updated_at"`
	CreatedAt            time.Time                       `json:"created_at" url:"created_at"`
	OriginalEventData    *ShortEventData                 `json:"original_event_data,omitempty" url:"original_event_data,omitempty"`
	TransformedEventData *ShortEventData                 `json:"transformed_event_data,omitempty" url:"transformed_event_data,omitempty"`
	IssueId              *string                         `json:"issue_id,omitempty" url:"issue_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransformationExecution) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *TransformationExecution) GetTransformedEventDataId() string {
	if t == nil {
		return ""
	}
	return t.TransformedEventDataId
}

func (t *TransformationExecution) GetOriginalEventDataId() string {
	if t == nil {
		return ""
	}
	return t.OriginalEventDataId
}

func (t *TransformationExecution) GetTransformationId() string {
	if t == nil {
		return ""
	}
	return t.TransformationId
}

func (t *TransformationExecution) GetTeamId() string {
	if t == nil {
		return ""
	}
	return t.TeamId
}

func (t *TransformationExecution) GetWebhookId() string {
	if t == nil {
		return ""
	}
	return t.WebhookId
}

func (t *TransformationExecution) GetLogLevel() TransformationExecutionLogLevel {
	if t == nil {
		return ""
	}
	return t.LogLevel
}

func (t *TransformationExecution) GetLogs() []*ConsoleLine {
	if t == nil {
		return nil
	}
	return t.Logs
}

func (t *TransformationExecution) GetUpdatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.UpdatedAt
}

func (t *TransformationExecution) GetCreatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.CreatedAt
}

func (t *TransformationExecution) GetOriginalEventData() *ShortEventData {
	if t == nil {
		return nil
	}
	return t.OriginalEventData
}

func (t *TransformationExecution) GetTransformedEventData() *ShortEventData {
	if t == nil {
		return nil
	}
	return t.TransformedEventData
}

func (t *TransformationExecution) GetIssueId() *string {
	if t == nil {
		return nil
	}
	return t.IssueId
}

func (t *TransformationExecution) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransformationExecution) UnmarshalJSON(data []byte) error {
	type embed TransformationExecution
	var unmarshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TransformationExecution(unmarshaler.embed)
	t.UpdatedAt = unmarshaler.UpdatedAt.Time()
	t.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransformationExecution) MarshalJSON() ([]byte, error) {
	type embed TransformationExecution
	var marshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed:     embed(*t),
		UpdatedAt: internal.NewDateTime(t.UpdatedAt),
		CreatedAt: internal.NewDateTime(t.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TransformationExecution) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The minimum log level to open the issue on
type TransformationExecutionLogLevel string

const (
	TransformationExecutionLogLevelDebug TransformationExecutionLogLevel = "debug"
	TransformationExecutionLogLevelInfo  TransformationExecutionLogLevel = "info"
	TransformationExecutionLogLevelWarn  TransformationExecutionLogLevel = "warn"
	TransformationExecutionLogLevelError TransformationExecutionLogLevel = "error"
	TransformationExecutionLogLevelFatal TransformationExecutionLogLevel = "fatal"
)

func NewTransformationExecutionLogLevelFromString(s string) (TransformationExecutionLogLevel, error) {
	switch s {
	case "debug":
		return TransformationExecutionLogLevelDebug, nil
	case "info":
		return TransformationExecutionLogLevelInfo, nil
	case "warn":
		return TransformationExecutionLogLevelWarn, nil
	case "error":
		return TransformationExecutionLogLevelError, nil
	case "fatal":
		return TransformationExecutionLogLevelFatal, nil
	}
	var t TransformationExecutionLogLevel
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TransformationExecutionLogLevel) Ptr() *TransformationExecutionLogLevel {
	return &t
}

type VercelLogDrainsIntegrationConfigs struct {
	WebhookSecretKey      *string `json:"webhook_secret_key,omitempty" url:"webhook_secret_key,omitempty"`
	VercelLogDrainsSecret string  `json:"vercel_log_drains_secret" url:"vercel_log_drains_secret"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VercelLogDrainsIntegrationConfigs) GetWebhookSecretKey() *string {
	if v == nil {
		return nil
	}
	return v.WebhookSecretKey
}

func (v *VercelLogDrainsIntegrationConfigs) GetVercelLogDrainsSecret() string {
	if v == nil {
		return ""
	}
	return v.VercelLogDrainsSecret
}

func (v *VercelLogDrainsIntegrationConfigs) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VercelLogDrainsIntegrationConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler VercelLogDrainsIntegrationConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VercelLogDrainsIntegrationConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VercelLogDrainsIntegrationConfigs) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationPropertyFinder struct {
	Type *string `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationPropertyFinder) GetType() *string {
	if v == nil {
		return nil
	}
	return v.Type
}

func (v *VerificationPropertyFinder) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationPropertyFinder) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationPropertyFinder
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationPropertyFinder(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationPropertyFinder) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
