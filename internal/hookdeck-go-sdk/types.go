// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/hookdeck/hookdeck-go-sdk/internal"
	time "time"
)

// Error response model
type ApiErrorResponse struct {
	// Error code
	Code string `json:"code" url:"code"`
	// Status code
	Status float64 `json:"status" url:"status"`
	// Error description
	Message string                `json:"message" url:"message"`
	Data    *ApiErrorResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApiErrorResponse) GetCode() string {
	if a == nil {
		return ""
	}
	return a.Code
}

func (a *ApiErrorResponse) GetStatus() float64 {
	if a == nil {
		return 0
	}
	return a.Status
}

func (a *ApiErrorResponse) GetMessage() string {
	if a == nil {
		return ""
	}
	return a.Message
}

func (a *ApiErrorResponse) GetData() *ApiErrorResponseData {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *ApiErrorResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiErrorResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiErrorResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiErrorResponseData struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApiErrorResponseData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiErrorResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiErrorResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiErrorResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiErrorResponseData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiKeyIntegrationConfigs struct {
	HeaderKey string `json:"header_key" url:"header_key"`
	ApiKey    string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApiKeyIntegrationConfigs) GetHeaderKey() string {
	if a == nil {
		return ""
	}
	return a.HeaderKey
}

func (a *ApiKeyIntegrationConfigs) GetApiKey() string {
	if a == nil {
		return ""
	}
	return a.ApiKey
}

func (a *ApiKeyIntegrationConfigs) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiKeyIntegrationConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiKeyIntegrationConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiKeyIntegrationConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiKeyIntegrationConfigs) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AttachedIntegrationToSource struct {
	Success bool `json:"success" url:"success"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AttachedIntegrationToSource) GetSuccess() bool {
	if a == nil {
		return false
	}
	return a.Success
}

func (a *AttachedIntegrationToSource) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttachedIntegrationToSource) UnmarshalJSON(data []byte) error {
	type unmarshaler AttachedIntegrationToSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttachedIntegrationToSource(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttachedIntegrationToSource) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Error code of the delivery attempt
type AttemptErrorCodes string

const (
	AttemptErrorCodesCancelled                AttemptErrorCodes = "CANCELLED"
	AttemptErrorCodesTimeout                  AttemptErrorCodes = "TIMEOUT"
	AttemptErrorCodesNotFound                 AttemptErrorCodes = "NOT_FOUND"
	AttemptErrorCodesConnectionRefused        AttemptErrorCodes = "CONNECTION_REFUSED"
	AttemptErrorCodesConnectionReset          AttemptErrorCodes = "CONNECTION_RESET"
	AttemptErrorCodesMissingUrl               AttemptErrorCodes = "MISSING_URL"
	AttemptErrorCodesCli                      AttemptErrorCodes = "CLI"
	AttemptErrorCodesCliUnavailable           AttemptErrorCodes = "CLI_UNAVAILABLE"
	AttemptErrorCodesSelfSignedCert           AttemptErrorCodes = "SELF_SIGNED_CERT"
	AttemptErrorCodesErrTlsCertAltnameInvalid AttemptErrorCodes = "ERR_TLS_CERT_ALTNAME_INVALID"
	AttemptErrorCodesErrSslWrongVersionNumber AttemptErrorCodes = "ERR_SSL_WRONG_VERSION_NUMBER"
	AttemptErrorCodesSslErrorCaUnknown        AttemptErrorCodes = "SSL_ERROR_CA_UNKNOWN"
	AttemptErrorCodesTtlExpired               AttemptErrorCodes = "TTL_EXPIRED"
	AttemptErrorCodesDataArchived             AttemptErrorCodes = "DATA_ARCHIVED"
	AttemptErrorCodesSslCertExpired           AttemptErrorCodes = "SSL_CERT_EXPIRED"
	AttemptErrorCodesBulkRetryCancelled       AttemptErrorCodes = "BULK_RETRY_CANCELLED"
	AttemptErrorCodesDnsLookupFailed          AttemptErrorCodes = "DNS_LOOKUP_FAILED"
	AttemptErrorCodesHostUnreachable          AttemptErrorCodes = "HOST_UNREACHABLE"
	AttemptErrorCodesProtocolError            AttemptErrorCodes = "PROTOCOL_ERROR"
	AttemptErrorCodesSocketClosed             AttemptErrorCodes = "SOCKET_CLOSED"
	AttemptErrorCodesOauth2HandshakeFailed    AttemptErrorCodes = "OAUTH2_HANDSHAKE_FAILED"
	AttemptErrorCodesUnknown                  AttemptErrorCodes = "UNKNOWN"
)

func NewAttemptErrorCodesFromString(s string) (AttemptErrorCodes, error) {
	switch s {
	case "CANCELLED":
		return AttemptErrorCodesCancelled, nil
	case "TIMEOUT":
		return AttemptErrorCodesTimeout, nil
	case "NOT_FOUND":
		return AttemptErrorCodesNotFound, nil
	case "CONNECTION_REFUSED":
		return AttemptErrorCodesConnectionRefused, nil
	case "CONNECTION_RESET":
		return AttemptErrorCodesConnectionReset, nil
	case "MISSING_URL":
		return AttemptErrorCodesMissingUrl, nil
	case "CLI":
		return AttemptErrorCodesCli, nil
	case "CLI_UNAVAILABLE":
		return AttemptErrorCodesCliUnavailable, nil
	case "SELF_SIGNED_CERT":
		return AttemptErrorCodesSelfSignedCert, nil
	case "ERR_TLS_CERT_ALTNAME_INVALID":
		return AttemptErrorCodesErrTlsCertAltnameInvalid, nil
	case "ERR_SSL_WRONG_VERSION_NUMBER":
		return AttemptErrorCodesErrSslWrongVersionNumber, nil
	case "SSL_ERROR_CA_UNKNOWN":
		return AttemptErrorCodesSslErrorCaUnknown, nil
	case "TTL_EXPIRED":
		return AttemptErrorCodesTtlExpired, nil
	case "DATA_ARCHIVED":
		return AttemptErrorCodesDataArchived, nil
	case "SSL_CERT_EXPIRED":
		return AttemptErrorCodesSslCertExpired, nil
	case "BULK_RETRY_CANCELLED":
		return AttemptErrorCodesBulkRetryCancelled, nil
	case "DNS_LOOKUP_FAILED":
		return AttemptErrorCodesDnsLookupFailed, nil
	case "HOST_UNREACHABLE":
		return AttemptErrorCodesHostUnreachable, nil
	case "PROTOCOL_ERROR":
		return AttemptErrorCodesProtocolError, nil
	case "SOCKET_CLOSED":
		return AttemptErrorCodesSocketClosed, nil
	case "OAUTH2_HANDSHAKE_FAILED":
		return AttemptErrorCodesOauth2HandshakeFailed, nil
	case "UNKNOWN":
		return AttemptErrorCodesUnknown, nil
	}
	var t AttemptErrorCodes
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AttemptErrorCodes) Ptr() *AttemptErrorCodes {
	return &a
}

// Attempt status
type AttemptStatus string

const (
	AttemptStatusFailed     AttemptStatus = "FAILED"
	AttemptStatusSuccessful AttemptStatus = "SUCCESSFUL"
)

func NewAttemptStatusFromString(s string) (AttemptStatus, error) {
	switch s {
	case "FAILED":
		return AttemptStatusFailed, nil
	case "SUCCESSFUL":
		return AttemptStatusSuccessful, nil
	}
	var t AttemptStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AttemptStatus) Ptr() *AttemptStatus {
	return &a
}

// How the attempt was triggered
type AttemptTrigger string

const (
	AttemptTriggerInitial   AttemptTrigger = "INITIAL"
	AttemptTriggerManual    AttemptTrigger = "MANUAL"
	AttemptTriggerBulkRetry AttemptTrigger = "BULK_RETRY"
	AttemptTriggerUnpause   AttemptTrigger = "UNPAUSE"
	AttemptTriggerAutomatic AttemptTrigger = "AUTOMATIC"
)

func NewAttemptTriggerFromString(s string) (AttemptTrigger, error) {
	switch s {
	case "INITIAL":
		return AttemptTriggerInitial, nil
	case "MANUAL":
		return AttemptTriggerManual, nil
	case "BULK_RETRY":
		return AttemptTriggerBulkRetry, nil
	case "UNPAUSE":
		return AttemptTriggerUnpause, nil
	case "AUTOMATIC":
		return AttemptTriggerAutomatic, nil
	}
	var t AttemptTrigger
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AttemptTrigger) Ptr() *AttemptTrigger {
	return &a
}

// API Key
type AuthApiKey struct {
	Config *DestinationAuthMethodApiKeyConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthApiKey) GetConfig() *DestinationAuthMethodApiKeyConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthApiKey) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthApiKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthApiKey) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// AWS Signature
type AuthAwsSignature struct {
	Config *DestinationAuthMethodAwsSignatureConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthAwsSignature) GetConfig() *DestinationAuthMethodAwsSignatureConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthAwsSignature) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthAwsSignature) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthAwsSignature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthAwsSignature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthAwsSignature) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Basic Auth
type AuthBasicAuth struct {
	Config *DestinationAuthMethodBasicAuthConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthBasicAuth) GetConfig() *DestinationAuthMethodBasicAuthConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthBasicAuth) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthBasicAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthBasicAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthBasicAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthBasicAuth) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Bearer Token
type AuthBearerToken struct {
	Config *DestinationAuthMethodBearerTokenConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthBearerToken) GetConfig() *DestinationAuthMethodBearerTokenConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthBearerToken) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthBearerToken) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthBearerToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthBearerToken(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthBearerToken) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Custom Signature
type AuthCustomSignature struct {
	Config *DestinationAuthMethodCustomSignatureConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthCustomSignature) GetConfig() *DestinationAuthMethodCustomSignatureConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthCustomSignature) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthCustomSignature) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthCustomSignature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthCustomSignature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthCustomSignature) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Hookdeck Signature
type AuthHookdeckSignature struct {
	Config *DestinationAuthMethodSignatureConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthHookdeckSignature) GetConfig() *DestinationAuthMethodSignatureConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthHookdeckSignature) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthHookdeckSignature) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthHookdeckSignature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthHookdeckSignature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthHookdeckSignature) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// OAuth2 Authorization Code
type AuthOAuth2AuthorizationCode struct {
	Config *DestinationAuthMethodOAuth2AuthorizationCodeConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthOAuth2AuthorizationCode) GetConfig() *DestinationAuthMethodOAuth2AuthorizationCodeConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthOAuth2AuthorizationCode) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthOAuth2AuthorizationCode) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthOAuth2AuthorizationCode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthOAuth2AuthorizationCode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthOAuth2AuthorizationCode) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// OAuth2 Client Credentials
type AuthOAuth2ClientCredentials struct {
	Config *DestinationAuthMethodOAuth2ClientCredentialsConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthOAuth2ClientCredentials) GetConfig() *DestinationAuthMethodOAuth2ClientCredentialsConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AuthOAuth2ClientCredentials) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthOAuth2ClientCredentials) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthOAuth2ClientCredentials
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthOAuth2ClientCredentials(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthOAuth2ClientCredentials) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type BasicAuthIntegrationConfigs struct {
	Username string `json:"username" url:"username"`
	Password string `json:"password" url:"password"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BasicAuthIntegrationConfigs) GetUsername() string {
	if b == nil {
		return ""
	}
	return b.Username
}

func (b *BasicAuthIntegrationConfigs) GetPassword() string {
	if b == nil {
		return ""
	}
	return b.Password
}

func (b *BasicAuthIntegrationConfigs) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicAuthIntegrationConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicAuthIntegrationConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicAuthIntegrationConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasicAuthIntegrationConfigs) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchOperation struct {
	// ID of the bulk retry
	Id string `json:"id" url:"id"`
	// ID of the project
	TeamId string `json:"team_id" url:"team_id"`
	// Query object to filter records
	Query *BatchOperationQuery `json:"query,omitempty" url:"query,omitempty"`
	// Date the bulk retry was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Last time the bulk retry was updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the bulk retry was cancelled
	CancelledAt *time.Time `json:"cancelled_at,omitempty" url:"cancelled_at,omitempty"`
	// Date the bulk retry was completed
	CompletedAt *time.Time `json:"completed_at,omitempty" url:"completed_at,omitempty"`
	// Number of batches required to complete the bulk retry
	EstimatedBatch *int `json:"estimated_batch,omitempty" url:"estimated_batch,omitempty"`
	// Number of estimated events to be retried
	EstimatedCount *int `json:"estimated_count,omitempty" url:"estimated_count,omitempty"`
	// Number of batches currently processed
	ProcessedBatch *int `json:"processed_batch,omitempty" url:"processed_batch,omitempty"`
	// Number of events that were successfully delivered
	CompletedCount *int `json:"completed_count,omitempty" url:"completed_count,omitempty"`
	// Indicates if the bulk retry is currently in progress
	InProgress bool `json:"in_progress" url:"in_progress"`
	// Progression of the batch operations, values 0 - 1
	Progress *float64 `json:"progress,omitempty" url:"progress,omitempty"`
	// Number of events that failed to be delivered
	FailedCount *int     `json:"failed_count,omitempty" url:"failed_count,omitempty"`
	Number      *float64 `json:"number,omitempty" url:"number,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchOperation) GetId() string {
	if b == nil {
		return ""
	}
	return b.Id
}

func (b *BatchOperation) GetTeamId() string {
	if b == nil {
		return ""
	}
	return b.TeamId
}

func (b *BatchOperation) GetQuery() *BatchOperationQuery {
	if b == nil {
		return nil
	}
	return b.Query
}

func (b *BatchOperation) GetCreatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.CreatedAt
}

func (b *BatchOperation) GetUpdatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.UpdatedAt
}

func (b *BatchOperation) GetCancelledAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.CancelledAt
}

func (b *BatchOperation) GetCompletedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.CompletedAt
}

func (b *BatchOperation) GetEstimatedBatch() *int {
	if b == nil {
		return nil
	}
	return b.EstimatedBatch
}

func (b *BatchOperation) GetEstimatedCount() *int {
	if b == nil {
		return nil
	}
	return b.EstimatedCount
}

func (b *BatchOperation) GetProcessedBatch() *int {
	if b == nil {
		return nil
	}
	return b.ProcessedBatch
}

func (b *BatchOperation) GetCompletedCount() *int {
	if b == nil {
		return nil
	}
	return b.CompletedCount
}

func (b *BatchOperation) GetInProgress() bool {
	if b == nil {
		return false
	}
	return b.InProgress
}

func (b *BatchOperation) GetProgress() *float64 {
	if b == nil {
		return nil
	}
	return b.Progress
}

func (b *BatchOperation) GetFailedCount() *int {
	if b == nil {
		return nil
	}
	return b.FailedCount
}

func (b *BatchOperation) GetNumber() *float64 {
	if b == nil {
		return nil
	}
	return b.Number
}

func (b *BatchOperation) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchOperation) UnmarshalJSON(data []byte) error {
	type embed BatchOperation
	var unmarshaler = struct {
		embed
		CreatedAt   *internal.DateTime `json:"created_at"`
		UpdatedAt   *internal.DateTime `json:"updated_at"`
		CancelledAt *internal.DateTime `json:"cancelled_at,omitempty"`
		CompletedAt *internal.DateTime `json:"completed_at,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BatchOperation(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.Time()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()
	b.CancelledAt = unmarshaler.CancelledAt.TimePtr()
	b.CompletedAt = unmarshaler.CompletedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchOperation) MarshalJSON() ([]byte, error) {
	type embed BatchOperation
	var marshaler = struct {
		embed
		CreatedAt   *internal.DateTime `json:"created_at"`
		UpdatedAt   *internal.DateTime `json:"updated_at"`
		CancelledAt *internal.DateTime `json:"cancelled_at,omitempty"`
		CompletedAt *internal.DateTime `json:"completed_at,omitempty"`
	}{
		embed:       embed(*b),
		CreatedAt:   internal.NewDateTime(b.CreatedAt),
		UpdatedAt:   internal.NewDateTime(b.UpdatedAt),
		CancelledAt: internal.NewOptionalDateTime(b.CancelledAt),
		CompletedAt: internal.NewOptionalDateTime(b.CompletedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BatchOperation) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchOperationPaginatedResult struct {
	Pagination *SeekPagination   `json:"pagination,omitempty" url:"pagination,omitempty"`
	Count      *int              `json:"count,omitempty" url:"count,omitempty"`
	Models     []*BatchOperation `json:"models,omitempty" url:"models,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchOperationPaginatedResult) GetPagination() *SeekPagination {
	if b == nil {
		return nil
	}
	return b.Pagination
}

func (b *BatchOperationPaginatedResult) GetCount() *int {
	if b == nil {
		return nil
	}
	return b.Count
}

func (b *BatchOperationPaginatedResult) GetModels() []*BatchOperation {
	if b == nil {
		return nil
	}
	return b.Models
}

func (b *BatchOperationPaginatedResult) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchOperationPaginatedResult) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchOperationPaginatedResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchOperationPaginatedResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchOperationPaginatedResult) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Query object to filter records
type BatchOperationQuery struct {
	StringUnknownMap map[string]interface{}
	StringOptional   *string

	typ string
}

func NewBatchOperationQueryFromStringUnknownMap(value map[string]interface{}) *BatchOperationQuery {
	return &BatchOperationQuery{typ: "StringUnknownMap", StringUnknownMap: value}
}

func NewBatchOperationQueryFromStringOptional(value *string) *BatchOperationQuery {
	return &BatchOperationQuery{typ: "StringOptional", StringOptional: value}
}

func (b *BatchOperationQuery) GetStringUnknownMap() map[string]interface{} {
	if b == nil {
		return nil
	}
	return b.StringUnknownMap
}

func (b *BatchOperationQuery) GetStringOptional() *string {
	if b == nil {
		return nil
	}
	return b.StringOptional
}

func (b *BatchOperationQuery) UnmarshalJSON(data []byte) error {
	var valueStringUnknownMap map[string]interface{}
	if err := json.Unmarshal(data, &valueStringUnknownMap); err == nil {
		b.typ = "StringUnknownMap"
		b.StringUnknownMap = valueStringUnknownMap
		return nil
	}
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		b.typ = "StringOptional"
		b.StringOptional = valueStringOptional
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BatchOperationQuery) MarshalJSON() ([]byte, error) {
	if b.typ == "StringUnknownMap" || b.StringUnknownMap != nil {
		return json.Marshal(b.StringUnknownMap)
	}
	if b.typ == "StringOptional" || b.StringOptional != nil {
		return json.Marshal(b.StringOptional)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", b)
}

type BatchOperationQueryVisitor interface {
	VisitStringUnknownMap(map[string]interface{}) error
	VisitStringOptional(*string) error
}

func (b *BatchOperationQuery) Accept(visitor BatchOperationQueryVisitor) error {
	if b.typ == "StringUnknownMap" || b.StringUnknownMap != nil {
		return visitor.VisitStringUnknownMap(b.StringUnknownMap)
	}
	if b.typ == "StringOptional" || b.StringOptional != nil {
		return visitor.VisitStringOptional(b.StringOptional)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", b)
}

type ConsoleLine struct {
	Type    ConsoleLineType `json:"type" url:"type"`
	Message string          `json:"message" url:"message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConsoleLine) GetType() ConsoleLineType {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *ConsoleLine) GetMessage() string {
	if c == nil {
		return ""
	}
	return c.Message
}

func (c *ConsoleLine) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConsoleLine) UnmarshalJSON(data []byte) error {
	type unmarshaler ConsoleLine
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConsoleLine(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConsoleLine) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConsoleLineType string

const (
	ConsoleLineTypeError ConsoleLineType = "error"
	ConsoleLineTypeLog   ConsoleLineType = "log"
	ConsoleLineTypeWarn  ConsoleLineType = "warn"
	ConsoleLineTypeInfo  ConsoleLineType = "info"
	ConsoleLineTypeDebug ConsoleLineType = "debug"
)

func NewConsoleLineTypeFromString(s string) (ConsoleLineType, error) {
	switch s {
	case "error":
		return ConsoleLineTypeError, nil
	case "log":
		return ConsoleLineTypeLog, nil
	case "warn":
		return ConsoleLineTypeWarn, nil
	case "info":
		return ConsoleLineTypeInfo, nil
	case "debug":
		return ConsoleLineTypeDebug, nil
	}
	var t ConsoleLineType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConsoleLineType) Ptr() *ConsoleLineType {
	return &c
}

type DeletedIntegration struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeletedIntegration) GetId() string {
	if d == nil {
		return ""
	}
	return d.Id
}

func (d *DeletedIntegration) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeletedIntegration) UnmarshalJSON(data []byte) error {
	type unmarshaler DeletedIntegration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeletedIntegration(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeletedIntegration) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Associated [Destination](#destination-object) object
type Destination struct {
	// ID of the destination
	Id string `json:"id" url:"id"`
	// A unique, human-friendly name for the destination
	Name string `json:"name" url:"name"`
	// Description of the destination
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// ID of the project
	TeamId                 string `json:"team_id" url:"team_id"`
	PathForwardingDisabled *bool  `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	// HTTP endpoint of the destination
	Url *string `json:"url,omitempty" url:"url,omitempty"`
	// Path for the CLI destination
	CliPath *string `json:"cli_path,omitempty" url:"cli_path,omitempty"`
	// Limit of events to receive per period. Refered as Delivery Rate limit in the dashboard and documentation.
	RateLimit       *int                         `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod *DestinationRateLimitPeriod  `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	HttpMethod      *DestinationHttpMethod       `json:"http_method,omitempty" url:"http_method,omitempty"`
	AuthMethod      *DestinationAuthMethodConfig `json:"auth_method,omitempty" url:"auth_method,omitempty"`
	// Date the destination was disabled
	DisabledAt *time.Time `json:"disabled_at,omitempty" url:"disabled_at,omitempty"`
	// Date the destination was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the destination was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Type of the destination
	Type *string `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *Destination) GetId() string {
	if d == nil {
		return ""
	}
	return d.Id
}

func (d *Destination) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *Destination) GetDescription() *string {
	if d == nil {
		return nil
	}
	return d.Description
}

func (d *Destination) GetTeamId() string {
	if d == nil {
		return ""
	}
	return d.TeamId
}

func (d *Destination) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *Destination) GetUrl() *string {
	if d == nil {
		return nil
	}
	return d.Url
}

func (d *Destination) GetCliPath() *string {
	if d == nil {
		return nil
	}
	return d.CliPath
}

func (d *Destination) GetRateLimit() *int {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *Destination) GetRateLimitPeriod() *DestinationRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *Destination) GetHttpMethod() *DestinationHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *Destination) GetAuthMethod() *DestinationAuthMethodConfig {
	if d == nil {
		return nil
	}
	return d.AuthMethod
}

func (d *Destination) GetDisabledAt() *time.Time {
	if d == nil {
		return nil
	}
	return d.DisabledAt
}

func (d *Destination) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

func (d *Destination) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *Destination) GetType() *string {
	if d == nil {
		return nil
	}
	return d.Type
}

func (d *Destination) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Destination) UnmarshalJSON(data []byte) error {
	type embed Destination
	var unmarshaler = struct {
		embed
		DisabledAt *internal.DateTime `json:"disabled_at,omitempty"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
		CreatedAt  *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = Destination(unmarshaler.embed)
	d.DisabledAt = unmarshaler.DisabledAt.TimePtr()
	d.UpdatedAt = unmarshaler.UpdatedAt.Time()
	d.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *Destination) MarshalJSON() ([]byte, error) {
	type embed Destination
	var marshaler = struct {
		embed
		DisabledAt *internal.DateTime `json:"disabled_at,omitempty"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
		CreatedAt  *internal.DateTime `json:"created_at"`
	}{
		embed:      embed(*d),
		DisabledAt: internal.NewOptionalDateTime(d.DisabledAt),
		UpdatedAt:  internal.NewDateTime(d.UpdatedAt),
		CreatedAt:  internal.NewDateTime(d.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (d *Destination) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// API key config for the destination's auth method
type DestinationAuthMethodApiKeyConfig struct {
	// Key for the API key auth
	Key string `json:"key" url:"key"`
	// API key for the API key auth
	ApiKey string `json:"api_key" url:"api_key"`
	// Whether the API key should be sent as a header or a query parameter
	To *DestinationAuthMethodApiKeyConfigTo `json:"to,omitempty" url:"to,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodApiKeyConfig) GetKey() string {
	if d == nil {
		return ""
	}
	return d.Key
}

func (d *DestinationAuthMethodApiKeyConfig) GetApiKey() string {
	if d == nil {
		return ""
	}
	return d.ApiKey
}

func (d *DestinationAuthMethodApiKeyConfig) GetTo() *DestinationAuthMethodApiKeyConfigTo {
	if d == nil {
		return nil
	}
	return d.To
}

func (d *DestinationAuthMethodApiKeyConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodApiKeyConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodApiKeyConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodApiKeyConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodApiKeyConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Whether the API key should be sent as a header or a query parameter
type DestinationAuthMethodApiKeyConfigTo string

const (
	DestinationAuthMethodApiKeyConfigToHeader DestinationAuthMethodApiKeyConfigTo = "header"
	DestinationAuthMethodApiKeyConfigToQuery  DestinationAuthMethodApiKeyConfigTo = "query"
)

func NewDestinationAuthMethodApiKeyConfigToFromString(s string) (DestinationAuthMethodApiKeyConfigTo, error) {
	switch s {
	case "header":
		return DestinationAuthMethodApiKeyConfigToHeader, nil
	case "query":
		return DestinationAuthMethodApiKeyConfigToQuery, nil
	}
	var t DestinationAuthMethodApiKeyConfigTo
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationAuthMethodApiKeyConfigTo) Ptr() *DestinationAuthMethodApiKeyConfigTo {
	return &d
}

// AWS Signature config for the destination's auth method
type DestinationAuthMethodAwsSignatureConfig struct {
	// AWS access key id
	AccessKeyId string `json:"access_key_id" url:"access_key_id"`
	// AWS secret access key
	SecretAccessKey string `json:"secret_access_key" url:"secret_access_key"`
	// AWS region
	Region *string `json:"region,omitempty" url:"region,omitempty"`
	// AWS service
	Service *string `json:"service,omitempty" url:"service,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodAwsSignatureConfig) GetAccessKeyId() string {
	if d == nil {
		return ""
	}
	return d.AccessKeyId
}

func (d *DestinationAuthMethodAwsSignatureConfig) GetSecretAccessKey() string {
	if d == nil {
		return ""
	}
	return d.SecretAccessKey
}

func (d *DestinationAuthMethodAwsSignatureConfig) GetRegion() *string {
	if d == nil {
		return nil
	}
	return d.Region
}

func (d *DestinationAuthMethodAwsSignatureConfig) GetService() *string {
	if d == nil {
		return nil
	}
	return d.Service
}

func (d *DestinationAuthMethodAwsSignatureConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodAwsSignatureConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodAwsSignatureConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodAwsSignatureConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodAwsSignatureConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Basic auth config for the destination's auth method
type DestinationAuthMethodBasicAuthConfig struct {
	// Username for basic auth
	Username string `json:"username" url:"username"`
	// Password for basic auth
	Password string `json:"password" url:"password"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodBasicAuthConfig) GetUsername() string {
	if d == nil {
		return ""
	}
	return d.Username
}

func (d *DestinationAuthMethodBasicAuthConfig) GetPassword() string {
	if d == nil {
		return ""
	}
	return d.Password
}

func (d *DestinationAuthMethodBasicAuthConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodBasicAuthConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodBasicAuthConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodBasicAuthConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodBasicAuthConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Bearer token config for the destination's auth method
type DestinationAuthMethodBearerTokenConfig struct {
	// Token for the bearer token auth
	Token string `json:"token" url:"token"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodBearerTokenConfig) GetToken() string {
	if d == nil {
		return ""
	}
	return d.Token
}

func (d *DestinationAuthMethodBearerTokenConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodBearerTokenConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodBearerTokenConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodBearerTokenConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodBearerTokenConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Config for the destination's auth method
type DestinationAuthMethodConfig struct {
	Type                    string
	HookdeckSignature       *AuthHookdeckSignature
	BasicAuth               *AuthBasicAuth
	ApiKey                  *AuthApiKey
	BearerToken             *AuthBearerToken
	Oauth2ClientCredentials *AuthOAuth2ClientCredentials
	Oauth2AuthorizationCode *AuthOAuth2AuthorizationCode
	CustomSignature         *AuthCustomSignature
	AwsSignature            *AuthAwsSignature
}

func NewDestinationAuthMethodConfigFromHookdeckSignature(value *AuthHookdeckSignature) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "HOOKDECK_SIGNATURE", HookdeckSignature: value}
}

func NewDestinationAuthMethodConfigFromBasicAuth(value *AuthBasicAuth) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "BASIC_AUTH", BasicAuth: value}
}

func NewDestinationAuthMethodConfigFromApiKey(value *AuthApiKey) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "API_KEY", ApiKey: value}
}

func NewDestinationAuthMethodConfigFromBearerToken(value *AuthBearerToken) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "BEARER_TOKEN", BearerToken: value}
}

func NewDestinationAuthMethodConfigFromOauth2ClientCredentials(value *AuthOAuth2ClientCredentials) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "OAUTH2_CLIENT_CREDENTIALS", Oauth2ClientCredentials: value}
}

func NewDestinationAuthMethodConfigFromOauth2AuthorizationCode(value *AuthOAuth2AuthorizationCode) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "OAUTH2_AUTHORIZATION_CODE", Oauth2AuthorizationCode: value}
}

func NewDestinationAuthMethodConfigFromCustomSignature(value *AuthCustomSignature) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "CUSTOM_SIGNATURE", CustomSignature: value}
}

func NewDestinationAuthMethodConfigFromAwsSignature(value *AuthAwsSignature) *DestinationAuthMethodConfig {
	return &DestinationAuthMethodConfig{Type: "AWS_SIGNATURE", AwsSignature: value}
}

func (d *DestinationAuthMethodConfig) GetType() string {
	if d == nil {
		return ""
	}
	return d.Type
}

func (d *DestinationAuthMethodConfig) GetHookdeckSignature() *AuthHookdeckSignature {
	if d == nil {
		return nil
	}
	return d.HookdeckSignature
}

func (d *DestinationAuthMethodConfig) GetBasicAuth() *AuthBasicAuth {
	if d == nil {
		return nil
	}
	return d.BasicAuth
}

func (d *DestinationAuthMethodConfig) GetApiKey() *AuthApiKey {
	if d == nil {
		return nil
	}
	return d.ApiKey
}

func (d *DestinationAuthMethodConfig) GetBearerToken() *AuthBearerToken {
	if d == nil {
		return nil
	}
	return d.BearerToken
}

func (d *DestinationAuthMethodConfig) GetOauth2ClientCredentials() *AuthOAuth2ClientCredentials {
	if d == nil {
		return nil
	}
	return d.Oauth2ClientCredentials
}

func (d *DestinationAuthMethodConfig) GetOauth2AuthorizationCode() *AuthOAuth2AuthorizationCode {
	if d == nil {
		return nil
	}
	return d.Oauth2AuthorizationCode
}

func (d *DestinationAuthMethodConfig) GetCustomSignature() *AuthCustomSignature {
	if d == nil {
		return nil
	}
	return d.CustomSignature
}

func (d *DestinationAuthMethodConfig) GetAwsSignature() *AuthAwsSignature {
	if d == nil {
		return nil
	}
	return d.AwsSignature
}

func (d *DestinationAuthMethodConfig) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	d.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", d)
	}
	switch unmarshaler.Type {
	case "HOOKDECK_SIGNATURE":
		value := new(AuthHookdeckSignature)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.HookdeckSignature = value
	case "BASIC_AUTH":
		value := new(AuthBasicAuth)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.BasicAuth = value
	case "API_KEY":
		value := new(AuthApiKey)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.ApiKey = value
	case "BEARER_TOKEN":
		value := new(AuthBearerToken)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.BearerToken = value
	case "OAUTH2_CLIENT_CREDENTIALS":
		value := new(AuthOAuth2ClientCredentials)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.Oauth2ClientCredentials = value
	case "OAUTH2_AUTHORIZATION_CODE":
		value := new(AuthOAuth2AuthorizationCode)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.Oauth2AuthorizationCode = value
	case "CUSTOM_SIGNATURE":
		value := new(AuthCustomSignature)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.CustomSignature = value
	case "AWS_SIGNATURE":
		value := new(AuthAwsSignature)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		d.AwsSignature = value
	}
	return nil
}

func (d DestinationAuthMethodConfig) MarshalJSON() ([]byte, error) {
	switch d.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", d.Type, d)
	case "HOOKDECK_SIGNATURE":
		return internal.MarshalJSONWithExtraProperty(d.HookdeckSignature, "type", "HOOKDECK_SIGNATURE")
	case "BASIC_AUTH":
		return internal.MarshalJSONWithExtraProperty(d.BasicAuth, "type", "BASIC_AUTH")
	case "API_KEY":
		return internal.MarshalJSONWithExtraProperty(d.ApiKey, "type", "API_KEY")
	case "BEARER_TOKEN":
		return internal.MarshalJSONWithExtraProperty(d.BearerToken, "type", "BEARER_TOKEN")
	case "OAUTH2_CLIENT_CREDENTIALS":
		return internal.MarshalJSONWithExtraProperty(d.Oauth2ClientCredentials, "type", "OAUTH2_CLIENT_CREDENTIALS")
	case "OAUTH2_AUTHORIZATION_CODE":
		return internal.MarshalJSONWithExtraProperty(d.Oauth2AuthorizationCode, "type", "OAUTH2_AUTHORIZATION_CODE")
	case "CUSTOM_SIGNATURE":
		return internal.MarshalJSONWithExtraProperty(d.CustomSignature, "type", "CUSTOM_SIGNATURE")
	case "AWS_SIGNATURE":
		return internal.MarshalJSONWithExtraProperty(d.AwsSignature, "type", "AWS_SIGNATURE")
	}
}

type DestinationAuthMethodConfigVisitor interface {
	VisitHookdeckSignature(*AuthHookdeckSignature) error
	VisitBasicAuth(*AuthBasicAuth) error
	VisitApiKey(*AuthApiKey) error
	VisitBearerToken(*AuthBearerToken) error
	VisitOauth2ClientCredentials(*AuthOAuth2ClientCredentials) error
	VisitOauth2AuthorizationCode(*AuthOAuth2AuthorizationCode) error
	VisitCustomSignature(*AuthCustomSignature) error
	VisitAwsSignature(*AuthAwsSignature) error
}

func (d *DestinationAuthMethodConfig) Accept(visitor DestinationAuthMethodConfigVisitor) error {
	switch d.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", d.Type, d)
	case "HOOKDECK_SIGNATURE":
		return visitor.VisitHookdeckSignature(d.HookdeckSignature)
	case "BASIC_AUTH":
		return visitor.VisitBasicAuth(d.BasicAuth)
	case "API_KEY":
		return visitor.VisitApiKey(d.ApiKey)
	case "BEARER_TOKEN":
		return visitor.VisitBearerToken(d.BearerToken)
	case "OAUTH2_CLIENT_CREDENTIALS":
		return visitor.VisitOauth2ClientCredentials(d.Oauth2ClientCredentials)
	case "OAUTH2_AUTHORIZATION_CODE":
		return visitor.VisitOauth2AuthorizationCode(d.Oauth2AuthorizationCode)
	case "CUSTOM_SIGNATURE":
		return visitor.VisitCustomSignature(d.CustomSignature)
	case "AWS_SIGNATURE":
		return visitor.VisitAwsSignature(d.AwsSignature)
	}
}

// Custom signature config for the destination's auth method
type DestinationAuthMethodCustomSignatureConfig struct {
	// Key for the custom signature auth
	Key string `json:"key" url:"key"`
	// Signing secret for the custom signature auth. If left empty a secret will be generated for you.
	SigningSecret *string `json:"signing_secret,omitempty" url:"signing_secret,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodCustomSignatureConfig) GetKey() string {
	if d == nil {
		return ""
	}
	return d.Key
}

func (d *DestinationAuthMethodCustomSignatureConfig) GetSigningSecret() *string {
	if d == nil {
		return nil
	}
	return d.SigningSecret
}

func (d *DestinationAuthMethodCustomSignatureConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodCustomSignatureConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodCustomSignatureConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodCustomSignatureConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodCustomSignatureConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// OAuth2 Authorization Code config for the destination's auth method
type DestinationAuthMethodOAuth2AuthorizationCodeConfig struct {
	// Client id in the auth server
	ClientId string `json:"client_id" url:"client_id"`
	// Client secret in the auth server
	ClientSecret string `json:"client_secret" url:"client_secret"`
	// Refresh token already returned by the auth server
	RefreshToken string `json:"refresh_token" url:"refresh_token"`
	// Scope to access
	Scope *string `json:"scope,omitempty" url:"scope,omitempty"`
	// URL of the auth server
	AuthServer string `json:"auth_server" url:"auth_server"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) GetClientId() string {
	if d == nil {
		return ""
	}
	return d.ClientId
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) GetClientSecret() string {
	if d == nil {
		return ""
	}
	return d.ClientSecret
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) GetRefreshToken() string {
	if d == nil {
		return ""
	}
	return d.RefreshToken
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) GetScope() *string {
	if d == nil {
		return nil
	}
	return d.Scope
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) GetAuthServer() string {
	if d == nil {
		return ""
	}
	return d.AuthServer
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodOAuth2AuthorizationCodeConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodOAuth2AuthorizationCodeConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodOAuth2AuthorizationCodeConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// OAuth2 Client Credentials config for the destination's auth method
type DestinationAuthMethodOAuth2ClientCredentialsConfig struct {
	// Client id in the auth server
	ClientId string `json:"client_id" url:"client_id"`
	// Client secret in the auth server
	ClientSecret string `json:"client_secret" url:"client_secret"`
	// Scope to access
	Scope *string `json:"scope,omitempty" url:"scope,omitempty"`
	// URL of the auth server
	AuthServer string `json:"auth_server" url:"auth_server"`
	// Basic (default), Bearer Authentication or x-www-form-urlencoded
	AuthenticationType *DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType `json:"authentication_type,omitempty" url:"authentication_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) GetClientId() string {
	if d == nil {
		return ""
	}
	return d.ClientId
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) GetClientSecret() string {
	if d == nil {
		return ""
	}
	return d.ClientSecret
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) GetScope() *string {
	if d == nil {
		return nil
	}
	return d.Scope
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) GetAuthServer() string {
	if d == nil {
		return ""
	}
	return d.AuthServer
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) GetAuthenticationType() *DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType {
	if d == nil {
		return nil
	}
	return d.AuthenticationType
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodOAuth2ClientCredentialsConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodOAuth2ClientCredentialsConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodOAuth2ClientCredentialsConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Basic (default), Bearer Authentication or x-www-form-urlencoded
type DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType string

const (
	DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeBasic              DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType = "basic"
	DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeBearer             DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType = "bearer"
	DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeXWwwFormUrlencoded DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType = "x-www-form-urlencoded"
)

func NewDestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeFromString(s string) (DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType, error) {
	switch s {
	case "basic":
		return DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeBasic, nil
	case "bearer":
		return DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeBearer, nil
	case "x-www-form-urlencoded":
		return DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationTypeXWwwFormUrlencoded, nil
	}
	var t DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType) Ptr() *DestinationAuthMethodOAuth2ClientCredentialsConfigAuthenticationType {
	return &d
}

// Empty config for the destination's auth method
type DestinationAuthMethodSignatureConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationAuthMethodSignatureConfig) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationAuthMethodSignatureConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationAuthMethodSignatureConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationAuthMethodSignatureConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationAuthMethodSignatureConfig) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Configuration object for the destination type
type DestinationConfig struct {
	DestinationTypeConfigCustomSha256HmacSignature *DestinationTypeConfigCustomSha256HmacSignature
	DestinationTypeConfigBasicAuth                 *DestinationTypeConfigBasicAuth
	DestinationTypeConfigApiKey                    *DestinationTypeConfigApiKey
	DestinationTypeConfigBearerToken               *DestinationTypeConfigBearerToken
	DestinationTypeConfigOAuth2ClientCredentials   *DestinationTypeConfigOAuth2ClientCredentials
	DestinationTypeConfigOAuth2AuthorizationCode   *DestinationTypeConfigOAuth2AuthorizationCode
	DestinationTypeConfigAwsSignature              *DestinationTypeConfigAwsSignature
	DestinationTypeConfigHttp                      *DestinationTypeConfigHttp
	DestinationTypeConfigCli                       *DestinationTypeConfigCli
	DestinationTypeConfigMockApi                   *DestinationTypeConfigMockApi

	typ string
}

func NewDestinationConfigFromDestinationTypeConfigCustomSha256HmacSignature(value *DestinationTypeConfigCustomSha256HmacSignature) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigCustomSha256HmacSignature", DestinationTypeConfigCustomSha256HmacSignature: value}
}

func NewDestinationConfigFromDestinationTypeConfigBasicAuth(value *DestinationTypeConfigBasicAuth) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigBasicAuth", DestinationTypeConfigBasicAuth: value}
}

func NewDestinationConfigFromDestinationTypeConfigApiKey(value *DestinationTypeConfigApiKey) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigApiKey", DestinationTypeConfigApiKey: value}
}

func NewDestinationConfigFromDestinationTypeConfigBearerToken(value *DestinationTypeConfigBearerToken) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigBearerToken", DestinationTypeConfigBearerToken: value}
}

func NewDestinationConfigFromDestinationTypeConfigOAuth2ClientCredentials(value *DestinationTypeConfigOAuth2ClientCredentials) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigOAuth2ClientCredentials", DestinationTypeConfigOAuth2ClientCredentials: value}
}

func NewDestinationConfigFromDestinationTypeConfigOAuth2AuthorizationCode(value *DestinationTypeConfigOAuth2AuthorizationCode) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigOAuth2AuthorizationCode", DestinationTypeConfigOAuth2AuthorizationCode: value}
}

func NewDestinationConfigFromDestinationTypeConfigAwsSignature(value *DestinationTypeConfigAwsSignature) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigAwsSignature", DestinationTypeConfigAwsSignature: value}
}

func NewDestinationConfigFromDestinationTypeConfigHttp(value *DestinationTypeConfigHttp) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigHttp", DestinationTypeConfigHttp: value}
}

func NewDestinationConfigFromDestinationTypeConfigCli(value *DestinationTypeConfigCli) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigCli", DestinationTypeConfigCli: value}
}

func NewDestinationConfigFromDestinationTypeConfigMockApi(value *DestinationTypeConfigMockApi) *DestinationConfig {
	return &DestinationConfig{typ: "DestinationTypeConfigMockApi", DestinationTypeConfigMockApi: value}
}

func (d *DestinationConfig) GetDestinationTypeConfigCustomSha256HmacSignature() *DestinationTypeConfigCustomSha256HmacSignature {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigCustomSha256HmacSignature
}

func (d *DestinationConfig) GetDestinationTypeConfigBasicAuth() *DestinationTypeConfigBasicAuth {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigBasicAuth
}

func (d *DestinationConfig) GetDestinationTypeConfigApiKey() *DestinationTypeConfigApiKey {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigApiKey
}

func (d *DestinationConfig) GetDestinationTypeConfigBearerToken() *DestinationTypeConfigBearerToken {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigBearerToken
}

func (d *DestinationConfig) GetDestinationTypeConfigOAuth2ClientCredentials() *DestinationTypeConfigOAuth2ClientCredentials {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigOAuth2ClientCredentials
}

func (d *DestinationConfig) GetDestinationTypeConfigOAuth2AuthorizationCode() *DestinationTypeConfigOAuth2AuthorizationCode {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigOAuth2AuthorizationCode
}

func (d *DestinationConfig) GetDestinationTypeConfigAwsSignature() *DestinationTypeConfigAwsSignature {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigAwsSignature
}

func (d *DestinationConfig) GetDestinationTypeConfigHttp() *DestinationTypeConfigHttp {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttp
}

func (d *DestinationConfig) GetDestinationTypeConfigCli() *DestinationTypeConfigCli {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigCli
}

func (d *DestinationConfig) GetDestinationTypeConfigMockApi() *DestinationTypeConfigMockApi {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigMockApi
}

func (d *DestinationConfig) UnmarshalJSON(data []byte) error {
	valueDestinationTypeConfigCustomSha256HmacSignature := new(DestinationTypeConfigCustomSha256HmacSignature)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigCustomSha256HmacSignature); err == nil {
		d.typ = "DestinationTypeConfigCustomSha256HmacSignature"
		d.DestinationTypeConfigCustomSha256HmacSignature = valueDestinationTypeConfigCustomSha256HmacSignature
		return nil
	}
	valueDestinationTypeConfigBasicAuth := new(DestinationTypeConfigBasicAuth)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigBasicAuth); err == nil {
		d.typ = "DestinationTypeConfigBasicAuth"
		d.DestinationTypeConfigBasicAuth = valueDestinationTypeConfigBasicAuth
		return nil
	}
	valueDestinationTypeConfigApiKey := new(DestinationTypeConfigApiKey)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigApiKey); err == nil {
		d.typ = "DestinationTypeConfigApiKey"
		d.DestinationTypeConfigApiKey = valueDestinationTypeConfigApiKey
		return nil
	}
	valueDestinationTypeConfigBearerToken := new(DestinationTypeConfigBearerToken)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigBearerToken); err == nil {
		d.typ = "DestinationTypeConfigBearerToken"
		d.DestinationTypeConfigBearerToken = valueDestinationTypeConfigBearerToken
		return nil
	}
	valueDestinationTypeConfigOAuth2ClientCredentials := new(DestinationTypeConfigOAuth2ClientCredentials)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigOAuth2ClientCredentials); err == nil {
		d.typ = "DestinationTypeConfigOAuth2ClientCredentials"
		d.DestinationTypeConfigOAuth2ClientCredentials = valueDestinationTypeConfigOAuth2ClientCredentials
		return nil
	}
	valueDestinationTypeConfigOAuth2AuthorizationCode := new(DestinationTypeConfigOAuth2AuthorizationCode)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigOAuth2AuthorizationCode); err == nil {
		d.typ = "DestinationTypeConfigOAuth2AuthorizationCode"
		d.DestinationTypeConfigOAuth2AuthorizationCode = valueDestinationTypeConfigOAuth2AuthorizationCode
		return nil
	}
	valueDestinationTypeConfigAwsSignature := new(DestinationTypeConfigAwsSignature)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigAwsSignature); err == nil {
		d.typ = "DestinationTypeConfigAwsSignature"
		d.DestinationTypeConfigAwsSignature = valueDestinationTypeConfigAwsSignature
		return nil
	}
	valueDestinationTypeConfigHttp := new(DestinationTypeConfigHttp)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttp); err == nil {
		d.typ = "DestinationTypeConfigHttp"
		d.DestinationTypeConfigHttp = valueDestinationTypeConfigHttp
		return nil
	}
	valueDestinationTypeConfigCli := new(DestinationTypeConfigCli)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigCli); err == nil {
		d.typ = "DestinationTypeConfigCli"
		d.DestinationTypeConfigCli = valueDestinationTypeConfigCli
		return nil
	}
	valueDestinationTypeConfigMockApi := new(DestinationTypeConfigMockApi)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigMockApi); err == nil {
		d.typ = "DestinationTypeConfigMockApi"
		d.DestinationTypeConfigMockApi = valueDestinationTypeConfigMockApi
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DestinationConfig) MarshalJSON() ([]byte, error) {
	if d.typ == "DestinationTypeConfigCustomSha256HmacSignature" || d.DestinationTypeConfigCustomSha256HmacSignature != nil {
		return json.Marshal(d.DestinationTypeConfigCustomSha256HmacSignature)
	}
	if d.typ == "DestinationTypeConfigBasicAuth" || d.DestinationTypeConfigBasicAuth != nil {
		return json.Marshal(d.DestinationTypeConfigBasicAuth)
	}
	if d.typ == "DestinationTypeConfigApiKey" || d.DestinationTypeConfigApiKey != nil {
		return json.Marshal(d.DestinationTypeConfigApiKey)
	}
	if d.typ == "DestinationTypeConfigBearerToken" || d.DestinationTypeConfigBearerToken != nil {
		return json.Marshal(d.DestinationTypeConfigBearerToken)
	}
	if d.typ == "DestinationTypeConfigOAuth2ClientCredentials" || d.DestinationTypeConfigOAuth2ClientCredentials != nil {
		return json.Marshal(d.DestinationTypeConfigOAuth2ClientCredentials)
	}
	if d.typ == "DestinationTypeConfigOAuth2AuthorizationCode" || d.DestinationTypeConfigOAuth2AuthorizationCode != nil {
		return json.Marshal(d.DestinationTypeConfigOAuth2AuthorizationCode)
	}
	if d.typ == "DestinationTypeConfigAwsSignature" || d.DestinationTypeConfigAwsSignature != nil {
		return json.Marshal(d.DestinationTypeConfigAwsSignature)
	}
	if d.typ == "DestinationTypeConfigHttp" || d.DestinationTypeConfigHttp != nil {
		return json.Marshal(d.DestinationTypeConfigHttp)
	}
	if d.typ == "DestinationTypeConfigCli" || d.DestinationTypeConfigCli != nil {
		return json.Marshal(d.DestinationTypeConfigCli)
	}
	if d.typ == "DestinationTypeConfigMockApi" || d.DestinationTypeConfigMockApi != nil {
		return json.Marshal(d.DestinationTypeConfigMockApi)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DestinationConfigVisitor interface {
	VisitDestinationTypeConfigCustomSha256HmacSignature(*DestinationTypeConfigCustomSha256HmacSignature) error
	VisitDestinationTypeConfigBasicAuth(*DestinationTypeConfigBasicAuth) error
	VisitDestinationTypeConfigApiKey(*DestinationTypeConfigApiKey) error
	VisitDestinationTypeConfigBearerToken(*DestinationTypeConfigBearerToken) error
	VisitDestinationTypeConfigOAuth2ClientCredentials(*DestinationTypeConfigOAuth2ClientCredentials) error
	VisitDestinationTypeConfigOAuth2AuthorizationCode(*DestinationTypeConfigOAuth2AuthorizationCode) error
	VisitDestinationTypeConfigAwsSignature(*DestinationTypeConfigAwsSignature) error
	VisitDestinationTypeConfigHttp(*DestinationTypeConfigHttp) error
	VisitDestinationTypeConfigCli(*DestinationTypeConfigCli) error
	VisitDestinationTypeConfigMockApi(*DestinationTypeConfigMockApi) error
}

func (d *DestinationConfig) Accept(visitor DestinationConfigVisitor) error {
	if d.typ == "DestinationTypeConfigCustomSha256HmacSignature" || d.DestinationTypeConfigCustomSha256HmacSignature != nil {
		return visitor.VisitDestinationTypeConfigCustomSha256HmacSignature(d.DestinationTypeConfigCustomSha256HmacSignature)
	}
	if d.typ == "DestinationTypeConfigBasicAuth" || d.DestinationTypeConfigBasicAuth != nil {
		return visitor.VisitDestinationTypeConfigBasicAuth(d.DestinationTypeConfigBasicAuth)
	}
	if d.typ == "DestinationTypeConfigApiKey" || d.DestinationTypeConfigApiKey != nil {
		return visitor.VisitDestinationTypeConfigApiKey(d.DestinationTypeConfigApiKey)
	}
	if d.typ == "DestinationTypeConfigBearerToken" || d.DestinationTypeConfigBearerToken != nil {
		return visitor.VisitDestinationTypeConfigBearerToken(d.DestinationTypeConfigBearerToken)
	}
	if d.typ == "DestinationTypeConfigOAuth2ClientCredentials" || d.DestinationTypeConfigOAuth2ClientCredentials != nil {
		return visitor.VisitDestinationTypeConfigOAuth2ClientCredentials(d.DestinationTypeConfigOAuth2ClientCredentials)
	}
	if d.typ == "DestinationTypeConfigOAuth2AuthorizationCode" || d.DestinationTypeConfigOAuth2AuthorizationCode != nil {
		return visitor.VisitDestinationTypeConfigOAuth2AuthorizationCode(d.DestinationTypeConfigOAuth2AuthorizationCode)
	}
	if d.typ == "DestinationTypeConfigAwsSignature" || d.DestinationTypeConfigAwsSignature != nil {
		return visitor.VisitDestinationTypeConfigAwsSignature(d.DestinationTypeConfigAwsSignature)
	}
	if d.typ == "DestinationTypeConfigHttp" || d.DestinationTypeConfigHttp != nil {
		return visitor.VisitDestinationTypeConfigHttp(d.DestinationTypeConfigHttp)
	}
	if d.typ == "DestinationTypeConfigCli" || d.DestinationTypeConfigCli != nil {
		return visitor.VisitDestinationTypeConfigCli(d.DestinationTypeConfigCli)
	}
	if d.typ == "DestinationTypeConfigMockApi" || d.DestinationTypeConfigMockApi != nil {
		return visitor.VisitDestinationTypeConfigMockApi(d.DestinationTypeConfigMockApi)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", d)
}

// HTTP method used on requests sent to the destination, overrides the method used on requests sent to the source.
type DestinationHttpMethod string

const (
	DestinationHttpMethodGet    DestinationHttpMethod = "GET"
	DestinationHttpMethodPost   DestinationHttpMethod = "POST"
	DestinationHttpMethodPut    DestinationHttpMethod = "PUT"
	DestinationHttpMethodPatch  DestinationHttpMethod = "PATCH"
	DestinationHttpMethodDelete DestinationHttpMethod = "DELETE"
)

func NewDestinationHttpMethodFromString(s string) (DestinationHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationHttpMethodGet, nil
	case "POST":
		return DestinationHttpMethodPost, nil
	case "PUT":
		return DestinationHttpMethodPut, nil
	case "PATCH":
		return DestinationHttpMethodPatch, nil
	case "DELETE":
		return DestinationHttpMethodDelete, nil
	}
	var t DestinationHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationHttpMethod) Ptr() *DestinationHttpMethod {
	return &d
}

// Period to rate limit events by. Refered as Delivery Rate period in the dashboard and documentation.
type DestinationRateLimitPeriod string

const (
	DestinationRateLimitPeriodSecond     DestinationRateLimitPeriod = "second"
	DestinationRateLimitPeriodMinute     DestinationRateLimitPeriod = "minute"
	DestinationRateLimitPeriodHour       DestinationRateLimitPeriod = "hour"
	DestinationRateLimitPeriodConcurrent DestinationRateLimitPeriod = "concurrent"
)

func NewDestinationRateLimitPeriodFromString(s string) (DestinationRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationRateLimitPeriodSecond, nil
	case "minute":
		return DestinationRateLimitPeriodMinute, nil
	case "hour":
		return DestinationRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationRateLimitPeriodConcurrent, nil
	}
	var t DestinationRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationRateLimitPeriod) Ptr() *DestinationRateLimitPeriod {
	return &d
}

// The type config for API Key. Requires type to be `API_KEY`.
type DestinationTypeConfigApiKey struct {
	Type                   *string                                     `json:"type,omitempty" url:"type,omitempty"`
	Url                    *string                                     `json:"url,omitempty" url:"url,omitempty"`
	RateLimit              *float64                                    `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod        *DestinationTypeConfigApiKeyRateLimitPeriod `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	PathForwardingDisabled *bool                                       `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigApiKeyHttpMethod      `json:"http_method,omitempty" url:"http_method,omitempty"`
	Auth                   *DestinationTypeConfigApiKeyAuth            `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigApiKey) GetUrl() *string {
	if d == nil {
		return nil
	}
	return d.Url
}

func (d *DestinationTypeConfigApiKey) GetRateLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *DestinationTypeConfigApiKey) GetRateLimitPeriod() *DestinationTypeConfigApiKeyRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *DestinationTypeConfigApiKey) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigApiKey) GetHttpMethod() *DestinationTypeConfigApiKeyHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigApiKey) GetAuth() *DestinationTypeConfigApiKeyAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigApiKey) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigApiKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigApiKey) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigApiKeyAuth struct {
	Key    string                            `json:"key" url:"key"`
	ApiKey string                            `json:"api_key" url:"api_key"`
	To     DestinationTypeConfigApiKeyAuthTo `json:"to" url:"to"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigApiKeyAuth) GetKey() string {
	if d == nil {
		return ""
	}
	return d.Key
}

func (d *DestinationTypeConfigApiKeyAuth) GetApiKey() string {
	if d == nil {
		return ""
	}
	return d.ApiKey
}

func (d *DestinationTypeConfigApiKeyAuth) GetTo() DestinationTypeConfigApiKeyAuthTo {
	if d == nil {
		return ""
	}
	return d.To
}

func (d *DestinationTypeConfigApiKeyAuth) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigApiKeyAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigApiKeyAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigApiKeyAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigApiKeyAuth) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigApiKeyAuthTo string

const (
	DestinationTypeConfigApiKeyAuthToHeader DestinationTypeConfigApiKeyAuthTo = "header"
	DestinationTypeConfigApiKeyAuthToQuery  DestinationTypeConfigApiKeyAuthTo = "query"
)

func NewDestinationTypeConfigApiKeyAuthToFromString(s string) (DestinationTypeConfigApiKeyAuthTo, error) {
	switch s {
	case "header":
		return DestinationTypeConfigApiKeyAuthToHeader, nil
	case "query":
		return DestinationTypeConfigApiKeyAuthToQuery, nil
	}
	var t DestinationTypeConfigApiKeyAuthTo
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigApiKeyAuthTo) Ptr() *DestinationTypeConfigApiKeyAuthTo {
	return &d
}

type DestinationTypeConfigApiKeyHttpMethod string

const (
	DestinationTypeConfigApiKeyHttpMethodGet    DestinationTypeConfigApiKeyHttpMethod = "GET"
	DestinationTypeConfigApiKeyHttpMethodPost   DestinationTypeConfigApiKeyHttpMethod = "POST"
	DestinationTypeConfigApiKeyHttpMethodPut    DestinationTypeConfigApiKeyHttpMethod = "PUT"
	DestinationTypeConfigApiKeyHttpMethodPatch  DestinationTypeConfigApiKeyHttpMethod = "PATCH"
	DestinationTypeConfigApiKeyHttpMethodDelete DestinationTypeConfigApiKeyHttpMethod = "DELETE"
)

func NewDestinationTypeConfigApiKeyHttpMethodFromString(s string) (DestinationTypeConfigApiKeyHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigApiKeyHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigApiKeyHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigApiKeyHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigApiKeyHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigApiKeyHttpMethodDelete, nil
	}
	var t DestinationTypeConfigApiKeyHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigApiKeyHttpMethod) Ptr() *DestinationTypeConfigApiKeyHttpMethod {
	return &d
}

type DestinationTypeConfigApiKeyRateLimitPeriod string

const (
	DestinationTypeConfigApiKeyRateLimitPeriodSecond     DestinationTypeConfigApiKeyRateLimitPeriod = "second"
	DestinationTypeConfigApiKeyRateLimitPeriodMinute     DestinationTypeConfigApiKeyRateLimitPeriod = "minute"
	DestinationTypeConfigApiKeyRateLimitPeriodHour       DestinationTypeConfigApiKeyRateLimitPeriod = "hour"
	DestinationTypeConfigApiKeyRateLimitPeriodConcurrent DestinationTypeConfigApiKeyRateLimitPeriod = "concurrent"
)

func NewDestinationTypeConfigApiKeyRateLimitPeriodFromString(s string) (DestinationTypeConfigApiKeyRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationTypeConfigApiKeyRateLimitPeriodSecond, nil
	case "minute":
		return DestinationTypeConfigApiKeyRateLimitPeriodMinute, nil
	case "hour":
		return DestinationTypeConfigApiKeyRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationTypeConfigApiKeyRateLimitPeriodConcurrent, nil
	}
	var t DestinationTypeConfigApiKeyRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigApiKeyRateLimitPeriod) Ptr() *DestinationTypeConfigApiKeyRateLimitPeriod {
	return &d
}

// The type config for AWS Signature. Requires type to be `AWS_SIGNATURE`.
type DestinationTypeConfigAwsSignature struct {
	Type                   *string                                           `json:"type,omitempty" url:"type,omitempty"`
	Url                    *string                                           `json:"url,omitempty" url:"url,omitempty"`
	RateLimit              *float64                                          `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod        *DestinationTypeConfigAwsSignatureRateLimitPeriod `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	PathForwardingDisabled *bool                                             `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigAwsSignatureHttpMethod      `json:"http_method,omitempty" url:"http_method,omitempty"`
	Auth                   *DestinationTypeConfigAwsSignatureAuth            `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigAwsSignature) GetUrl() *string {
	if d == nil {
		return nil
	}
	return d.Url
}

func (d *DestinationTypeConfigAwsSignature) GetRateLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *DestinationTypeConfigAwsSignature) GetRateLimitPeriod() *DestinationTypeConfigAwsSignatureRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *DestinationTypeConfigAwsSignature) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigAwsSignature) GetHttpMethod() *DestinationTypeConfigAwsSignatureHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigAwsSignature) GetAuth() *DestinationTypeConfigAwsSignatureAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigAwsSignature) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigAwsSignature) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigAwsSignature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigAwsSignature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigAwsSignature) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigAwsSignatureAuth struct {
	AccessKeyId     string `json:"access_key_id" url:"access_key_id"`
	SecretAccessKey string `json:"secret_access_key" url:"secret_access_key"`
	Region          string `json:"region" url:"region"`
	Service         string `json:"service" url:"service"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigAwsSignatureAuth) GetAccessKeyId() string {
	if d == nil {
		return ""
	}
	return d.AccessKeyId
}

func (d *DestinationTypeConfigAwsSignatureAuth) GetSecretAccessKey() string {
	if d == nil {
		return ""
	}
	return d.SecretAccessKey
}

func (d *DestinationTypeConfigAwsSignatureAuth) GetRegion() string {
	if d == nil {
		return ""
	}
	return d.Region
}

func (d *DestinationTypeConfigAwsSignatureAuth) GetService() string {
	if d == nil {
		return ""
	}
	return d.Service
}

func (d *DestinationTypeConfigAwsSignatureAuth) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigAwsSignatureAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigAwsSignatureAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigAwsSignatureAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigAwsSignatureAuth) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigAwsSignatureHttpMethod string

const (
	DestinationTypeConfigAwsSignatureHttpMethodGet    DestinationTypeConfigAwsSignatureHttpMethod = "GET"
	DestinationTypeConfigAwsSignatureHttpMethodPost   DestinationTypeConfigAwsSignatureHttpMethod = "POST"
	DestinationTypeConfigAwsSignatureHttpMethodPut    DestinationTypeConfigAwsSignatureHttpMethod = "PUT"
	DestinationTypeConfigAwsSignatureHttpMethodPatch  DestinationTypeConfigAwsSignatureHttpMethod = "PATCH"
	DestinationTypeConfigAwsSignatureHttpMethodDelete DestinationTypeConfigAwsSignatureHttpMethod = "DELETE"
)

func NewDestinationTypeConfigAwsSignatureHttpMethodFromString(s string) (DestinationTypeConfigAwsSignatureHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigAwsSignatureHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigAwsSignatureHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigAwsSignatureHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigAwsSignatureHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigAwsSignatureHttpMethodDelete, nil
	}
	var t DestinationTypeConfigAwsSignatureHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigAwsSignatureHttpMethod) Ptr() *DestinationTypeConfigAwsSignatureHttpMethod {
	return &d
}

type DestinationTypeConfigAwsSignatureRateLimitPeriod string

const (
	DestinationTypeConfigAwsSignatureRateLimitPeriodSecond     DestinationTypeConfigAwsSignatureRateLimitPeriod = "second"
	DestinationTypeConfigAwsSignatureRateLimitPeriodMinute     DestinationTypeConfigAwsSignatureRateLimitPeriod = "minute"
	DestinationTypeConfigAwsSignatureRateLimitPeriodHour       DestinationTypeConfigAwsSignatureRateLimitPeriod = "hour"
	DestinationTypeConfigAwsSignatureRateLimitPeriodConcurrent DestinationTypeConfigAwsSignatureRateLimitPeriod = "concurrent"
)

func NewDestinationTypeConfigAwsSignatureRateLimitPeriodFromString(s string) (DestinationTypeConfigAwsSignatureRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationTypeConfigAwsSignatureRateLimitPeriodSecond, nil
	case "minute":
		return DestinationTypeConfigAwsSignatureRateLimitPeriodMinute, nil
	case "hour":
		return DestinationTypeConfigAwsSignatureRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationTypeConfigAwsSignatureRateLimitPeriodConcurrent, nil
	}
	var t DestinationTypeConfigAwsSignatureRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigAwsSignatureRateLimitPeriod) Ptr() *DestinationTypeConfigAwsSignatureRateLimitPeriod {
	return &d
}

// The type config for Basic Auth. Requires type to be `BASIC_AUTH`.
type DestinationTypeConfigBasicAuth struct {
	Type                   *string                                        `json:"type,omitempty" url:"type,omitempty"`
	Url                    *string                                        `json:"url,omitempty" url:"url,omitempty"`
	RateLimit              *float64                                       `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod        *DestinationTypeConfigBasicAuthRateLimitPeriod `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	PathForwardingDisabled *bool                                          `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigBasicAuthHttpMethod      `json:"http_method,omitempty" url:"http_method,omitempty"`
	Auth                   *DestinationTypeConfigBasicAuthAuth            `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigBasicAuth) GetUrl() *string {
	if d == nil {
		return nil
	}
	return d.Url
}

func (d *DestinationTypeConfigBasicAuth) GetRateLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *DestinationTypeConfigBasicAuth) GetRateLimitPeriod() *DestinationTypeConfigBasicAuthRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *DestinationTypeConfigBasicAuth) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigBasicAuth) GetHttpMethod() *DestinationTypeConfigBasicAuthHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigBasicAuth) GetAuth() *DestinationTypeConfigBasicAuthAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigBasicAuth) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigBasicAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigBasicAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigBasicAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigBasicAuth) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigBasicAuthAuth struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigBasicAuthAuth) GetUsername() *string {
	if d == nil {
		return nil
	}
	return d.Username
}

func (d *DestinationTypeConfigBasicAuthAuth) GetPassword() *string {
	if d == nil {
		return nil
	}
	return d.Password
}

func (d *DestinationTypeConfigBasicAuthAuth) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigBasicAuthAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigBasicAuthAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigBasicAuthAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigBasicAuthAuth) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigBasicAuthHttpMethod string

const (
	DestinationTypeConfigBasicAuthHttpMethodGet    DestinationTypeConfigBasicAuthHttpMethod = "GET"
	DestinationTypeConfigBasicAuthHttpMethodPost   DestinationTypeConfigBasicAuthHttpMethod = "POST"
	DestinationTypeConfigBasicAuthHttpMethodPut    DestinationTypeConfigBasicAuthHttpMethod = "PUT"
	DestinationTypeConfigBasicAuthHttpMethodPatch  DestinationTypeConfigBasicAuthHttpMethod = "PATCH"
	DestinationTypeConfigBasicAuthHttpMethodDelete DestinationTypeConfigBasicAuthHttpMethod = "DELETE"
)

func NewDestinationTypeConfigBasicAuthHttpMethodFromString(s string) (DestinationTypeConfigBasicAuthHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigBasicAuthHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigBasicAuthHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigBasicAuthHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigBasicAuthHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigBasicAuthHttpMethodDelete, nil
	}
	var t DestinationTypeConfigBasicAuthHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigBasicAuthHttpMethod) Ptr() *DestinationTypeConfigBasicAuthHttpMethod {
	return &d
}

type DestinationTypeConfigBasicAuthRateLimitPeriod string

const (
	DestinationTypeConfigBasicAuthRateLimitPeriodSecond     DestinationTypeConfigBasicAuthRateLimitPeriod = "second"
	DestinationTypeConfigBasicAuthRateLimitPeriodMinute     DestinationTypeConfigBasicAuthRateLimitPeriod = "minute"
	DestinationTypeConfigBasicAuthRateLimitPeriodHour       DestinationTypeConfigBasicAuthRateLimitPeriod = "hour"
	DestinationTypeConfigBasicAuthRateLimitPeriodConcurrent DestinationTypeConfigBasicAuthRateLimitPeriod = "concurrent"
)

func NewDestinationTypeConfigBasicAuthRateLimitPeriodFromString(s string) (DestinationTypeConfigBasicAuthRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationTypeConfigBasicAuthRateLimitPeriodSecond, nil
	case "minute":
		return DestinationTypeConfigBasicAuthRateLimitPeriodMinute, nil
	case "hour":
		return DestinationTypeConfigBasicAuthRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationTypeConfigBasicAuthRateLimitPeriodConcurrent, nil
	}
	var t DestinationTypeConfigBasicAuthRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigBasicAuthRateLimitPeriod) Ptr() *DestinationTypeConfigBasicAuthRateLimitPeriod {
	return &d
}

// The type config for Bearer Token. Requires type to be `BEARER_TOKEN`.
type DestinationTypeConfigBearerToken struct {
	Type                   *string                                          `json:"type,omitempty" url:"type,omitempty"`
	Url                    *string                                          `json:"url,omitempty" url:"url,omitempty"`
	RateLimit              *float64                                         `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod        *DestinationTypeConfigBearerTokenRateLimitPeriod `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	PathForwardingDisabled *bool                                            `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigBearerTokenHttpMethod      `json:"http_method,omitempty" url:"http_method,omitempty"`
	Auth                   *DestinationTypeConfigBearerTokenAuth            `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigBearerToken) GetUrl() *string {
	if d == nil {
		return nil
	}
	return d.Url
}

func (d *DestinationTypeConfigBearerToken) GetRateLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *DestinationTypeConfigBearerToken) GetRateLimitPeriod() *DestinationTypeConfigBearerTokenRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *DestinationTypeConfigBearerToken) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigBearerToken) GetHttpMethod() *DestinationTypeConfigBearerTokenHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigBearerToken) GetAuth() *DestinationTypeConfigBearerTokenAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigBearerToken) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigBearerToken) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigBearerToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigBearerToken(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigBearerToken) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigBearerTokenAuth struct {
	Token string `json:"token" url:"token"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigBearerTokenAuth) GetToken() string {
	if d == nil {
		return ""
	}
	return d.Token
}

func (d *DestinationTypeConfigBearerTokenAuth) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigBearerTokenAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigBearerTokenAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigBearerTokenAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigBearerTokenAuth) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigBearerTokenHttpMethod string

const (
	DestinationTypeConfigBearerTokenHttpMethodGet    DestinationTypeConfigBearerTokenHttpMethod = "GET"
	DestinationTypeConfigBearerTokenHttpMethodPost   DestinationTypeConfigBearerTokenHttpMethod = "POST"
	DestinationTypeConfigBearerTokenHttpMethodPut    DestinationTypeConfigBearerTokenHttpMethod = "PUT"
	DestinationTypeConfigBearerTokenHttpMethodPatch  DestinationTypeConfigBearerTokenHttpMethod = "PATCH"
	DestinationTypeConfigBearerTokenHttpMethodDelete DestinationTypeConfigBearerTokenHttpMethod = "DELETE"
)

func NewDestinationTypeConfigBearerTokenHttpMethodFromString(s string) (DestinationTypeConfigBearerTokenHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigBearerTokenHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigBearerTokenHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigBearerTokenHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigBearerTokenHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigBearerTokenHttpMethodDelete, nil
	}
	var t DestinationTypeConfigBearerTokenHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigBearerTokenHttpMethod) Ptr() *DestinationTypeConfigBearerTokenHttpMethod {
	return &d
}

type DestinationTypeConfigBearerTokenRateLimitPeriod string

const (
	DestinationTypeConfigBearerTokenRateLimitPeriodSecond     DestinationTypeConfigBearerTokenRateLimitPeriod = "second"
	DestinationTypeConfigBearerTokenRateLimitPeriodMinute     DestinationTypeConfigBearerTokenRateLimitPeriod = "minute"
	DestinationTypeConfigBearerTokenRateLimitPeriodHour       DestinationTypeConfigBearerTokenRateLimitPeriod = "hour"
	DestinationTypeConfigBearerTokenRateLimitPeriodConcurrent DestinationTypeConfigBearerTokenRateLimitPeriod = "concurrent"
)

func NewDestinationTypeConfigBearerTokenRateLimitPeriodFromString(s string) (DestinationTypeConfigBearerTokenRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationTypeConfigBearerTokenRateLimitPeriodSecond, nil
	case "minute":
		return DestinationTypeConfigBearerTokenRateLimitPeriodMinute, nil
	case "hour":
		return DestinationTypeConfigBearerTokenRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationTypeConfigBearerTokenRateLimitPeriodConcurrent, nil
	}
	var t DestinationTypeConfigBearerTokenRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigBearerTokenRateLimitPeriod) Ptr() *DestinationTypeConfigBearerTokenRateLimitPeriod {
	return &d
}

// The type config for CLI. Requires type to be `CLI`.
type DestinationTypeConfigCli struct {
	PathForwardingDisabled *bool                               `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigCliHttpMethod `json:"http_method,omitempty" url:"http_method,omitempty"`
	Auth                   *DestinationTypeConfigCliAuth       `json:"auth,omitempty" url:"auth,omitempty"`
	Configs                *DestinationTypeConfigCliConfigs    `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigCli) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigCli) GetHttpMethod() *DestinationTypeConfigCliHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigCli) GetAuth() *DestinationTypeConfigCliAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigCli) GetConfigs() *DestinationTypeConfigCliConfigs {
	if d == nil {
		return nil
	}
	return d.Configs
}

func (d *DestinationTypeConfigCli) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigCli) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigCli
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigCli(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigCli) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigCliAuth struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigCliAuth) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigCliAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigCliAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigCliAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigCliAuth) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigCliConfigs struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigCliConfigs) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigCliConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigCliConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigCliConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigCliConfigs) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigCliHttpMethod string

const (
	DestinationTypeConfigCliHttpMethodGet    DestinationTypeConfigCliHttpMethod = "GET"
	DestinationTypeConfigCliHttpMethodPost   DestinationTypeConfigCliHttpMethod = "POST"
	DestinationTypeConfigCliHttpMethodPut    DestinationTypeConfigCliHttpMethod = "PUT"
	DestinationTypeConfigCliHttpMethodPatch  DestinationTypeConfigCliHttpMethod = "PATCH"
	DestinationTypeConfigCliHttpMethodDelete DestinationTypeConfigCliHttpMethod = "DELETE"
)

func NewDestinationTypeConfigCliHttpMethodFromString(s string) (DestinationTypeConfigCliHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigCliHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigCliHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigCliHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigCliHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigCliHttpMethodDelete, nil
	}
	var t DestinationTypeConfigCliHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigCliHttpMethod) Ptr() *DestinationTypeConfigCliHttpMethod {
	return &d
}

// The type config for Custom SHA-256 HMAC Signature. Requires type to be `CUSTOM_SIGNATURE`.
type DestinationTypeConfigCustomSha256HmacSignature struct {
	Type                   *string                                                        `json:"type,omitempty" url:"type,omitempty"`
	Url                    *string                                                        `json:"url,omitempty" url:"url,omitempty"`
	RateLimit              *float64                                                       `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod        *DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriod `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	PathForwardingDisabled *bool                                                          `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigCustomSha256HmacSignatureHttpMethod      `json:"http_method,omitempty" url:"http_method,omitempty"`
	Auth                   *DestinationTypeConfigCustomSha256HmacSignatureAuth            `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigCustomSha256HmacSignature) GetUrl() *string {
	if d == nil {
		return nil
	}
	return d.Url
}

func (d *DestinationTypeConfigCustomSha256HmacSignature) GetRateLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *DestinationTypeConfigCustomSha256HmacSignature) GetRateLimitPeriod() *DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *DestinationTypeConfigCustomSha256HmacSignature) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigCustomSha256HmacSignature) GetHttpMethod() *DestinationTypeConfigCustomSha256HmacSignatureHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigCustomSha256HmacSignature) GetAuth() *DestinationTypeConfigCustomSha256HmacSignatureAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigCustomSha256HmacSignature) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigCustomSha256HmacSignature) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigCustomSha256HmacSignature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigCustomSha256HmacSignature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigCustomSha256HmacSignature) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigCustomSha256HmacSignatureAuth struct {
	Key           string `json:"key" url:"key"`
	SigningSecret string `json:"signing_secret" url:"signing_secret"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigCustomSha256HmacSignatureAuth) GetKey() string {
	if d == nil {
		return ""
	}
	return d.Key
}

func (d *DestinationTypeConfigCustomSha256HmacSignatureAuth) GetSigningSecret() string {
	if d == nil {
		return ""
	}
	return d.SigningSecret
}

func (d *DestinationTypeConfigCustomSha256HmacSignatureAuth) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigCustomSha256HmacSignatureAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigCustomSha256HmacSignatureAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigCustomSha256HmacSignatureAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigCustomSha256HmacSignatureAuth) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigCustomSha256HmacSignatureHttpMethod string

const (
	DestinationTypeConfigCustomSha256HmacSignatureHttpMethodGet    DestinationTypeConfigCustomSha256HmacSignatureHttpMethod = "GET"
	DestinationTypeConfigCustomSha256HmacSignatureHttpMethodPost   DestinationTypeConfigCustomSha256HmacSignatureHttpMethod = "POST"
	DestinationTypeConfigCustomSha256HmacSignatureHttpMethodPut    DestinationTypeConfigCustomSha256HmacSignatureHttpMethod = "PUT"
	DestinationTypeConfigCustomSha256HmacSignatureHttpMethodPatch  DestinationTypeConfigCustomSha256HmacSignatureHttpMethod = "PATCH"
	DestinationTypeConfigCustomSha256HmacSignatureHttpMethodDelete DestinationTypeConfigCustomSha256HmacSignatureHttpMethod = "DELETE"
)

func NewDestinationTypeConfigCustomSha256HmacSignatureHttpMethodFromString(s string) (DestinationTypeConfigCustomSha256HmacSignatureHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigCustomSha256HmacSignatureHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigCustomSha256HmacSignatureHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigCustomSha256HmacSignatureHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigCustomSha256HmacSignatureHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigCustomSha256HmacSignatureHttpMethodDelete, nil
	}
	var t DestinationTypeConfigCustomSha256HmacSignatureHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigCustomSha256HmacSignatureHttpMethod) Ptr() *DestinationTypeConfigCustomSha256HmacSignatureHttpMethod {
	return &d
}

type DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriod string

const (
	DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriodSecond     DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriod = "second"
	DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriodMinute     DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriod = "minute"
	DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriodHour       DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriod = "hour"
	DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriodConcurrent DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriod = "concurrent"
)

func NewDestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriodFromString(s string) (DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriodSecond, nil
	case "minute":
		return DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriodMinute, nil
	case "hour":
		return DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriodConcurrent, nil
	}
	var t DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriod) Ptr() *DestinationTypeConfigCustomSha256HmacSignatureRateLimitPeriod {
	return &d
}

// The type config for HTTP. Requires type to be `HTTP`.
type DestinationTypeConfigHttp struct {
	Url                    *string                                   `json:"url,omitempty" url:"url,omitempty"`
	RateLimit              *float64                                  `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod        *DestinationTypeConfigHttpRateLimitPeriod `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	PathForwardingDisabled *bool                                     `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigHttpHttpMethod      `json:"http_method,omitempty" url:"http_method,omitempty"`
	Configs                *DestinationTypeConfigHttpConfigs         `json:"configs,omitempty" url:"configs,omitempty"`
	Type                   *DestinationTypeConfigHttpType            `json:"type,omitempty" url:"type,omitempty"`
	Auth                   *DestinationTypeConfigHttpAuth            `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttp) GetUrl() *string {
	if d == nil {
		return nil
	}
	return d.Url
}

func (d *DestinationTypeConfigHttp) GetRateLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *DestinationTypeConfigHttp) GetRateLimitPeriod() *DestinationTypeConfigHttpRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *DestinationTypeConfigHttp) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigHttp) GetHttpMethod() *DestinationTypeConfigHttpHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigHttp) GetConfigs() *DestinationTypeConfigHttpConfigs {
	if d == nil {
		return nil
	}
	return d.Configs
}

func (d *DestinationTypeConfigHttp) GetType() *DestinationTypeConfigHttpType {
	if d == nil {
		return nil
	}
	return d.Type
}

func (d *DestinationTypeConfigHttp) GetAuth() *DestinationTypeConfigHttpAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigHttp) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttp) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttp) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuth struct {
	DestinationTypeConfigHttpAuthZero               *DestinationTypeConfigHttpAuthZero
	DestinationTypeConfigHttpAuthSigningSecret      *DestinationTypeConfigHttpAuthSigningSecret
	DestinationTypeConfigHttpAuthPassword           *DestinationTypeConfigHttpAuthPassword
	DestinationTypeConfigHttpAuthApiKey             *DestinationTypeConfigHttpAuthApiKey
	DestinationTypeConfigHttpAuthToken              *DestinationTypeConfigHttpAuthToken
	DestinationTypeConfigHttpAuthAuthenticationType *DestinationTypeConfigHttpAuthAuthenticationType
	DestinationTypeConfigHttpAuthRefreshToken       *DestinationTypeConfigHttpAuthRefreshToken
	DestinationTypeConfigHttpAuthAccessKeyId        *DestinationTypeConfigHttpAuthAccessKeyId

	typ string
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthZero(value *DestinationTypeConfigHttpAuthZero) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthZero", DestinationTypeConfigHttpAuthZero: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthSigningSecret(value *DestinationTypeConfigHttpAuthSigningSecret) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthSigningSecret", DestinationTypeConfigHttpAuthSigningSecret: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthPassword(value *DestinationTypeConfigHttpAuthPassword) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthPassword", DestinationTypeConfigHttpAuthPassword: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthApiKey(value *DestinationTypeConfigHttpAuthApiKey) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthApiKey", DestinationTypeConfigHttpAuthApiKey: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthToken(value *DestinationTypeConfigHttpAuthToken) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthToken", DestinationTypeConfigHttpAuthToken: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthAuthenticationType(value *DestinationTypeConfigHttpAuthAuthenticationType) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthAuthenticationType", DestinationTypeConfigHttpAuthAuthenticationType: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthRefreshToken(value *DestinationTypeConfigHttpAuthRefreshToken) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthRefreshToken", DestinationTypeConfigHttpAuthRefreshToken: value}
}

func NewDestinationTypeConfigHttpAuthFromDestinationTypeConfigHttpAuthAccessKeyId(value *DestinationTypeConfigHttpAuthAccessKeyId) *DestinationTypeConfigHttpAuth {
	return &DestinationTypeConfigHttpAuth{typ: "DestinationTypeConfigHttpAuthAccessKeyId", DestinationTypeConfigHttpAuthAccessKeyId: value}
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthZero() *DestinationTypeConfigHttpAuthZero {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthZero
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthSigningSecret() *DestinationTypeConfigHttpAuthSigningSecret {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthSigningSecret
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthPassword() *DestinationTypeConfigHttpAuthPassword {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthPassword
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthApiKey() *DestinationTypeConfigHttpAuthApiKey {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthApiKey
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthToken() *DestinationTypeConfigHttpAuthToken {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthToken
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthAuthenticationType() *DestinationTypeConfigHttpAuthAuthenticationType {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthAuthenticationType
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthRefreshToken() *DestinationTypeConfigHttpAuthRefreshToken {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthRefreshToken
}

func (d *DestinationTypeConfigHttpAuth) GetDestinationTypeConfigHttpAuthAccessKeyId() *DestinationTypeConfigHttpAuthAccessKeyId {
	if d == nil {
		return nil
	}
	return d.DestinationTypeConfigHttpAuthAccessKeyId
}

func (d *DestinationTypeConfigHttpAuth) UnmarshalJSON(data []byte) error {
	valueDestinationTypeConfigHttpAuthZero := new(DestinationTypeConfigHttpAuthZero)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthZero); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthZero"
		d.DestinationTypeConfigHttpAuthZero = valueDestinationTypeConfigHttpAuthZero
		return nil
	}
	valueDestinationTypeConfigHttpAuthSigningSecret := new(DestinationTypeConfigHttpAuthSigningSecret)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthSigningSecret); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthSigningSecret"
		d.DestinationTypeConfigHttpAuthSigningSecret = valueDestinationTypeConfigHttpAuthSigningSecret
		return nil
	}
	valueDestinationTypeConfigHttpAuthPassword := new(DestinationTypeConfigHttpAuthPassword)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthPassword); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthPassword"
		d.DestinationTypeConfigHttpAuthPassword = valueDestinationTypeConfigHttpAuthPassword
		return nil
	}
	valueDestinationTypeConfigHttpAuthApiKey := new(DestinationTypeConfigHttpAuthApiKey)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthApiKey); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthApiKey"
		d.DestinationTypeConfigHttpAuthApiKey = valueDestinationTypeConfigHttpAuthApiKey
		return nil
	}
	valueDestinationTypeConfigHttpAuthToken := new(DestinationTypeConfigHttpAuthToken)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthToken); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthToken"
		d.DestinationTypeConfigHttpAuthToken = valueDestinationTypeConfigHttpAuthToken
		return nil
	}
	valueDestinationTypeConfigHttpAuthAuthenticationType := new(DestinationTypeConfigHttpAuthAuthenticationType)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthAuthenticationType); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthAuthenticationType"
		d.DestinationTypeConfigHttpAuthAuthenticationType = valueDestinationTypeConfigHttpAuthAuthenticationType
		return nil
	}
	valueDestinationTypeConfigHttpAuthRefreshToken := new(DestinationTypeConfigHttpAuthRefreshToken)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthRefreshToken); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthRefreshToken"
		d.DestinationTypeConfigHttpAuthRefreshToken = valueDestinationTypeConfigHttpAuthRefreshToken
		return nil
	}
	valueDestinationTypeConfigHttpAuthAccessKeyId := new(DestinationTypeConfigHttpAuthAccessKeyId)
	if err := json.Unmarshal(data, &valueDestinationTypeConfigHttpAuthAccessKeyId); err == nil {
		d.typ = "DestinationTypeConfigHttpAuthAccessKeyId"
		d.DestinationTypeConfigHttpAuthAccessKeyId = valueDestinationTypeConfigHttpAuthAccessKeyId
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DestinationTypeConfigHttpAuth) MarshalJSON() ([]byte, error) {
	if d.typ == "DestinationTypeConfigHttpAuthZero" || d.DestinationTypeConfigHttpAuthZero != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthZero)
	}
	if d.typ == "DestinationTypeConfigHttpAuthSigningSecret" || d.DestinationTypeConfigHttpAuthSigningSecret != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthSigningSecret)
	}
	if d.typ == "DestinationTypeConfigHttpAuthPassword" || d.DestinationTypeConfigHttpAuthPassword != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthPassword)
	}
	if d.typ == "DestinationTypeConfigHttpAuthApiKey" || d.DestinationTypeConfigHttpAuthApiKey != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthApiKey)
	}
	if d.typ == "DestinationTypeConfigHttpAuthToken" || d.DestinationTypeConfigHttpAuthToken != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthToken)
	}
	if d.typ == "DestinationTypeConfigHttpAuthAuthenticationType" || d.DestinationTypeConfigHttpAuthAuthenticationType != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthAuthenticationType)
	}
	if d.typ == "DestinationTypeConfigHttpAuthRefreshToken" || d.DestinationTypeConfigHttpAuthRefreshToken != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthRefreshToken)
	}
	if d.typ == "DestinationTypeConfigHttpAuthAccessKeyId" || d.DestinationTypeConfigHttpAuthAccessKeyId != nil {
		return json.Marshal(d.DestinationTypeConfigHttpAuthAccessKeyId)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DestinationTypeConfigHttpAuthVisitor interface {
	VisitDestinationTypeConfigHttpAuthZero(*DestinationTypeConfigHttpAuthZero) error
	VisitDestinationTypeConfigHttpAuthSigningSecret(*DestinationTypeConfigHttpAuthSigningSecret) error
	VisitDestinationTypeConfigHttpAuthPassword(*DestinationTypeConfigHttpAuthPassword) error
	VisitDestinationTypeConfigHttpAuthApiKey(*DestinationTypeConfigHttpAuthApiKey) error
	VisitDestinationTypeConfigHttpAuthToken(*DestinationTypeConfigHttpAuthToken) error
	VisitDestinationTypeConfigHttpAuthAuthenticationType(*DestinationTypeConfigHttpAuthAuthenticationType) error
	VisitDestinationTypeConfigHttpAuthRefreshToken(*DestinationTypeConfigHttpAuthRefreshToken) error
	VisitDestinationTypeConfigHttpAuthAccessKeyId(*DestinationTypeConfigHttpAuthAccessKeyId) error
}

func (d *DestinationTypeConfigHttpAuth) Accept(visitor DestinationTypeConfigHttpAuthVisitor) error {
	if d.typ == "DestinationTypeConfigHttpAuthZero" || d.DestinationTypeConfigHttpAuthZero != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthZero(d.DestinationTypeConfigHttpAuthZero)
	}
	if d.typ == "DestinationTypeConfigHttpAuthSigningSecret" || d.DestinationTypeConfigHttpAuthSigningSecret != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthSigningSecret(d.DestinationTypeConfigHttpAuthSigningSecret)
	}
	if d.typ == "DestinationTypeConfigHttpAuthPassword" || d.DestinationTypeConfigHttpAuthPassword != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthPassword(d.DestinationTypeConfigHttpAuthPassword)
	}
	if d.typ == "DestinationTypeConfigHttpAuthApiKey" || d.DestinationTypeConfigHttpAuthApiKey != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthApiKey(d.DestinationTypeConfigHttpAuthApiKey)
	}
	if d.typ == "DestinationTypeConfigHttpAuthToken" || d.DestinationTypeConfigHttpAuthToken != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthToken(d.DestinationTypeConfigHttpAuthToken)
	}
	if d.typ == "DestinationTypeConfigHttpAuthAuthenticationType" || d.DestinationTypeConfigHttpAuthAuthenticationType != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthAuthenticationType(d.DestinationTypeConfigHttpAuthAuthenticationType)
	}
	if d.typ == "DestinationTypeConfigHttpAuthRefreshToken" || d.DestinationTypeConfigHttpAuthRefreshToken != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthRefreshToken(d.DestinationTypeConfigHttpAuthRefreshToken)
	}
	if d.typ == "DestinationTypeConfigHttpAuthAccessKeyId" || d.DestinationTypeConfigHttpAuthAccessKeyId != nil {
		return visitor.VisitDestinationTypeConfigHttpAuthAccessKeyId(d.DestinationTypeConfigHttpAuthAccessKeyId)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DestinationTypeConfigHttpAuthAccessKeyId struct {
	AccessKeyId     string `json:"access_key_id" url:"access_key_id"`
	SecretAccessKey string `json:"secret_access_key" url:"secret_access_key"`
	Region          string `json:"region" url:"region"`
	Service         string `json:"service" url:"service"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) GetAccessKeyId() string {
	if d == nil {
		return ""
	}
	return d.AccessKeyId
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) GetSecretAccessKey() string {
	if d == nil {
		return ""
	}
	return d.SecretAccessKey
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) GetRegion() string {
	if d == nil {
		return ""
	}
	return d.Region
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) GetService() string {
	if d == nil {
		return ""
	}
	return d.Service
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthAccessKeyId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthAccessKeyId(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthAccessKeyId) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthApiKey struct {
	Key    string                                `json:"key" url:"key"`
	ApiKey string                                `json:"api_key" url:"api_key"`
	To     DestinationTypeConfigHttpAuthApiKeyTo `json:"to" url:"to"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthApiKey) GetKey() string {
	if d == nil {
		return ""
	}
	return d.Key
}

func (d *DestinationTypeConfigHttpAuthApiKey) GetApiKey() string {
	if d == nil {
		return ""
	}
	return d.ApiKey
}

func (d *DestinationTypeConfigHttpAuthApiKey) GetTo() DestinationTypeConfigHttpAuthApiKeyTo {
	if d == nil {
		return ""
	}
	return d.To
}

func (d *DestinationTypeConfigHttpAuthApiKey) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthApiKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthApiKey) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthApiKeyTo string

const (
	DestinationTypeConfigHttpAuthApiKeyToHeader DestinationTypeConfigHttpAuthApiKeyTo = "header"
	DestinationTypeConfigHttpAuthApiKeyToQuery  DestinationTypeConfigHttpAuthApiKeyTo = "query"
)

func NewDestinationTypeConfigHttpAuthApiKeyToFromString(s string) (DestinationTypeConfigHttpAuthApiKeyTo, error) {
	switch s {
	case "header":
		return DestinationTypeConfigHttpAuthApiKeyToHeader, nil
	case "query":
		return DestinationTypeConfigHttpAuthApiKeyToQuery, nil
	}
	var t DestinationTypeConfigHttpAuthApiKeyTo
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigHttpAuthApiKeyTo) Ptr() *DestinationTypeConfigHttpAuthApiKeyTo {
	return &d
}

type DestinationTypeConfigHttpAuthAuthenticationType struct {
	AuthServer         string                                                            `json:"auth_server" url:"auth_server"`
	ClientId           string                                                            `json:"client_id" url:"client_id"`
	ClientSecret       string                                                            `json:"client_secret" url:"client_secret"`
	Scope              string                                                            `json:"scope" url:"scope"`
	AuthenticationType DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType `json:"authentication_type" url:"authentication_type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) GetAuthServer() string {
	if d == nil {
		return ""
	}
	return d.AuthServer
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) GetClientId() string {
	if d == nil {
		return ""
	}
	return d.ClientId
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) GetClientSecret() string {
	if d == nil {
		return ""
	}
	return d.ClientSecret
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) GetScope() string {
	if d == nil {
		return ""
	}
	return d.Scope
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) GetAuthenticationType() DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType {
	if d == nil {
		return ""
	}
	return d.AuthenticationType
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthAuthenticationType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthAuthenticationType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthAuthenticationType) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType string

const (
	DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeBasic              DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType = "basic"
	DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeBearer             DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType = "bearer"
	DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeXWwwFormUrlencoded DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType = "x-www-form-urlencoded"
)

func NewDestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeFromString(s string) (DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType, error) {
	switch s {
	case "basic":
		return DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeBasic, nil
	case "bearer":
		return DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeBearer, nil
	case "x-www-form-urlencoded":
		return DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationTypeXWwwFormUrlencoded, nil
	}
	var t DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType) Ptr() *DestinationTypeConfigHttpAuthAuthenticationTypeAuthenticationType {
	return &d
}

type DestinationTypeConfigHttpAuthPassword struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthPassword) GetUsername() *string {
	if d == nil {
		return nil
	}
	return d.Username
}

func (d *DestinationTypeConfigHttpAuthPassword) GetPassword() *string {
	if d == nil {
		return nil
	}
	return d.Password
}

func (d *DestinationTypeConfigHttpAuthPassword) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthPassword) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthPassword
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthPassword(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthPassword) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthRefreshToken struct {
	AuthServer   string `json:"auth_server" url:"auth_server"`
	ClientId     string `json:"client_id" url:"client_id"`
	ClientSecret string `json:"client_secret" url:"client_secret"`
	RefreshToken string `json:"refresh_token" url:"refresh_token"`
	Scope        string `json:"scope" url:"scope"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) GetAuthServer() string {
	if d == nil {
		return ""
	}
	return d.AuthServer
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) GetClientId() string {
	if d == nil {
		return ""
	}
	return d.ClientId
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) GetClientSecret() string {
	if d == nil {
		return ""
	}
	return d.ClientSecret
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) GetRefreshToken() string {
	if d == nil {
		return ""
	}
	return d.RefreshToken
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) GetScope() string {
	if d == nil {
		return ""
	}
	return d.Scope
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthRefreshToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthRefreshToken(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthRefreshToken) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthSigningSecret struct {
	Key           string `json:"key" url:"key"`
	SigningSecret string `json:"signing_secret" url:"signing_secret"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthSigningSecret) GetKey() string {
	if d == nil {
		return ""
	}
	return d.Key
}

func (d *DestinationTypeConfigHttpAuthSigningSecret) GetSigningSecret() string {
	if d == nil {
		return ""
	}
	return d.SigningSecret
}

func (d *DestinationTypeConfigHttpAuthSigningSecret) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthSigningSecret) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthSigningSecret
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthSigningSecret(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthSigningSecret) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthToken struct {
	Token string `json:"token" url:"token"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthToken) GetToken() string {
	if d == nil {
		return ""
	}
	return d.Token
}

func (d *DestinationTypeConfigHttpAuthToken) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthToken) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthToken
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthToken(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthToken) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpAuthZero struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpAuthZero) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpAuthZero) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpAuthZero
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpAuthZero(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpAuthZero) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpConfigs struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigHttpConfigs) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigHttpConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigHttpConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigHttpConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigHttpConfigs) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigHttpHttpMethod string

const (
	DestinationTypeConfigHttpHttpMethodGet    DestinationTypeConfigHttpHttpMethod = "GET"
	DestinationTypeConfigHttpHttpMethodPost   DestinationTypeConfigHttpHttpMethod = "POST"
	DestinationTypeConfigHttpHttpMethodPut    DestinationTypeConfigHttpHttpMethod = "PUT"
	DestinationTypeConfigHttpHttpMethodPatch  DestinationTypeConfigHttpHttpMethod = "PATCH"
	DestinationTypeConfigHttpHttpMethodDelete DestinationTypeConfigHttpHttpMethod = "DELETE"
)

func NewDestinationTypeConfigHttpHttpMethodFromString(s string) (DestinationTypeConfigHttpHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigHttpHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigHttpHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigHttpHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigHttpHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigHttpHttpMethodDelete, nil
	}
	var t DestinationTypeConfigHttpHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigHttpHttpMethod) Ptr() *DestinationTypeConfigHttpHttpMethod {
	return &d
}

type DestinationTypeConfigHttpRateLimitPeriod string

const (
	DestinationTypeConfigHttpRateLimitPeriodSecond     DestinationTypeConfigHttpRateLimitPeriod = "second"
	DestinationTypeConfigHttpRateLimitPeriodMinute     DestinationTypeConfigHttpRateLimitPeriod = "minute"
	DestinationTypeConfigHttpRateLimitPeriodHour       DestinationTypeConfigHttpRateLimitPeriod = "hour"
	DestinationTypeConfigHttpRateLimitPeriodConcurrent DestinationTypeConfigHttpRateLimitPeriod = "concurrent"
)

func NewDestinationTypeConfigHttpRateLimitPeriodFromString(s string) (DestinationTypeConfigHttpRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationTypeConfigHttpRateLimitPeriodSecond, nil
	case "minute":
		return DestinationTypeConfigHttpRateLimitPeriodMinute, nil
	case "hour":
		return DestinationTypeConfigHttpRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationTypeConfigHttpRateLimitPeriodConcurrent, nil
	}
	var t DestinationTypeConfigHttpRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigHttpRateLimitPeriod) Ptr() *DestinationTypeConfigHttpRateLimitPeriod {
	return &d
}

type DestinationTypeConfigHttpType string

const (
	DestinationTypeConfigHttpTypeHookdeckSignature       DestinationTypeConfigHttpType = "HOOKDECK_SIGNATURE"
	DestinationTypeConfigHttpTypeCustomSignature         DestinationTypeConfigHttpType = "CUSTOM_SIGNATURE"
	DestinationTypeConfigHttpTypeBasicAuth               DestinationTypeConfigHttpType = "BASIC_AUTH"
	DestinationTypeConfigHttpTypeApiKey                  DestinationTypeConfigHttpType = "API_KEY"
	DestinationTypeConfigHttpTypeBearerToken             DestinationTypeConfigHttpType = "BEARER_TOKEN"
	DestinationTypeConfigHttpTypeOauth2ClientCredentials DestinationTypeConfigHttpType = "OAUTH2_CLIENT_CREDENTIALS"
	DestinationTypeConfigHttpTypeOauth2AuthorizationCode DestinationTypeConfigHttpType = "OAUTH2_AUTHORIZATION_CODE"
	DestinationTypeConfigHttpTypeAwsSignature            DestinationTypeConfigHttpType = "AWS_SIGNATURE"
)

func NewDestinationTypeConfigHttpTypeFromString(s string) (DestinationTypeConfigHttpType, error) {
	switch s {
	case "HOOKDECK_SIGNATURE":
		return DestinationTypeConfigHttpTypeHookdeckSignature, nil
	case "CUSTOM_SIGNATURE":
		return DestinationTypeConfigHttpTypeCustomSignature, nil
	case "BASIC_AUTH":
		return DestinationTypeConfigHttpTypeBasicAuth, nil
	case "API_KEY":
		return DestinationTypeConfigHttpTypeApiKey, nil
	case "BEARER_TOKEN":
		return DestinationTypeConfigHttpTypeBearerToken, nil
	case "OAUTH2_CLIENT_CREDENTIALS":
		return DestinationTypeConfigHttpTypeOauth2ClientCredentials, nil
	case "OAUTH2_AUTHORIZATION_CODE":
		return DestinationTypeConfigHttpTypeOauth2AuthorizationCode, nil
	case "AWS_SIGNATURE":
		return DestinationTypeConfigHttpTypeAwsSignature, nil
	}
	var t DestinationTypeConfigHttpType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigHttpType) Ptr() *DestinationTypeConfigHttpType {
	return &d
}

// The type config for Mock API. Requires type to be `MOCK_API`.
type DestinationTypeConfigMockApi struct {
	RateLimit              *float64                                     `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod        *DestinationTypeConfigMockApiRateLimitPeriod `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	PathForwardingDisabled *bool                                        `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigMockApiHttpMethod      `json:"http_method,omitempty" url:"http_method,omitempty"`
	Auth                   *DestinationTypeConfigMockApiAuth            `json:"auth,omitempty" url:"auth,omitempty"`
	Configs                *DestinationTypeConfigMockApiConfigs         `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigMockApi) GetRateLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *DestinationTypeConfigMockApi) GetRateLimitPeriod() *DestinationTypeConfigMockApiRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *DestinationTypeConfigMockApi) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigMockApi) GetHttpMethod() *DestinationTypeConfigMockApiHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigMockApi) GetAuth() *DestinationTypeConfigMockApiAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigMockApi) GetConfigs() *DestinationTypeConfigMockApiConfigs {
	if d == nil {
		return nil
	}
	return d.Configs
}

func (d *DestinationTypeConfigMockApi) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigMockApi) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigMockApi
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigMockApi(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigMockApi) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigMockApiAuth struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigMockApiAuth) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigMockApiAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigMockApiAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigMockApiAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigMockApiAuth) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigMockApiConfigs struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigMockApiConfigs) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigMockApiConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigMockApiConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigMockApiConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigMockApiConfigs) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigMockApiHttpMethod string

const (
	DestinationTypeConfigMockApiHttpMethodGet    DestinationTypeConfigMockApiHttpMethod = "GET"
	DestinationTypeConfigMockApiHttpMethodPost   DestinationTypeConfigMockApiHttpMethod = "POST"
	DestinationTypeConfigMockApiHttpMethodPut    DestinationTypeConfigMockApiHttpMethod = "PUT"
	DestinationTypeConfigMockApiHttpMethodPatch  DestinationTypeConfigMockApiHttpMethod = "PATCH"
	DestinationTypeConfigMockApiHttpMethodDelete DestinationTypeConfigMockApiHttpMethod = "DELETE"
)

func NewDestinationTypeConfigMockApiHttpMethodFromString(s string) (DestinationTypeConfigMockApiHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigMockApiHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigMockApiHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigMockApiHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigMockApiHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigMockApiHttpMethodDelete, nil
	}
	var t DestinationTypeConfigMockApiHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigMockApiHttpMethod) Ptr() *DestinationTypeConfigMockApiHttpMethod {
	return &d
}

type DestinationTypeConfigMockApiRateLimitPeriod string

const (
	DestinationTypeConfigMockApiRateLimitPeriodSecond     DestinationTypeConfigMockApiRateLimitPeriod = "second"
	DestinationTypeConfigMockApiRateLimitPeriodMinute     DestinationTypeConfigMockApiRateLimitPeriod = "minute"
	DestinationTypeConfigMockApiRateLimitPeriodHour       DestinationTypeConfigMockApiRateLimitPeriod = "hour"
	DestinationTypeConfigMockApiRateLimitPeriodConcurrent DestinationTypeConfigMockApiRateLimitPeriod = "concurrent"
)

func NewDestinationTypeConfigMockApiRateLimitPeriodFromString(s string) (DestinationTypeConfigMockApiRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationTypeConfigMockApiRateLimitPeriodSecond, nil
	case "minute":
		return DestinationTypeConfigMockApiRateLimitPeriodMinute, nil
	case "hour":
		return DestinationTypeConfigMockApiRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationTypeConfigMockApiRateLimitPeriodConcurrent, nil
	}
	var t DestinationTypeConfigMockApiRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigMockApiRateLimitPeriod) Ptr() *DestinationTypeConfigMockApiRateLimitPeriod {
	return &d
}

// The type config for OAuth2 (Authorization Code). Requires type to be `OAUTH2_AUTHORIZATION_CODE`.
type DestinationTypeConfigOAuth2AuthorizationCode struct {
	Type                   *string                                                      `json:"type,omitempty" url:"type,omitempty"`
	Url                    *string                                                      `json:"url,omitempty" url:"url,omitempty"`
	RateLimit              *float64                                                     `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod        *DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriod `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	PathForwardingDisabled *bool                                                        `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigOAuth2AuthorizationCodeHttpMethod      `json:"http_method,omitempty" url:"http_method,omitempty"`
	Auth                   *DestinationTypeConfigOAuth2AuthorizationCodeAuth            `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigOAuth2AuthorizationCode) GetUrl() *string {
	if d == nil {
		return nil
	}
	return d.Url
}

func (d *DestinationTypeConfigOAuth2AuthorizationCode) GetRateLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *DestinationTypeConfigOAuth2AuthorizationCode) GetRateLimitPeriod() *DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *DestinationTypeConfigOAuth2AuthorizationCode) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigOAuth2AuthorizationCode) GetHttpMethod() *DestinationTypeConfigOAuth2AuthorizationCodeHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigOAuth2AuthorizationCode) GetAuth() *DestinationTypeConfigOAuth2AuthorizationCodeAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigOAuth2AuthorizationCode) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigOAuth2AuthorizationCode) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigOAuth2AuthorizationCode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigOAuth2AuthorizationCode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigOAuth2AuthorizationCode) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigOAuth2AuthorizationCodeAuth struct {
	AuthServer   string `json:"auth_server" url:"auth_server"`
	ClientId     string `json:"client_id" url:"client_id"`
	ClientSecret string `json:"client_secret" url:"client_secret"`
	RefreshToken string `json:"refresh_token" url:"refresh_token"`
	Scope        string `json:"scope" url:"scope"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigOAuth2AuthorizationCodeAuth) GetAuthServer() string {
	if d == nil {
		return ""
	}
	return d.AuthServer
}

func (d *DestinationTypeConfigOAuth2AuthorizationCodeAuth) GetClientId() string {
	if d == nil {
		return ""
	}
	return d.ClientId
}

func (d *DestinationTypeConfigOAuth2AuthorizationCodeAuth) GetClientSecret() string {
	if d == nil {
		return ""
	}
	return d.ClientSecret
}

func (d *DestinationTypeConfigOAuth2AuthorizationCodeAuth) GetRefreshToken() string {
	if d == nil {
		return ""
	}
	return d.RefreshToken
}

func (d *DestinationTypeConfigOAuth2AuthorizationCodeAuth) GetScope() string {
	if d == nil {
		return ""
	}
	return d.Scope
}

func (d *DestinationTypeConfigOAuth2AuthorizationCodeAuth) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigOAuth2AuthorizationCodeAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigOAuth2AuthorizationCodeAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigOAuth2AuthorizationCodeAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigOAuth2AuthorizationCodeAuth) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigOAuth2AuthorizationCodeHttpMethod string

const (
	DestinationTypeConfigOAuth2AuthorizationCodeHttpMethodGet    DestinationTypeConfigOAuth2AuthorizationCodeHttpMethod = "GET"
	DestinationTypeConfigOAuth2AuthorizationCodeHttpMethodPost   DestinationTypeConfigOAuth2AuthorizationCodeHttpMethod = "POST"
	DestinationTypeConfigOAuth2AuthorizationCodeHttpMethodPut    DestinationTypeConfigOAuth2AuthorizationCodeHttpMethod = "PUT"
	DestinationTypeConfigOAuth2AuthorizationCodeHttpMethodPatch  DestinationTypeConfigOAuth2AuthorizationCodeHttpMethod = "PATCH"
	DestinationTypeConfigOAuth2AuthorizationCodeHttpMethodDelete DestinationTypeConfigOAuth2AuthorizationCodeHttpMethod = "DELETE"
)

func NewDestinationTypeConfigOAuth2AuthorizationCodeHttpMethodFromString(s string) (DestinationTypeConfigOAuth2AuthorizationCodeHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigOAuth2AuthorizationCodeHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigOAuth2AuthorizationCodeHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigOAuth2AuthorizationCodeHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigOAuth2AuthorizationCodeHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigOAuth2AuthorizationCodeHttpMethodDelete, nil
	}
	var t DestinationTypeConfigOAuth2AuthorizationCodeHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigOAuth2AuthorizationCodeHttpMethod) Ptr() *DestinationTypeConfigOAuth2AuthorizationCodeHttpMethod {
	return &d
}

type DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriod string

const (
	DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriodSecond     DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriod = "second"
	DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriodMinute     DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriod = "minute"
	DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriodHour       DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriod = "hour"
	DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriodConcurrent DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriod = "concurrent"
)

func NewDestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriodFromString(s string) (DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriodSecond, nil
	case "minute":
		return DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriodMinute, nil
	case "hour":
		return DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriodConcurrent, nil
	}
	var t DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriod) Ptr() *DestinationTypeConfigOAuth2AuthorizationCodeRateLimitPeriod {
	return &d
}

// The type config for OAuth2 (Client Credentials). Requires type to be `OAUTH2_CLIENT_CREDENTIALS`.
type DestinationTypeConfigOAuth2ClientCredentials struct {
	Type                   *string                                                      `json:"type,omitempty" url:"type,omitempty"`
	Url                    *string                                                      `json:"url,omitempty" url:"url,omitempty"`
	RateLimit              *float64                                                     `json:"rate_limit,omitempty" url:"rate_limit,omitempty"`
	RateLimitPeriod        *DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriod `json:"rate_limit_period,omitempty" url:"rate_limit_period,omitempty"`
	PathForwardingDisabled *bool                                                        `json:"path_forwarding_disabled,omitempty" url:"path_forwarding_disabled,omitempty"`
	HttpMethod             *DestinationTypeConfigOAuth2ClientCredentialsHttpMethod      `json:"http_method,omitempty" url:"http_method,omitempty"`
	Auth                   *DestinationTypeConfigOAuth2ClientCredentialsAuth            `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigOAuth2ClientCredentials) GetUrl() *string {
	if d == nil {
		return nil
	}
	return d.Url
}

func (d *DestinationTypeConfigOAuth2ClientCredentials) GetRateLimit() *float64 {
	if d == nil {
		return nil
	}
	return d.RateLimit
}

func (d *DestinationTypeConfigOAuth2ClientCredentials) GetRateLimitPeriod() *DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriod {
	if d == nil {
		return nil
	}
	return d.RateLimitPeriod
}

func (d *DestinationTypeConfigOAuth2ClientCredentials) GetPathForwardingDisabled() *bool {
	if d == nil {
		return nil
	}
	return d.PathForwardingDisabled
}

func (d *DestinationTypeConfigOAuth2ClientCredentials) GetHttpMethod() *DestinationTypeConfigOAuth2ClientCredentialsHttpMethod {
	if d == nil {
		return nil
	}
	return d.HttpMethod
}

func (d *DestinationTypeConfigOAuth2ClientCredentials) GetAuth() *DestinationTypeConfigOAuth2ClientCredentialsAuth {
	if d == nil {
		return nil
	}
	return d.Auth
}

func (d *DestinationTypeConfigOAuth2ClientCredentials) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigOAuth2ClientCredentials) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigOAuth2ClientCredentials
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigOAuth2ClientCredentials(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigOAuth2ClientCredentials) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigOAuth2ClientCredentialsAuth struct {
	AuthServer         string                                                             `json:"auth_server" url:"auth_server"`
	ClientId           string                                                             `json:"client_id" url:"client_id"`
	ClientSecret       string                                                             `json:"client_secret" url:"client_secret"`
	Scope              string                                                             `json:"scope" url:"scope"`
	AuthenticationType DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationType `json:"authentication_type" url:"authentication_type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DestinationTypeConfigOAuth2ClientCredentialsAuth) GetAuthServer() string {
	if d == nil {
		return ""
	}
	return d.AuthServer
}

func (d *DestinationTypeConfigOAuth2ClientCredentialsAuth) GetClientId() string {
	if d == nil {
		return ""
	}
	return d.ClientId
}

func (d *DestinationTypeConfigOAuth2ClientCredentialsAuth) GetClientSecret() string {
	if d == nil {
		return ""
	}
	return d.ClientSecret
}

func (d *DestinationTypeConfigOAuth2ClientCredentialsAuth) GetScope() string {
	if d == nil {
		return ""
	}
	return d.Scope
}

func (d *DestinationTypeConfigOAuth2ClientCredentialsAuth) GetAuthenticationType() DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationType {
	if d == nil {
		return ""
	}
	return d.AuthenticationType
}

func (d *DestinationTypeConfigOAuth2ClientCredentialsAuth) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DestinationTypeConfigOAuth2ClientCredentialsAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler DestinationTypeConfigOAuth2ClientCredentialsAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestinationTypeConfigOAuth2ClientCredentialsAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestinationTypeConfigOAuth2ClientCredentialsAuth) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationType string

const (
	DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationTypeBasic              DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationType = "basic"
	DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationTypeBearer             DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationType = "bearer"
	DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationTypeXWwwFormUrlencoded DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationType = "x-www-form-urlencoded"
)

func NewDestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationTypeFromString(s string) (DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationType, error) {
	switch s {
	case "basic":
		return DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationTypeBasic, nil
	case "bearer":
		return DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationTypeBearer, nil
	case "x-www-form-urlencoded":
		return DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationTypeXWwwFormUrlencoded, nil
	}
	var t DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationType) Ptr() *DestinationTypeConfigOAuth2ClientCredentialsAuthAuthenticationType {
	return &d
}

type DestinationTypeConfigOAuth2ClientCredentialsHttpMethod string

const (
	DestinationTypeConfigOAuth2ClientCredentialsHttpMethodGet    DestinationTypeConfigOAuth2ClientCredentialsHttpMethod = "GET"
	DestinationTypeConfigOAuth2ClientCredentialsHttpMethodPost   DestinationTypeConfigOAuth2ClientCredentialsHttpMethod = "POST"
	DestinationTypeConfigOAuth2ClientCredentialsHttpMethodPut    DestinationTypeConfigOAuth2ClientCredentialsHttpMethod = "PUT"
	DestinationTypeConfigOAuth2ClientCredentialsHttpMethodPatch  DestinationTypeConfigOAuth2ClientCredentialsHttpMethod = "PATCH"
	DestinationTypeConfigOAuth2ClientCredentialsHttpMethodDelete DestinationTypeConfigOAuth2ClientCredentialsHttpMethod = "DELETE"
)

func NewDestinationTypeConfigOAuth2ClientCredentialsHttpMethodFromString(s string) (DestinationTypeConfigOAuth2ClientCredentialsHttpMethod, error) {
	switch s {
	case "GET":
		return DestinationTypeConfigOAuth2ClientCredentialsHttpMethodGet, nil
	case "POST":
		return DestinationTypeConfigOAuth2ClientCredentialsHttpMethodPost, nil
	case "PUT":
		return DestinationTypeConfigOAuth2ClientCredentialsHttpMethodPut, nil
	case "PATCH":
		return DestinationTypeConfigOAuth2ClientCredentialsHttpMethodPatch, nil
	case "DELETE":
		return DestinationTypeConfigOAuth2ClientCredentialsHttpMethodDelete, nil
	}
	var t DestinationTypeConfigOAuth2ClientCredentialsHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigOAuth2ClientCredentialsHttpMethod) Ptr() *DestinationTypeConfigOAuth2ClientCredentialsHttpMethod {
	return &d
}

type DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriod string

const (
	DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriodSecond     DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriod = "second"
	DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriodMinute     DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriod = "minute"
	DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriodHour       DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriod = "hour"
	DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriodConcurrent DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriod = "concurrent"
)

func NewDestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriodFromString(s string) (DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriodSecond, nil
	case "minute":
		return DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriodMinute, nil
	case "hour":
		return DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriodHour, nil
	case "concurrent":
		return DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriodConcurrent, nil
	}
	var t DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriod) Ptr() *DestinationTypeConfigOAuth2ClientCredentialsRateLimitPeriod {
	return &d
}

type DetachedIntegrationFromSource struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DetachedIntegrationFromSource) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DetachedIntegrationFromSource) UnmarshalJSON(data []byte) error {
	type unmarshaler DetachedIntegrationFromSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DetachedIntegrationFromSource(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DetachedIntegrationFromSource) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type Event struct {
	// ID of the event
	Id string `json:"id" url:"id"`
	// ID of the project
	TeamId string `json:"team_id" url:"team_id"`
	// ID of the associated connection
	WebhookId string `json:"webhook_id" url:"webhook_id"`
	// ID of the associated source
	SourceId string `json:"source_id" url:"source_id"`
	// ID of the associated destination
	DestinationId string `json:"destination_id" url:"destination_id"`
	// ID of the event data
	EventDataId string `json:"event_data_id" url:"event_data_id"`
	// ID of the request that created the event
	RequestId string `json:"request_id" url:"request_id"`
	// Number of delivery attempts made
	Attempts int `json:"attempts" url:"attempts"`
	// Date of the most recently attempted retry
	LastAttemptAt *time.Time `json:"last_attempt_at,omitempty" url:"last_attempt_at,omitempty"`
	// Date of the next scheduled retry
	NextAttemptAt *time.Time `json:"next_attempt_at,omitempty" url:"next_attempt_at,omitempty"`
	// Event status
	ResponseStatus *int               `json:"response_status,omitempty" url:"response_status,omitempty"`
	ErrorCode      *AttemptErrorCodes `json:"error_code,omitempty" url:"error_code,omitempty"`
	Status         EventStatus        `json:"status" url:"status"`
	// Date of the latest successful attempt
	SuccessfulAt *time.Time `json:"successful_at,omitempty" url:"successful_at,omitempty"`
	// ID of the CLI the event is sent to
	CliId *string `json:"cli_id,omitempty" url:"cli_id,omitempty"`
	// Date the event was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the event was created
	CreatedAt time.Time       `json:"created_at" url:"created_at"`
	Data      *ShortEventData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Event) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *Event) GetTeamId() string {
	if e == nil {
		return ""
	}
	return e.TeamId
}

func (e *Event) GetWebhookId() string {
	if e == nil {
		return ""
	}
	return e.WebhookId
}

func (e *Event) GetSourceId() string {
	if e == nil {
		return ""
	}
	return e.SourceId
}

func (e *Event) GetDestinationId() string {
	if e == nil {
		return ""
	}
	return e.DestinationId
}

func (e *Event) GetEventDataId() string {
	if e == nil {
		return ""
	}
	return e.EventDataId
}

func (e *Event) GetRequestId() string {
	if e == nil {
		return ""
	}
	return e.RequestId
}

func (e *Event) GetAttempts() int {
	if e == nil {
		return 0
	}
	return e.Attempts
}

func (e *Event) GetLastAttemptAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.LastAttemptAt
}

func (e *Event) GetNextAttemptAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.NextAttemptAt
}

func (e *Event) GetResponseStatus() *int {
	if e == nil {
		return nil
	}
	return e.ResponseStatus
}

func (e *Event) GetErrorCode() *AttemptErrorCodes {
	if e == nil {
		return nil
	}
	return e.ErrorCode
}

func (e *Event) GetStatus() EventStatus {
	if e == nil {
		return ""
	}
	return e.Status
}

func (e *Event) GetSuccessfulAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.SuccessfulAt
}

func (e *Event) GetCliId() *string {
	if e == nil {
		return nil
	}
	return e.CliId
}

func (e *Event) GetUpdatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.UpdatedAt
}

func (e *Event) GetCreatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.CreatedAt
}

func (e *Event) GetData() *ShortEventData {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *Event) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Event) UnmarshalJSON(data []byte) error {
	type embed Event
	var unmarshaler = struct {
		embed
		LastAttemptAt *internal.DateTime `json:"last_attempt_at,omitempty"`
		NextAttemptAt *internal.DateTime `json:"next_attempt_at,omitempty"`
		SuccessfulAt  *internal.DateTime `json:"successful_at,omitempty"`
		UpdatedAt     *internal.DateTime `json:"updated_at"`
		CreatedAt     *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = Event(unmarshaler.embed)
	e.LastAttemptAt = unmarshaler.LastAttemptAt.TimePtr()
	e.NextAttemptAt = unmarshaler.NextAttemptAt.TimePtr()
	e.SuccessfulAt = unmarshaler.SuccessfulAt.TimePtr()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Event) MarshalJSON() ([]byte, error) {
	type embed Event
	var marshaler = struct {
		embed
		LastAttemptAt *internal.DateTime `json:"last_attempt_at,omitempty"`
		NextAttemptAt *internal.DateTime `json:"next_attempt_at,omitempty"`
		SuccessfulAt  *internal.DateTime `json:"successful_at,omitempty"`
		UpdatedAt     *internal.DateTime `json:"updated_at"`
		CreatedAt     *internal.DateTime `json:"created_at"`
	}{
		embed:         embed(*e),
		LastAttemptAt: internal.NewOptionalDateTime(e.LastAttemptAt),
		NextAttemptAt: internal.NewOptionalDateTime(e.NextAttemptAt),
		SuccessfulAt:  internal.NewOptionalDateTime(e.SuccessfulAt),
		UpdatedAt:     internal.NewDateTime(e.UpdatedAt),
		CreatedAt:     internal.NewDateTime(e.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *Event) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventAttempt struct {
	// Attempt ID
	Id string `json:"id" url:"id"`
	// ID of the project
	TeamId string `json:"team_id" url:"team_id"`
	// Event ID
	EventId string `json:"event_id" url:"event_id"`
	// Destination ID
	DestinationId string `json:"destination_id" url:"destination_id"`
	// Attempt's HTTP response code
	ResponseStatus *int `json:"response_status,omitempty" url:"response_status,omitempty"`
	// Sequential number of attempts (up to and including this one) made for the associated event
	AttemptNumber *int               `json:"attempt_number,omitempty" url:"attempt_number,omitempty"`
	Trigger       *AttemptTrigger    `json:"trigger,omitempty" url:"trigger,omitempty"`
	ErrorCode     *AttemptErrorCodes `json:"error_code,omitempty" url:"error_code,omitempty"`
	Body          *EventAttemptBody  `json:"body,omitempty" url:"body,omitempty"`
	// URL of the destination where delivery was attempted
	RequestedUrl *string `json:"requested_url,omitempty" url:"requested_url,omitempty"`
	// HTTP method used to deliver the attempt
	HttpMethod *EventAttemptHttpMethod `json:"http_method,omitempty" url:"http_method,omitempty"`
	// ID of associated bulk retry
	BulkRetryId *string       `json:"bulk_retry_id,omitempty" url:"bulk_retry_id,omitempty"`
	Status      AttemptStatus `json:"status" url:"status"`
	// Date the attempt was successful
	SuccessfulAt *time.Time `json:"successful_at,omitempty" url:"successful_at,omitempty"`
	// Date the attempt was delivered
	DeliveredAt *time.Time `json:"delivered_at,omitempty" url:"delivered_at,omitempty"`
	// Date the destination responded to this attempt
	RespondedAt *time.Time `json:"responded_at,omitempty" url:"responded_at,omitempty"`
	// Time elapsed between attempt initiation and final delivery (in ms)
	DeliveryLatency *int `json:"delivery_latency,omitempty" url:"delivery_latency,omitempty"`
	// Time elapsed between attempt initiation and a response from the destination (in ms)
	ResponseLatency *int `json:"response_latency,omitempty" url:"response_latency,omitempty"`
	// Date the attempt was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the attempt was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventAttempt) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EventAttempt) GetTeamId() string {
	if e == nil {
		return ""
	}
	return e.TeamId
}

func (e *EventAttempt) GetEventId() string {
	if e == nil {
		return ""
	}
	return e.EventId
}

func (e *EventAttempt) GetDestinationId() string {
	if e == nil {
		return ""
	}
	return e.DestinationId
}

func (e *EventAttempt) GetResponseStatus() *int {
	if e == nil {
		return nil
	}
	return e.ResponseStatus
}

func (e *EventAttempt) GetAttemptNumber() *int {
	if e == nil {
		return nil
	}
	return e.AttemptNumber
}

func (e *EventAttempt) GetTrigger() *AttemptTrigger {
	if e == nil {
		return nil
	}
	return e.Trigger
}

func (e *EventAttempt) GetErrorCode() *AttemptErrorCodes {
	if e == nil {
		return nil
	}
	return e.ErrorCode
}

func (e *EventAttempt) GetBody() *EventAttemptBody {
	if e == nil {
		return nil
	}
	return e.Body
}

func (e *EventAttempt) GetRequestedUrl() *string {
	if e == nil {
		return nil
	}
	return e.RequestedUrl
}

func (e *EventAttempt) GetHttpMethod() *EventAttemptHttpMethod {
	if e == nil {
		return nil
	}
	return e.HttpMethod
}

func (e *EventAttempt) GetBulkRetryId() *string {
	if e == nil {
		return nil
	}
	return e.BulkRetryId
}

func (e *EventAttempt) GetStatus() AttemptStatus {
	if e == nil {
		return ""
	}
	return e.Status
}

func (e *EventAttempt) GetSuccessfulAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.SuccessfulAt
}

func (e *EventAttempt) GetDeliveredAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.DeliveredAt
}

func (e *EventAttempt) GetRespondedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.RespondedAt
}

func (e *EventAttempt) GetDeliveryLatency() *int {
	if e == nil {
		return nil
	}
	return e.DeliveryLatency
}

func (e *EventAttempt) GetResponseLatency() *int {
	if e == nil {
		return nil
	}
	return e.ResponseLatency
}

func (e *EventAttempt) GetUpdatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.UpdatedAt
}

func (e *EventAttempt) GetCreatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.CreatedAt
}

func (e *EventAttempt) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventAttempt) UnmarshalJSON(data []byte) error {
	type embed EventAttempt
	var unmarshaler = struct {
		embed
		SuccessfulAt *internal.DateTime `json:"successful_at,omitempty"`
		DeliveredAt  *internal.DateTime `json:"delivered_at,omitempty"`
		RespondedAt  *internal.DateTime `json:"responded_at,omitempty"`
		UpdatedAt    *internal.DateTime `json:"updated_at"`
		CreatedAt    *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EventAttempt(unmarshaler.embed)
	e.SuccessfulAt = unmarshaler.SuccessfulAt.TimePtr()
	e.DeliveredAt = unmarshaler.DeliveredAt.TimePtr()
	e.RespondedAt = unmarshaler.RespondedAt.TimePtr()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventAttempt) MarshalJSON() ([]byte, error) {
	type embed EventAttempt
	var marshaler = struct {
		embed
		SuccessfulAt *internal.DateTime `json:"successful_at,omitempty"`
		DeliveredAt  *internal.DateTime `json:"delivered_at,omitempty"`
		RespondedAt  *internal.DateTime `json:"responded_at,omitempty"`
		UpdatedAt    *internal.DateTime `json:"updated_at"`
		CreatedAt    *internal.DateTime `json:"created_at"`
	}{
		embed:        embed(*e),
		SuccessfulAt: internal.NewOptionalDateTime(e.SuccessfulAt),
		DeliveredAt:  internal.NewOptionalDateTime(e.DeliveredAt),
		RespondedAt:  internal.NewOptionalDateTime(e.RespondedAt),
		UpdatedAt:    internal.NewDateTime(e.UpdatedAt),
		CreatedAt:    internal.NewDateTime(e.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EventAttempt) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventAttemptBody struct {
	// Response body from the destination
	EventAttemptBodyZeroOptional *EventAttemptBodyZero
	// Response body from the destination
	StringOptional *string

	typ string
}

func NewEventAttemptBodyFromEventAttemptBodyZeroOptional(value *EventAttemptBodyZero) *EventAttemptBody {
	return &EventAttemptBody{typ: "EventAttemptBodyZeroOptional", EventAttemptBodyZeroOptional: value}
}

func NewEventAttemptBodyFromStringOptional(value *string) *EventAttemptBody {
	return &EventAttemptBody{typ: "StringOptional", StringOptional: value}
}

func (e *EventAttemptBody) GetEventAttemptBodyZeroOptional() *EventAttemptBodyZero {
	if e == nil {
		return nil
	}
	return e.EventAttemptBodyZeroOptional
}

func (e *EventAttemptBody) GetStringOptional() *string {
	if e == nil {
		return nil
	}
	return e.StringOptional
}

func (e *EventAttemptBody) UnmarshalJSON(data []byte) error {
	var valueEventAttemptBodyZeroOptional *EventAttemptBodyZero
	if err := json.Unmarshal(data, &valueEventAttemptBodyZeroOptional); err == nil {
		e.typ = "EventAttemptBodyZeroOptional"
		e.EventAttemptBodyZeroOptional = valueEventAttemptBodyZeroOptional
		return nil
	}
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		e.typ = "StringOptional"
		e.StringOptional = valueStringOptional
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventAttemptBody) MarshalJSON() ([]byte, error) {
	if e.typ == "EventAttemptBodyZeroOptional" || e.EventAttemptBodyZeroOptional != nil {
		return json.Marshal(e.EventAttemptBodyZeroOptional)
	}
	if e.typ == "StringOptional" || e.StringOptional != nil {
		return json.Marshal(e.StringOptional)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventAttemptBodyVisitor interface {
	VisitEventAttemptBodyZeroOptional(*EventAttemptBodyZero) error
	VisitStringOptional(*string) error
}

func (e *EventAttemptBody) Accept(visitor EventAttemptBodyVisitor) error {
	if e.typ == "EventAttemptBodyZeroOptional" || e.EventAttemptBodyZeroOptional != nil {
		return visitor.VisitEventAttemptBodyZeroOptional(e.EventAttemptBodyZeroOptional)
	}
	if e.typ == "StringOptional" || e.StringOptional != nil {
		return visitor.VisitStringOptional(e.StringOptional)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// Response body from the destination
type EventAttemptBodyZero struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventAttemptBodyZero) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventAttemptBodyZero) UnmarshalJSON(data []byte) error {
	type unmarshaler EventAttemptBodyZero
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventAttemptBodyZero(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventAttemptBodyZero) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// HTTP method used to deliver the attempt
type EventAttemptHttpMethod string

const (
	EventAttemptHttpMethodGet    EventAttemptHttpMethod = "GET"
	EventAttemptHttpMethodPost   EventAttemptHttpMethod = "POST"
	EventAttemptHttpMethodPut    EventAttemptHttpMethod = "PUT"
	EventAttemptHttpMethodPatch  EventAttemptHttpMethod = "PATCH"
	EventAttemptHttpMethodDelete EventAttemptHttpMethod = "DELETE"
)

func NewEventAttemptHttpMethodFromString(s string) (EventAttemptHttpMethod, error) {
	switch s {
	case "GET":
		return EventAttemptHttpMethodGet, nil
	case "POST":
		return EventAttemptHttpMethodPost, nil
	case "PUT":
		return EventAttemptHttpMethodPut, nil
	case "PATCH":
		return EventAttemptHttpMethodPatch, nil
	case "DELETE":
		return EventAttemptHttpMethodDelete, nil
	}
	var t EventAttemptHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventAttemptHttpMethod) Ptr() *EventAttemptHttpMethod {
	return &e
}

type EventPaginatedResult struct {
	Pagination *SeekPagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Count      *int            `json:"count,omitempty" url:"count,omitempty"`
	Models     []*Event        `json:"models,omitempty" url:"models,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventPaginatedResult) GetPagination() *SeekPagination {
	if e == nil {
		return nil
	}
	return e.Pagination
}

func (e *EventPaginatedResult) GetCount() *int {
	if e == nil {
		return nil
	}
	return e.Count
}

func (e *EventPaginatedResult) GetModels() []*Event {
	if e == nil {
		return nil
	}
	return e.Models
}

func (e *EventPaginatedResult) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventPaginatedResult) UnmarshalJSON(data []byte) error {
	type unmarshaler EventPaginatedResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventPaginatedResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventPaginatedResult) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventStatus string

const (
	EventStatusScheduled  EventStatus = "SCHEDULED"
	EventStatusQueued     EventStatus = "QUEUED"
	EventStatusHold       EventStatus = "HOLD"
	EventStatusSuccessful EventStatus = "SUCCESSFUL"
	EventStatusFailed     EventStatus = "FAILED"
)

func NewEventStatusFromString(s string) (EventStatus, error) {
	switch s {
	case "SCHEDULED":
		return EventStatusScheduled, nil
	case "QUEUED":
		return EventStatusQueued, nil
	case "HOLD":
		return EventStatusHold, nil
	case "SUCCESSFUL":
		return EventStatusSuccessful, nil
	case "FAILED":
		return EventStatusFailed, nil
	}
	var t EventStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventStatus) Ptr() *EventStatus {
	return &e
}

type HandledApiKeyIntegrationConfigs struct {
	ApiKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HandledApiKeyIntegrationConfigs) GetApiKey() string {
	if h == nil {
		return ""
	}
	return h.ApiKey
}

func (h *HandledApiKeyIntegrationConfigs) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HandledApiKeyIntegrationConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler HandledApiKeyIntegrationConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HandledApiKeyIntegrationConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HandledApiKeyIntegrationConfigs) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HandledHmacConfigs struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HandledHmacConfigs) GetWebhookSecretKey() string {
	if h == nil {
		return ""
	}
	return h.WebhookSecretKey
}

func (h *HandledHmacConfigs) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HandledHmacConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler HandledHmacConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HandledHmacConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HandledHmacConfigs) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HmacAlgorithms string

const (
	HmacAlgorithmsMd5    HmacAlgorithms = "md5"
	HmacAlgorithmsSha1   HmacAlgorithms = "sha1"
	HmacAlgorithmsSha256 HmacAlgorithms = "sha256"
	HmacAlgorithmsSha512 HmacAlgorithms = "sha512"
)

func NewHmacAlgorithmsFromString(s string) (HmacAlgorithms, error) {
	switch s {
	case "md5":
		return HmacAlgorithmsMd5, nil
	case "sha1":
		return HmacAlgorithmsSha1, nil
	case "sha256":
		return HmacAlgorithmsSha256, nil
	case "sha512":
		return HmacAlgorithmsSha512, nil
	}
	var t HmacAlgorithms
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (h HmacAlgorithms) Ptr() *HmacAlgorithms {
	return &h
}

type HmacIntegrationConfigs struct {
	WebhookSecretKey string                         `json:"webhook_secret_key" url:"webhook_secret_key"`
	Algorithm        HmacAlgorithms                 `json:"algorithm" url:"algorithm"`
	HeaderKey        string                         `json:"header_key" url:"header_key"`
	Encoding         HmacIntegrationConfigsEncoding `json:"encoding" url:"encoding"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HmacIntegrationConfigs) GetWebhookSecretKey() string {
	if h == nil {
		return ""
	}
	return h.WebhookSecretKey
}

func (h *HmacIntegrationConfigs) GetAlgorithm() HmacAlgorithms {
	if h == nil {
		return ""
	}
	return h.Algorithm
}

func (h *HmacIntegrationConfigs) GetHeaderKey() string {
	if h == nil {
		return ""
	}
	return h.HeaderKey
}

func (h *HmacIntegrationConfigs) GetEncoding() HmacIntegrationConfigsEncoding {
	if h == nil {
		return ""
	}
	return h.Encoding
}

func (h *HmacIntegrationConfigs) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HmacIntegrationConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler HmacIntegrationConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HmacIntegrationConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HmacIntegrationConfigs) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HmacIntegrationConfigsEncoding string

const (
	HmacIntegrationConfigsEncodingBase64 HmacIntegrationConfigsEncoding = "base64"
	HmacIntegrationConfigsEncodingHex    HmacIntegrationConfigsEncoding = "hex"
)

func NewHmacIntegrationConfigsEncodingFromString(s string) (HmacIntegrationConfigsEncoding, error) {
	switch s {
	case "base64":
		return HmacIntegrationConfigsEncodingBase64, nil
	case "hex":
		return HmacIntegrationConfigsEncodingHex, nil
	}
	var t HmacIntegrationConfigsEncoding
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (h HmacIntegrationConfigsEncoding) Ptr() *HmacIntegrationConfigsEncoding {
	return &h
}

type Integration struct {
	// ID of the integration
	Id string `json:"id" url:"id"`
	// ID of the project
	TeamId string `json:"team_id" url:"team_id"`
	// Label of the integration
	Label    string              `json:"label" url:"label"`
	Provider IntegrationProvider `json:"provider" url:"provider"`
	// List of features to enable (see features list below)
	Features []IntegrationFeature `json:"features,omitempty" url:"features,omitempty"`
	// Decrypted Key/Value object of the associated configuration for that provider
	Configs *IntegrationConfigs `json:"configs,omitempty" url:"configs,omitempty"`
	// List of source IDs the integration is attached to
	Sources []string `json:"sources,omitempty" url:"sources,omitempty"`
	// Date the integration was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the integration was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *Integration) GetId() string {
	if i == nil {
		return ""
	}
	return i.Id
}

func (i *Integration) GetTeamId() string {
	if i == nil {
		return ""
	}
	return i.TeamId
}

func (i *Integration) GetLabel() string {
	if i == nil {
		return ""
	}
	return i.Label
}

func (i *Integration) GetProvider() IntegrationProvider {
	if i == nil {
		return ""
	}
	return i.Provider
}

func (i *Integration) GetFeatures() []IntegrationFeature {
	if i == nil {
		return nil
	}
	return i.Features
}

func (i *Integration) GetConfigs() *IntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.Configs
}

func (i *Integration) GetSources() []string {
	if i == nil {
		return nil
	}
	return i.Sources
}

func (i *Integration) GetUpdatedAt() time.Time {
	if i == nil {
		return time.Time{}
	}
	return i.UpdatedAt
}

func (i *Integration) GetCreatedAt() time.Time {
	if i == nil {
		return time.Time{}
	}
	return i.CreatedAt
}

func (i *Integration) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Integration) UnmarshalJSON(data []byte) error {
	type embed Integration
	var unmarshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = Integration(unmarshaler.embed)
	i.UpdatedAt = unmarshaler.UpdatedAt.Time()
	i.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *Integration) MarshalJSON() ([]byte, error) {
	type embed Integration
	var marshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed:     embed(*i),
		UpdatedAt: internal.NewDateTime(i.UpdatedAt),
		CreatedAt: internal.NewDateTime(i.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (i *Integration) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Decrypted Key/Value object of the associated configuration for that provider
type IntegrationConfigs struct {
	HmacIntegrationConfigs            *HmacIntegrationConfigs
	ApiKeyIntegrationConfigs          *ApiKeyIntegrationConfigs
	HandledApiKeyIntegrationConfigs   *HandledApiKeyIntegrationConfigs
	HandledHmacConfigs                *HandledHmacConfigs
	BasicAuthIntegrationConfigs       *BasicAuthIntegrationConfigs
	ShopifyIntegrationConfigs         *ShopifyIntegrationConfigs
	VercelLogDrainsIntegrationConfigs *VercelLogDrainsIntegrationConfigs
	IntegrationConfigsSeven           *IntegrationConfigsSeven

	typ string
}

func NewIntegrationConfigsFromHmacIntegrationConfigs(value *HmacIntegrationConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "HmacIntegrationConfigs", HmacIntegrationConfigs: value}
}

func NewIntegrationConfigsFromApiKeyIntegrationConfigs(value *ApiKeyIntegrationConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "ApiKeyIntegrationConfigs", ApiKeyIntegrationConfigs: value}
}

func NewIntegrationConfigsFromHandledApiKeyIntegrationConfigs(value *HandledApiKeyIntegrationConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "HandledApiKeyIntegrationConfigs", HandledApiKeyIntegrationConfigs: value}
}

func NewIntegrationConfigsFromHandledHmacConfigs(value *HandledHmacConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "HandledHmacConfigs", HandledHmacConfigs: value}
}

func NewIntegrationConfigsFromBasicAuthIntegrationConfigs(value *BasicAuthIntegrationConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "BasicAuthIntegrationConfigs", BasicAuthIntegrationConfigs: value}
}

func NewIntegrationConfigsFromShopifyIntegrationConfigs(value *ShopifyIntegrationConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "ShopifyIntegrationConfigs", ShopifyIntegrationConfigs: value}
}

func NewIntegrationConfigsFromVercelLogDrainsIntegrationConfigs(value *VercelLogDrainsIntegrationConfigs) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "VercelLogDrainsIntegrationConfigs", VercelLogDrainsIntegrationConfigs: value}
}

func NewIntegrationConfigsFromIntegrationConfigsSeven(value *IntegrationConfigsSeven) *IntegrationConfigs {
	return &IntegrationConfigs{typ: "IntegrationConfigsSeven", IntegrationConfigsSeven: value}
}

func (i *IntegrationConfigs) GetHmacIntegrationConfigs() *HmacIntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.HmacIntegrationConfigs
}

func (i *IntegrationConfigs) GetApiKeyIntegrationConfigs() *ApiKeyIntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.ApiKeyIntegrationConfigs
}

func (i *IntegrationConfigs) GetHandledApiKeyIntegrationConfigs() *HandledApiKeyIntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.HandledApiKeyIntegrationConfigs
}

func (i *IntegrationConfigs) GetHandledHmacConfigs() *HandledHmacConfigs {
	if i == nil {
		return nil
	}
	return i.HandledHmacConfigs
}

func (i *IntegrationConfigs) GetBasicAuthIntegrationConfigs() *BasicAuthIntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.BasicAuthIntegrationConfigs
}

func (i *IntegrationConfigs) GetShopifyIntegrationConfigs() *ShopifyIntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.ShopifyIntegrationConfigs
}

func (i *IntegrationConfigs) GetVercelLogDrainsIntegrationConfigs() *VercelLogDrainsIntegrationConfigs {
	if i == nil {
		return nil
	}
	return i.VercelLogDrainsIntegrationConfigs
}

func (i *IntegrationConfigs) GetIntegrationConfigsSeven() *IntegrationConfigsSeven {
	if i == nil {
		return nil
	}
	return i.IntegrationConfigsSeven
}

func (i *IntegrationConfigs) UnmarshalJSON(data []byte) error {
	valueHmacIntegrationConfigs := new(HmacIntegrationConfigs)
	if err := json.Unmarshal(data, &valueHmacIntegrationConfigs); err == nil {
		i.typ = "HmacIntegrationConfigs"
		i.HmacIntegrationConfigs = valueHmacIntegrationConfigs
		return nil
	}
	valueApiKeyIntegrationConfigs := new(ApiKeyIntegrationConfigs)
	if err := json.Unmarshal(data, &valueApiKeyIntegrationConfigs); err == nil {
		i.typ = "ApiKeyIntegrationConfigs"
		i.ApiKeyIntegrationConfigs = valueApiKeyIntegrationConfigs
		return nil
	}
	valueHandledApiKeyIntegrationConfigs := new(HandledApiKeyIntegrationConfigs)
	if err := json.Unmarshal(data, &valueHandledApiKeyIntegrationConfigs); err == nil {
		i.typ = "HandledApiKeyIntegrationConfigs"
		i.HandledApiKeyIntegrationConfigs = valueHandledApiKeyIntegrationConfigs
		return nil
	}
	valueHandledHmacConfigs := new(HandledHmacConfigs)
	if err := json.Unmarshal(data, &valueHandledHmacConfigs); err == nil {
		i.typ = "HandledHmacConfigs"
		i.HandledHmacConfigs = valueHandledHmacConfigs
		return nil
	}
	valueBasicAuthIntegrationConfigs := new(BasicAuthIntegrationConfigs)
	if err := json.Unmarshal(data, &valueBasicAuthIntegrationConfigs); err == nil {
		i.typ = "BasicAuthIntegrationConfigs"
		i.BasicAuthIntegrationConfigs = valueBasicAuthIntegrationConfigs
		return nil
	}
	valueShopifyIntegrationConfigs := new(ShopifyIntegrationConfigs)
	if err := json.Unmarshal(data, &valueShopifyIntegrationConfigs); err == nil {
		i.typ = "ShopifyIntegrationConfigs"
		i.ShopifyIntegrationConfigs = valueShopifyIntegrationConfigs
		return nil
	}
	valueVercelLogDrainsIntegrationConfigs := new(VercelLogDrainsIntegrationConfigs)
	if err := json.Unmarshal(data, &valueVercelLogDrainsIntegrationConfigs); err == nil {
		i.typ = "VercelLogDrainsIntegrationConfigs"
		i.VercelLogDrainsIntegrationConfigs = valueVercelLogDrainsIntegrationConfigs
		return nil
	}
	valueIntegrationConfigsSeven := new(IntegrationConfigsSeven)
	if err := json.Unmarshal(data, &valueIntegrationConfigsSeven); err == nil {
		i.typ = "IntegrationConfigsSeven"
		i.IntegrationConfigsSeven = valueIntegrationConfigsSeven
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IntegrationConfigs) MarshalJSON() ([]byte, error) {
	if i.typ == "HmacIntegrationConfigs" || i.HmacIntegrationConfigs != nil {
		return json.Marshal(i.HmacIntegrationConfigs)
	}
	if i.typ == "ApiKeyIntegrationConfigs" || i.ApiKeyIntegrationConfigs != nil {
		return json.Marshal(i.ApiKeyIntegrationConfigs)
	}
	if i.typ == "HandledApiKeyIntegrationConfigs" || i.HandledApiKeyIntegrationConfigs != nil {
		return json.Marshal(i.HandledApiKeyIntegrationConfigs)
	}
	if i.typ == "HandledHmacConfigs" || i.HandledHmacConfigs != nil {
		return json.Marshal(i.HandledHmacConfigs)
	}
	if i.typ == "BasicAuthIntegrationConfigs" || i.BasicAuthIntegrationConfigs != nil {
		return json.Marshal(i.BasicAuthIntegrationConfigs)
	}
	if i.typ == "ShopifyIntegrationConfigs" || i.ShopifyIntegrationConfigs != nil {
		return json.Marshal(i.ShopifyIntegrationConfigs)
	}
	if i.typ == "VercelLogDrainsIntegrationConfigs" || i.VercelLogDrainsIntegrationConfigs != nil {
		return json.Marshal(i.VercelLogDrainsIntegrationConfigs)
	}
	if i.typ == "IntegrationConfigsSeven" || i.IntegrationConfigsSeven != nil {
		return json.Marshal(i.IntegrationConfigsSeven)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IntegrationConfigsVisitor interface {
	VisitHmacIntegrationConfigs(*HmacIntegrationConfigs) error
	VisitApiKeyIntegrationConfigs(*ApiKeyIntegrationConfigs) error
	VisitHandledApiKeyIntegrationConfigs(*HandledApiKeyIntegrationConfigs) error
	VisitHandledHmacConfigs(*HandledHmacConfigs) error
	VisitBasicAuthIntegrationConfigs(*BasicAuthIntegrationConfigs) error
	VisitShopifyIntegrationConfigs(*ShopifyIntegrationConfigs) error
	VisitVercelLogDrainsIntegrationConfigs(*VercelLogDrainsIntegrationConfigs) error
	VisitIntegrationConfigsSeven(*IntegrationConfigsSeven) error
}

func (i *IntegrationConfigs) Accept(visitor IntegrationConfigsVisitor) error {
	if i.typ == "HmacIntegrationConfigs" || i.HmacIntegrationConfigs != nil {
		return visitor.VisitHmacIntegrationConfigs(i.HmacIntegrationConfigs)
	}
	if i.typ == "ApiKeyIntegrationConfigs" || i.ApiKeyIntegrationConfigs != nil {
		return visitor.VisitApiKeyIntegrationConfigs(i.ApiKeyIntegrationConfigs)
	}
	if i.typ == "HandledApiKeyIntegrationConfigs" || i.HandledApiKeyIntegrationConfigs != nil {
		return visitor.VisitHandledApiKeyIntegrationConfigs(i.HandledApiKeyIntegrationConfigs)
	}
	if i.typ == "HandledHmacConfigs" || i.HandledHmacConfigs != nil {
		return visitor.VisitHandledHmacConfigs(i.HandledHmacConfigs)
	}
	if i.typ == "BasicAuthIntegrationConfigs" || i.BasicAuthIntegrationConfigs != nil {
		return visitor.VisitBasicAuthIntegrationConfigs(i.BasicAuthIntegrationConfigs)
	}
	if i.typ == "ShopifyIntegrationConfigs" || i.ShopifyIntegrationConfigs != nil {
		return visitor.VisitShopifyIntegrationConfigs(i.ShopifyIntegrationConfigs)
	}
	if i.typ == "VercelLogDrainsIntegrationConfigs" || i.VercelLogDrainsIntegrationConfigs != nil {
		return visitor.VisitVercelLogDrainsIntegrationConfigs(i.VercelLogDrainsIntegrationConfigs)
	}
	if i.typ == "IntegrationConfigsSeven" || i.IntegrationConfigsSeven != nil {
		return visitor.VisitIntegrationConfigsSeven(i.IntegrationConfigsSeven)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", i)
}

type IntegrationConfigsSeven struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IntegrationConfigsSeven) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntegrationConfigsSeven) UnmarshalJSON(data []byte) error {
	type unmarshaler IntegrationConfigsSeven
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntegrationConfigsSeven(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntegrationConfigsSeven) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IntegrationFeature string

const (
	IntegrationFeatureVerification IntegrationFeature = "VERIFICATION"
	IntegrationFeatureHandshake    IntegrationFeature = "HANDSHAKE"
)

func NewIntegrationFeatureFromString(s string) (IntegrationFeature, error) {
	switch s {
	case "VERIFICATION":
		return IntegrationFeatureVerification, nil
	case "HANDSHAKE":
		return IntegrationFeatureHandshake, nil
	}
	var t IntegrationFeature
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IntegrationFeature) Ptr() *IntegrationFeature {
	return &i
}

type IntegrationPaginatedResult struct {
	Pagination *SeekPagination `json:"pagination,omitempty" url:"pagination,omitempty"`
	Count      *int            `json:"count,omitempty" url:"count,omitempty"`
	Models     []*Integration  `json:"models,omitempty" url:"models,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IntegrationPaginatedResult) GetPagination() *SeekPagination {
	if i == nil {
		return nil
	}
	return i.Pagination
}

func (i *IntegrationPaginatedResult) GetCount() *int {
	if i == nil {
		return nil
	}
	return i.Count
}

func (i *IntegrationPaginatedResult) GetModels() []*Integration {
	if i == nil {
		return nil
	}
	return i.Models
}

func (i *IntegrationPaginatedResult) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntegrationPaginatedResult) UnmarshalJSON(data []byte) error {
	type unmarshaler IntegrationPaginatedResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntegrationPaginatedResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntegrationPaginatedResult) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IntegrationProvider string

const (
	IntegrationProviderHmac            IntegrationProvider = "HMAC"
	IntegrationProviderBasicAuth       IntegrationProvider = "BASIC_AUTH"
	IntegrationProviderApiKey          IntegrationProvider = "API_KEY"
	IntegrationProviderWebhook         IntegrationProvider = "WEBHOOK"
	IntegrationProviderHttp            IntegrationProvider = "HTTP"
	IntegrationProviderSanity          IntegrationProvider = "SANITY"
	IntegrationProviderBridge          IntegrationProvider = "BRIDGE"
	IntegrationProviderCloudsignal     IntegrationProvider = "CLOUDSIGNAL"
	IntegrationProviderCourier         IntegrationProvider = "COURIER"
	IntegrationProviderFrontapp        IntegrationProvider = "FRONTAPP"
	IntegrationProviderZoom            IntegrationProvider = "ZOOM"
	IntegrationProviderTwitter         IntegrationProvider = "TWITTER"
	IntegrationProviderRecharge        IntegrationProvider = "RECHARGE"
	IntegrationProviderStripe          IntegrationProvider = "STRIPE"
	IntegrationProviderPropertyFinder  IntegrationProvider = "PROPERTY-FINDER"
	IntegrationProviderShopify         IntegrationProvider = "SHOPIFY"
	IntegrationProviderTwilio          IntegrationProvider = "TWILIO"
	IntegrationProviderGithub          IntegrationProvider = "GITHUB"
	IntegrationProviderPostmark        IntegrationProvider = "POSTMARK"
	IntegrationProviderTypeform        IntegrationProvider = "TYPEFORM"
	IntegrationProviderXero            IntegrationProvider = "XERO"
	IntegrationProviderSvix            IntegrationProvider = "SVIX"
	IntegrationProviderAdyen           IntegrationProvider = "ADYEN"
	IntegrationProviderAkeneo          IntegrationProvider = "AKENEO"
	IntegrationProviderGitlab          IntegrationProvider = "GITLAB"
	IntegrationProviderWoocommerce     IntegrationProvider = "WOOCOMMERCE"
	IntegrationProviderOura            IntegrationProvider = "OURA"
	IntegrationProviderCommercelayer   IntegrationProvider = "COMMERCELAYER"
	IntegrationProviderHubspot         IntegrationProvider = "HUBSPOT"
	IntegrationProviderMailgun         IntegrationProvider = "MAILGUN"
	IntegrationProviderPersona         IntegrationProvider = "PERSONA"
	IntegrationProviderPipedrive       IntegrationProvider = "PIPEDRIVE"
	IntegrationProviderSendgrid        IntegrationProvider = "SENDGRID"
	IntegrationProviderWorkos          IntegrationProvider = "WORKOS"
	IntegrationProviderSynctera        IntegrationProvider = "SYNCTERA"
	IntegrationProviderAwsSns          IntegrationProvider = "AWS_SNS"
	IntegrationProviderThreeDEye       IntegrationProvider = "THREE_D_EYE"
	IntegrationProviderTwitch          IntegrationProvider = "TWITCH"
	IntegrationProviderEnode           IntegrationProvider = "ENODE"
	IntegrationProviderFavro           IntegrationProvider = "FAVRO"
	IntegrationProviderLinear          IntegrationProvider = "LINEAR"
	IntegrationProviderShopline        IntegrationProvider = "SHOPLINE"
	IntegrationProviderWix             IntegrationProvider = "WIX"
	IntegrationProviderNmi             IntegrationProvider = "NMI"
	IntegrationProviderOrb             IntegrationProvider = "ORB"
	IntegrationProviderPylon           IntegrationProvider = "PYLON"
	IntegrationProviderRazorpay        IntegrationProvider = "RAZORPAY"
	IntegrationProviderRepay           IntegrationProvider = "REPAY"
	IntegrationProviderSquare          IntegrationProvider = "SQUARE"
	IntegrationProviderSolidgate       IntegrationProvider = "SOLIDGATE"
	IntegrationProviderTrello          IntegrationProvider = "TRELLO"
	IntegrationProviderEbay            IntegrationProvider = "EBAY"
	IntegrationProviderTelnyx          IntegrationProvider = "TELNYX"
	IntegrationProviderDiscord         IntegrationProvider = "DISCORD"
	IntegrationProviderTokenio         IntegrationProvider = "TOKENIO"
	IntegrationProviderFiserv          IntegrationProvider = "FISERV"
	IntegrationProviderBondsmith       IntegrationProvider = "BONDSMITH"
	IntegrationProviderVercelLogDrains IntegrationProvider = "VERCEL_LOG_DRAINS"
	IntegrationProviderVercel          IntegrationProvider = "VERCEL"
	IntegrationProviderTebex           IntegrationProvider = "TEBEX"
	IntegrationProviderSlack           IntegrationProvider = "SLACK"
	IntegrationProviderMailchimp       IntegrationProvider = "MAILCHIMP"
	IntegrationProviderPaddle          IntegrationProvider = "PADDLE"
	IntegrationProviderPaypal          IntegrationProvider = "PAYPAL"
	IntegrationProviderTreezor         IntegrationProvider = "TREEZOR"
	IntegrationProviderPraxis          IntegrationProvider = "PRAXIS"
	IntegrationProviderCustomerio      IntegrationProvider = "CUSTOMERIO"
	IntegrationProviderFacebook        IntegrationProvider = "FACEBOOK"
	IntegrationProviderWhatsapp        IntegrationProvider = "WHATSAPP"
	IntegrationProviderReplicate       IntegrationProvider = "REPLICATE"
	IntegrationProviderTiktok          IntegrationProvider = "TIKTOK"
	IntegrationProviderAirwallex       IntegrationProvider = "AIRWALLEX"
	IntegrationProviderZendesk         IntegrationProvider = "ZENDESK"
	IntegrationProviderUpollo          IntegrationProvider = "UPOLLO"
)

func NewIntegrationProviderFromString(s string) (IntegrationProvider, error) {
	switch s {
	case "HMAC":
		return IntegrationProviderHmac, nil
	case "BASIC_AUTH":
		return IntegrationProviderBasicAuth, nil
	case "API_KEY":
		return IntegrationProviderApiKey, nil
	case "WEBHOOK":
		return IntegrationProviderWebhook, nil
	case "HTTP":
		return IntegrationProviderHttp, nil
	case "SANITY":
		return IntegrationProviderSanity, nil
	case "BRIDGE":
		return IntegrationProviderBridge, nil
	case "CLOUDSIGNAL":
		return IntegrationProviderCloudsignal, nil
	case "COURIER":
		return IntegrationProviderCourier, nil
	case "FRONTAPP":
		return IntegrationProviderFrontapp, nil
	case "ZOOM":
		return IntegrationProviderZoom, nil
	case "TWITTER":
		return IntegrationProviderTwitter, nil
	case "RECHARGE":
		return IntegrationProviderRecharge, nil
	case "STRIPE":
		return IntegrationProviderStripe, nil
	case "PROPERTY-FINDER":
		return IntegrationProviderPropertyFinder, nil
	case "SHOPIFY":
		return IntegrationProviderShopify, nil
	case "TWILIO":
		return IntegrationProviderTwilio, nil
	case "GITHUB":
		return IntegrationProviderGithub, nil
	case "POSTMARK":
		return IntegrationProviderPostmark, nil
	case "TYPEFORM":
		return IntegrationProviderTypeform, nil
	case "XERO":
		return IntegrationProviderXero, nil
	case "SVIX":
		return IntegrationProviderSvix, nil
	case "ADYEN":
		return IntegrationProviderAdyen, nil
	case "AKENEO":
		return IntegrationProviderAkeneo, nil
	case "GITLAB":
		return IntegrationProviderGitlab, nil
	case "WOOCOMMERCE":
		return IntegrationProviderWoocommerce, nil
	case "OURA":
		return IntegrationProviderOura, nil
	case "COMMERCELAYER":
		return IntegrationProviderCommercelayer, nil
	case "HUBSPOT":
		return IntegrationProviderHubspot, nil
	case "MAILGUN":
		return IntegrationProviderMailgun, nil
	case "PERSONA":
		return IntegrationProviderPersona, nil
	case "PIPEDRIVE":
		return IntegrationProviderPipedrive, nil
	case "SENDGRID":
		return IntegrationProviderSendgrid, nil
	case "WORKOS":
		return IntegrationProviderWorkos, nil
	case "SYNCTERA":
		return IntegrationProviderSynctera, nil
	case "AWS_SNS":
		return IntegrationProviderAwsSns, nil
	case "THREE_D_EYE":
		return IntegrationProviderThreeDEye, nil
	case "TWITCH":
		return IntegrationProviderTwitch, nil
	case "ENODE":
		return IntegrationProviderEnode, nil
	case "FAVRO":
		return IntegrationProviderFavro, nil
	case "LINEAR":
		return IntegrationProviderLinear, nil
	case "SHOPLINE":
		return IntegrationProviderShopline, nil
	case "WIX":
		return IntegrationProviderWix, nil
	case "NMI":
		return IntegrationProviderNmi, nil
	case "ORB":
		return IntegrationProviderOrb, nil
	case "PYLON":
		return IntegrationProviderPylon, nil
	case "RAZORPAY":
		return IntegrationProviderRazorpay, nil
	case "REPAY":
		return IntegrationProviderRepay, nil
	case "SQUARE":
		return IntegrationProviderSquare, nil
	case "SOLIDGATE":
		return IntegrationProviderSolidgate, nil
	case "TRELLO":
		return IntegrationProviderTrello, nil
	case "EBAY":
		return IntegrationProviderEbay, nil
	case "TELNYX":
		return IntegrationProviderTelnyx, nil
	case "DISCORD":
		return IntegrationProviderDiscord, nil
	case "TOKENIO":
		return IntegrationProviderTokenio, nil
	case "FISERV":
		return IntegrationProviderFiserv, nil
	case "BONDSMITH":
		return IntegrationProviderBondsmith, nil
	case "VERCEL_LOG_DRAINS":
		return IntegrationProviderVercelLogDrains, nil
	case "VERCEL":
		return IntegrationProviderVercel, nil
	case "TEBEX":
		return IntegrationProviderTebex, nil
	case "SLACK":
		return IntegrationProviderSlack, nil
	case "MAILCHIMP":
		return IntegrationProviderMailchimp, nil
	case "PADDLE":
		return IntegrationProviderPaddle, nil
	case "PAYPAL":
		return IntegrationProviderPaypal, nil
	case "TREEZOR":
		return IntegrationProviderTreezor, nil
	case "PRAXIS":
		return IntegrationProviderPraxis, nil
	case "CUSTOMERIO":
		return IntegrationProviderCustomerio, nil
	case "FACEBOOK":
		return IntegrationProviderFacebook, nil
	case "WHATSAPP":
		return IntegrationProviderWhatsapp, nil
	case "REPLICATE":
		return IntegrationProviderReplicate, nil
	case "TIKTOK":
		return IntegrationProviderTiktok, nil
	case "AIRWALLEX":
		return IntegrationProviderAirwallex, nil
	case "ZENDESK":
		return IntegrationProviderZendesk, nil
	case "UPOLLO":
		return IntegrationProviderUpollo, nil
	}
	var t IntegrationProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IntegrationProvider) Ptr() *IntegrationProvider {
	return &i
}

type Operators struct {
	Gt  *time.Time `json:"gt,omitempty" url:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty" url:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty" url:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty" url:"lte,omitempty"`
	Any *bool      `json:"any,omitempty" url:"any,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *Operators) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *Operators) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *Operators) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *Operators) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *Operators) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *Operators) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *Operators) UnmarshalJSON(data []byte) error {
	type embed Operators
	var unmarshaler = struct {
		embed
		Gt  *internal.DateTime `json:"gt,omitempty"`
		Gte *internal.DateTime `json:"gte,omitempty"`
		Le  *internal.DateTime `json:"le,omitempty"`
		Lte *internal.DateTime `json:"lte,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = Operators(unmarshaler.embed)
	o.Gt = unmarshaler.Gt.TimePtr()
	o.Gte = unmarshaler.Gte.TimePtr()
	o.Le = unmarshaler.Le.TimePtr()
	o.Lte = unmarshaler.Lte.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *Operators) MarshalJSON() ([]byte, error) {
	type embed Operators
	var marshaler = struct {
		embed
		Gt  *internal.DateTime `json:"gt,omitempty"`
		Gte *internal.DateTime `json:"gte,omitempty"`
		Le  *internal.DateTime `json:"le,omitempty"`
		Lte *internal.DateTime `json:"lte,omitempty"`
	}{
		embed: embed(*o),
		Gt:    internal.NewOptionalDateTime(o.Gt),
		Gte:   internal.NewOptionalDateTime(o.Gte),
		Le:    internal.NewOptionalDateTime(o.Le),
		Lte:   internal.NewOptionalDateTime(o.Lte),
	}
	return json.Marshal(marshaler)
}

func (o *Operators) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrderByDirection string

const (
	OrderByDirectionAsc  OrderByDirection = "asc"
	OrderByDirectionDesc OrderByDirection = "desc"
)

func NewOrderByDirectionFromString(s string) (OrderByDirection, error) {
	switch s {
	case "asc":
		return OrderByDirectionAsc, nil
	case "desc":
		return OrderByDirectionDesc, nil
	}
	var t OrderByDirection
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OrderByDirection) Ptr() *OrderByDirection {
	return &o
}

type RawBody struct {
	Body string `json:"body" url:"body"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RawBody) GetBody() string {
	if r == nil {
		return ""
	}
	return r.Body
}

func (r *RawBody) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RawBody) UnmarshalJSON(data []byte) error {
	type unmarshaler RawBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RawBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RawBody) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RequestRejectionCause string

const (
	RequestRejectionCauseSourceDisabled         RequestRejectionCause = "SOURCE_DISABLED"
	RequestRejectionCauseNoConnection           RequestRejectionCause = "NO_CONNECTION"
	RequestRejectionCauseVerificationFailed     RequestRejectionCause = "VERIFICATION_FAILED"
	RequestRejectionCauseUnsupportedHttpMethod  RequestRejectionCause = "UNSUPPORTED_HTTP_METHOD"
	RequestRejectionCauseUnsupportedContentType RequestRejectionCause = "UNSUPPORTED_CONTENT_TYPE"
	RequestRejectionCauseUnparsableJson         RequestRejectionCause = "UNPARSABLE_JSON"
	RequestRejectionCausePayloadTooLarge        RequestRejectionCause = "PAYLOAD_TOO_LARGE"
	RequestRejectionCauseIngestionFatal         RequestRejectionCause = "INGESTION_FATAL"
	RequestRejectionCauseUnknown                RequestRejectionCause = "UNKNOWN"
)

func NewRequestRejectionCauseFromString(s string) (RequestRejectionCause, error) {
	switch s {
	case "SOURCE_DISABLED":
		return RequestRejectionCauseSourceDisabled, nil
	case "NO_CONNECTION":
		return RequestRejectionCauseNoConnection, nil
	case "VERIFICATION_FAILED":
		return RequestRejectionCauseVerificationFailed, nil
	case "UNSUPPORTED_HTTP_METHOD":
		return RequestRejectionCauseUnsupportedHttpMethod, nil
	case "UNSUPPORTED_CONTENT_TYPE":
		return RequestRejectionCauseUnsupportedContentType, nil
	case "UNPARSABLE_JSON":
		return RequestRejectionCauseUnparsableJson, nil
	case "PAYLOAD_TOO_LARGE":
		return RequestRejectionCausePayloadTooLarge, nil
	case "INGESTION_FATAL":
		return RequestRejectionCauseIngestionFatal, nil
	case "UNKNOWN":
		return RequestRejectionCauseUnknown, nil
	}
	var t RequestRejectionCause
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RequestRejectionCause) Ptr() *RequestRejectionCause {
	return &r
}

type SeekPagination struct {
	OrderBy *SeekPaginationOrderBy `json:"order_by,omitempty" url:"order_by,omitempty"`
	Dir     *SeekPaginationDir     `json:"dir,omitempty" url:"dir,omitempty"`
	Limit   *int                   `json:"limit,omitempty" url:"limit,omitempty"`
	Prev    *string                `json:"prev,omitempty" url:"prev,omitempty"`
	Next    *string                `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SeekPagination) GetOrderBy() *SeekPaginationOrderBy {
	if s == nil {
		return nil
	}
	return s.OrderBy
}

func (s *SeekPagination) GetDir() *SeekPaginationDir {
	if s == nil {
		return nil
	}
	return s.Dir
}

func (s *SeekPagination) GetLimit() *int {
	if s == nil {
		return nil
	}
	return s.Limit
}

func (s *SeekPagination) GetPrev() *string {
	if s == nil {
		return nil
	}
	return s.Prev
}

func (s *SeekPagination) GetNext() *string {
	if s == nil {
		return nil
	}
	return s.Next
}

func (s *SeekPagination) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SeekPagination) UnmarshalJSON(data []byte) error {
	type unmarshaler SeekPagination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SeekPagination(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SeekPagination) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SeekPaginationDir struct {
	OrderByDirection     OrderByDirection
	OrderByDirectionList []OrderByDirection

	typ string
}

func NewSeekPaginationDirFromOrderByDirection(value OrderByDirection) *SeekPaginationDir {
	return &SeekPaginationDir{typ: "OrderByDirection", OrderByDirection: value}
}

func NewSeekPaginationDirFromOrderByDirectionList(value []OrderByDirection) *SeekPaginationDir {
	return &SeekPaginationDir{typ: "OrderByDirectionList", OrderByDirectionList: value}
}

func (s *SeekPaginationDir) GetOrderByDirection() OrderByDirection {
	if s == nil {
		return ""
	}
	return s.OrderByDirection
}

func (s *SeekPaginationDir) GetOrderByDirectionList() []OrderByDirection {
	if s == nil {
		return nil
	}
	return s.OrderByDirectionList
}

func (s *SeekPaginationDir) UnmarshalJSON(data []byte) error {
	var valueOrderByDirection OrderByDirection
	if err := json.Unmarshal(data, &valueOrderByDirection); err == nil {
		s.typ = "OrderByDirection"
		s.OrderByDirection = valueOrderByDirection
		return nil
	}
	var valueOrderByDirectionList []OrderByDirection
	if err := json.Unmarshal(data, &valueOrderByDirectionList); err == nil {
		s.typ = "OrderByDirectionList"
		s.OrderByDirectionList = valueOrderByDirectionList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SeekPaginationDir) MarshalJSON() ([]byte, error) {
	if s.typ == "OrderByDirection" || s.OrderByDirection != "" {
		return json.Marshal(s.OrderByDirection)
	}
	if s.typ == "OrderByDirectionList" || s.OrderByDirectionList != nil {
		return json.Marshal(s.OrderByDirectionList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SeekPaginationDirVisitor interface {
	VisitOrderByDirection(OrderByDirection) error
	VisitOrderByDirectionList([]OrderByDirection) error
}

func (s *SeekPaginationDir) Accept(visitor SeekPaginationDirVisitor) error {
	if s.typ == "OrderByDirection" || s.OrderByDirection != "" {
		return visitor.VisitOrderByDirection(s.OrderByDirection)
	}
	if s.typ == "OrderByDirectionList" || s.OrderByDirectionList != nil {
		return visitor.VisitOrderByDirectionList(s.OrderByDirectionList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SeekPaginationOrderBy struct {
	String     string
	StringList []string

	typ string
}

func NewSeekPaginationOrderByFromString(value string) *SeekPaginationOrderBy {
	return &SeekPaginationOrderBy{typ: "String", String: value}
}

func NewSeekPaginationOrderByFromStringList(value []string) *SeekPaginationOrderBy {
	return &SeekPaginationOrderBy{typ: "StringList", StringList: value}
}

func (s *SeekPaginationOrderBy) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *SeekPaginationOrderBy) GetStringList() []string {
	if s == nil {
		return nil
	}
	return s.StringList
}

func (s *SeekPaginationOrderBy) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		s.typ = "StringList"
		s.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SeekPaginationOrderBy) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "StringList" || s.StringList != nil {
		return json.Marshal(s.StringList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SeekPaginationOrderByVisitor interface {
	VisitString(string) error
	VisitStringList([]string) error
}

func (s *SeekPaginationOrderBy) Accept(visitor SeekPaginationOrderByVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "StringList" || s.StringList != nil {
		return visitor.VisitStringList(s.StringList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ShopifyIntegrationConfigs struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShopifyIntegrationConfigs) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *ShopifyIntegrationConfigs) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShopifyIntegrationConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler ShopifyIntegrationConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShopifyIntegrationConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShopifyIntegrationConfigs) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Request data
type ShortEventData struct {
	// Request path
	Path string `json:"path" url:"path"`
	// Raw query param string
	Query *string `json:"query,omitempty" url:"query,omitempty"`
	// JSON representation of query params
	ParsedQuery *ShortEventDataParsedQuery `json:"parsed_query,omitempty" url:"parsed_query,omitempty"`
	// JSON representation of the headers
	Headers *ShortEventDataHeaders `json:"headers,omitempty" url:"headers,omitempty"`
	// JSON or string representation of the body
	Body *ShortEventDataBody `json:"body,omitempty" url:"body,omitempty"`
	// Whether the payload is considered large payload and not searchable
	IsLargePayload *bool `json:"is_large_payload,omitempty" url:"is_large_payload,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShortEventData) GetPath() string {
	if s == nil {
		return ""
	}
	return s.Path
}

func (s *ShortEventData) GetQuery() *string {
	if s == nil {
		return nil
	}
	return s.Query
}

func (s *ShortEventData) GetParsedQuery() *ShortEventDataParsedQuery {
	if s == nil {
		return nil
	}
	return s.ParsedQuery
}

func (s *ShortEventData) GetHeaders() *ShortEventDataHeaders {
	if s == nil {
		return nil
	}
	return s.Headers
}

func (s *ShortEventData) GetBody() *ShortEventDataBody {
	if s == nil {
		return nil
	}
	return s.Body
}

func (s *ShortEventData) GetIsLargePayload() *bool {
	if s == nil {
		return nil
	}
	return s.IsLargePayload
}

func (s *ShortEventData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShortEventData) UnmarshalJSON(data []byte) error {
	type unmarshaler ShortEventData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShortEventData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShortEventData) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// JSON or string representation of the body
type ShortEventDataBody struct {
	String                string
	ShortEventDataBodyOne *ShortEventDataBodyOne
	UnknownList           []interface{}

	typ string
}

func NewShortEventDataBodyFromString(value string) *ShortEventDataBody {
	return &ShortEventDataBody{typ: "String", String: value}
}

func NewShortEventDataBodyFromShortEventDataBodyOne(value *ShortEventDataBodyOne) *ShortEventDataBody {
	return &ShortEventDataBody{typ: "ShortEventDataBodyOne", ShortEventDataBodyOne: value}
}

func NewShortEventDataBodyFromUnknownList(value []interface{}) *ShortEventDataBody {
	return &ShortEventDataBody{typ: "UnknownList", UnknownList: value}
}

func (s *ShortEventDataBody) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *ShortEventDataBody) GetShortEventDataBodyOne() *ShortEventDataBodyOne {
	if s == nil {
		return nil
	}
	return s.ShortEventDataBodyOne
}

func (s *ShortEventDataBody) GetUnknownList() []interface{} {
	if s == nil {
		return nil
	}
	return s.UnknownList
}

func (s *ShortEventDataBody) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	valueShortEventDataBodyOne := new(ShortEventDataBodyOne)
	if err := json.Unmarshal(data, &valueShortEventDataBodyOne); err == nil {
		s.typ = "ShortEventDataBodyOne"
		s.ShortEventDataBodyOne = valueShortEventDataBodyOne
		return nil
	}
	var valueUnknownList []interface{}
	if err := json.Unmarshal(data, &valueUnknownList); err == nil {
		s.typ = "UnknownList"
		s.UnknownList = valueUnknownList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ShortEventDataBody) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "ShortEventDataBodyOne" || s.ShortEventDataBodyOne != nil {
		return json.Marshal(s.ShortEventDataBodyOne)
	}
	if s.typ == "UnknownList" || s.UnknownList != nil {
		return json.Marshal(s.UnknownList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ShortEventDataBodyVisitor interface {
	VisitString(string) error
	VisitShortEventDataBodyOne(*ShortEventDataBodyOne) error
	VisitUnknownList([]interface{}) error
}

func (s *ShortEventDataBody) Accept(visitor ShortEventDataBodyVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "ShortEventDataBodyOne" || s.ShortEventDataBodyOne != nil {
		return visitor.VisitShortEventDataBodyOne(s.ShortEventDataBodyOne)
	}
	if s.typ == "UnknownList" || s.UnknownList != nil {
		return visitor.VisitUnknownList(s.UnknownList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ShortEventDataBodyOne struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShortEventDataBodyOne) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShortEventDataBodyOne) UnmarshalJSON(data []byte) error {
	type unmarshaler ShortEventDataBodyOne
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShortEventDataBodyOne(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShortEventDataBodyOne) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// JSON representation of the headers
type ShortEventDataHeaders struct {
	String                  string
	StringStringOptionalMap map[string]*string

	typ string
}

func NewShortEventDataHeadersFromString(value string) *ShortEventDataHeaders {
	return &ShortEventDataHeaders{typ: "String", String: value}
}

func NewShortEventDataHeadersFromStringStringOptionalMap(value map[string]*string) *ShortEventDataHeaders {
	return &ShortEventDataHeaders{typ: "StringStringOptionalMap", StringStringOptionalMap: value}
}

func (s *ShortEventDataHeaders) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *ShortEventDataHeaders) GetStringStringOptionalMap() map[string]*string {
	if s == nil {
		return nil
	}
	return s.StringStringOptionalMap
}

func (s *ShortEventDataHeaders) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	var valueStringStringOptionalMap map[string]*string
	if err := json.Unmarshal(data, &valueStringStringOptionalMap); err == nil {
		s.typ = "StringStringOptionalMap"
		s.StringStringOptionalMap = valueStringStringOptionalMap
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ShortEventDataHeaders) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "StringStringOptionalMap" || s.StringStringOptionalMap != nil {
		return json.Marshal(s.StringStringOptionalMap)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ShortEventDataHeadersVisitor interface {
	VisitString(string) error
	VisitStringStringOptionalMap(map[string]*string) error
}

func (s *ShortEventDataHeaders) Accept(visitor ShortEventDataHeadersVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "StringStringOptionalMap" || s.StringStringOptionalMap != nil {
		return visitor.VisitStringStringOptionalMap(s.StringStringOptionalMap)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// JSON representation of query params
type ShortEventDataParsedQuery struct {
	StringOptional               *string
	ShortEventDataParsedQueryOne *ShortEventDataParsedQueryOne

	typ string
}

func NewShortEventDataParsedQueryFromStringOptional(value *string) *ShortEventDataParsedQuery {
	return &ShortEventDataParsedQuery{typ: "StringOptional", StringOptional: value}
}

func NewShortEventDataParsedQueryFromShortEventDataParsedQueryOne(value *ShortEventDataParsedQueryOne) *ShortEventDataParsedQuery {
	return &ShortEventDataParsedQuery{typ: "ShortEventDataParsedQueryOne", ShortEventDataParsedQueryOne: value}
}

func (s *ShortEventDataParsedQuery) GetStringOptional() *string {
	if s == nil {
		return nil
	}
	return s.StringOptional
}

func (s *ShortEventDataParsedQuery) GetShortEventDataParsedQueryOne() *ShortEventDataParsedQueryOne {
	if s == nil {
		return nil
	}
	return s.ShortEventDataParsedQueryOne
}

func (s *ShortEventDataParsedQuery) UnmarshalJSON(data []byte) error {
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		s.typ = "StringOptional"
		s.StringOptional = valueStringOptional
		return nil
	}
	valueShortEventDataParsedQueryOne := new(ShortEventDataParsedQueryOne)
	if err := json.Unmarshal(data, &valueShortEventDataParsedQueryOne); err == nil {
		s.typ = "ShortEventDataParsedQueryOne"
		s.ShortEventDataParsedQueryOne = valueShortEventDataParsedQueryOne
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ShortEventDataParsedQuery) MarshalJSON() ([]byte, error) {
	if s.typ == "StringOptional" || s.StringOptional != nil {
		return json.Marshal(s.StringOptional)
	}
	if s.typ == "ShortEventDataParsedQueryOne" || s.ShortEventDataParsedQueryOne != nil {
		return json.Marshal(s.ShortEventDataParsedQueryOne)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ShortEventDataParsedQueryVisitor interface {
	VisitStringOptional(*string) error
	VisitShortEventDataParsedQueryOne(*ShortEventDataParsedQueryOne) error
}

func (s *ShortEventDataParsedQuery) Accept(visitor ShortEventDataParsedQueryVisitor) error {
	if s.typ == "StringOptional" || s.StringOptional != nil {
		return visitor.VisitStringOptional(s.StringOptional)
	}
	if s.typ == "ShortEventDataParsedQueryOne" || s.ShortEventDataParsedQueryOne != nil {
		return visitor.VisitShortEventDataParsedQueryOne(s.ShortEventDataParsedQueryOne)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type ShortEventDataParsedQueryOne struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShortEventDataParsedQueryOne) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShortEventDataParsedQueryOne) UnmarshalJSON(data []byte) error {
	type unmarshaler ShortEventDataParsedQueryOne
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShortEventDataParsedQueryOne(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShortEventDataParsedQueryOne) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Associated [Source](#source-object) object
type Source struct {
	// ID of the source
	Id string `json:"id" url:"id"`
	// Name for the source
	Name string `json:"name" url:"name"`
	// Description of the source
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// ID of the project
	TeamId string `json:"team_id" url:"team_id"`
	// A unique URL that must be supplied to your webhook's provider
	Url                string                   `json:"url" url:"url"`
	Verification       *VerificationConfig      `json:"verification,omitempty" url:"verification,omitempty"`
	AllowedHttpMethods *SourceAllowedHttpMethod `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	CustomResponse     *SourceCustomResponse    `json:"custom_response,omitempty" url:"custom_response,omitempty"`
	// Date the source was disabled
	DisabledAt *time.Time `json:"disabled_at,omitempty" url:"disabled_at,omitempty"`
	// Date the source was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Date the source was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Type of the source
	Type   *string       `json:"type,omitempty" url:"type,omitempty"`
	Config *SourceConfig `json:"config,omitempty" url:"config,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Source) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *Source) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *Source) GetDescription() *string {
	if s == nil {
		return nil
	}
	return s.Description
}

func (s *Source) GetTeamId() string {
	if s == nil {
		return ""
	}
	return s.TeamId
}

func (s *Source) GetUrl() string {
	if s == nil {
		return ""
	}
	return s.Url
}

func (s *Source) GetVerification() *VerificationConfig {
	if s == nil {
		return nil
	}
	return s.Verification
}

func (s *Source) GetAllowedHttpMethods() *SourceAllowedHttpMethod {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *Source) GetCustomResponse() *SourceCustomResponse {
	if s == nil {
		return nil
	}
	return s.CustomResponse
}

func (s *Source) GetDisabledAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.DisabledAt
}

func (s *Source) GetUpdatedAt() time.Time {
	if s == nil {
		return time.Time{}
	}
	return s.UpdatedAt
}

func (s *Source) GetCreatedAt() time.Time {
	if s == nil {
		return time.Time{}
	}
	return s.CreatedAt
}

func (s *Source) GetType() *string {
	if s == nil {
		return nil
	}
	return s.Type
}

func (s *Source) GetConfig() *SourceConfig {
	if s == nil {
		return nil
	}
	return s.Config
}

func (s *Source) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Source) UnmarshalJSON(data []byte) error {
	type embed Source
	var unmarshaler = struct {
		embed
		DisabledAt *internal.DateTime `json:"disabled_at,omitempty"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
		CreatedAt  *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = Source(unmarshaler.embed)
	s.DisabledAt = unmarshaler.DisabledAt.TimePtr()
	s.UpdatedAt = unmarshaler.UpdatedAt.Time()
	s.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Source) MarshalJSON() ([]byte, error) {
	type embed Source
	var marshaler = struct {
		embed
		DisabledAt *internal.DateTime `json:"disabled_at,omitempty"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
		CreatedAt  *internal.DateTime `json:"created_at"`
	}{
		embed:      embed(*s),
		DisabledAt: internal.NewOptionalDateTime(s.DisabledAt),
		UpdatedAt:  internal.NewDateTime(s.UpdatedAt),
		CreatedAt:  internal.NewDateTime(s.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (s *Source) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// List of allowed HTTP methods. Defaults to PUT, POST, PATCH, DELETE.
type SourceAllowedHttpMethod = []SourceAllowedHttpMethodItem

type SourceAllowedHttpMethodItem string

const (
	SourceAllowedHttpMethodItemGet    SourceAllowedHttpMethodItem = "GET"
	SourceAllowedHttpMethodItemPost   SourceAllowedHttpMethodItem = "POST"
	SourceAllowedHttpMethodItemPut    SourceAllowedHttpMethodItem = "PUT"
	SourceAllowedHttpMethodItemPatch  SourceAllowedHttpMethodItem = "PATCH"
	SourceAllowedHttpMethodItemDelete SourceAllowedHttpMethodItem = "DELETE"
)

func NewSourceAllowedHttpMethodItemFromString(s string) (SourceAllowedHttpMethodItem, error) {
	switch s {
	case "GET":
		return SourceAllowedHttpMethodItemGet, nil
	case "POST":
		return SourceAllowedHttpMethodItemPost, nil
	case "PUT":
		return SourceAllowedHttpMethodItemPut, nil
	case "PATCH":
		return SourceAllowedHttpMethodItemPatch, nil
	case "DELETE":
		return SourceAllowedHttpMethodItemDelete, nil
	}
	var t SourceAllowedHttpMethodItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceAllowedHttpMethodItem) Ptr() *SourceAllowedHttpMethodItem {
	return &s
}

// Configuration object for the source type
type SourceConfig struct {
	Verification       *VerificationConfig      `json:"verification,omitempty" url:"verification,omitempty"`
	AllowedHttpMethods *SourceAllowedHttpMethod `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	CustomResponse     *SourceCustomResponse    `json:"custom_response,omitempty" url:"custom_response,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceConfig) GetVerification() *VerificationConfig {
	if s == nil {
		return nil
	}
	return s.Verification
}

func (s *SourceConfig) GetAllowedHttpMethods() *SourceAllowedHttpMethod {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceConfig) GetCustomResponse() *SourceCustomResponse {
	if s == nil {
		return nil
	}
	return s.CustomResponse
}

func (s *SourceConfig) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceConfig) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Custom response object
type SourceCustomResponse struct {
	ContentType SourceCustomResponseContentType `json:"content_type" url:"content_type"`
	// Body of the custom response
	Body string `json:"body" url:"body"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceCustomResponse) GetContentType() SourceCustomResponseContentType {
	if s == nil {
		return ""
	}
	return s.ContentType
}

func (s *SourceCustomResponse) GetBody() string {
	if s == nil {
		return ""
	}
	return s.Body
}

func (s *SourceCustomResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceCustomResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceCustomResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceCustomResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceCustomResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Content type of the custom response
type SourceCustomResponseContentType string

const (
	SourceCustomResponseContentTypeJson SourceCustomResponseContentType = "json"
	SourceCustomResponseContentTypeText SourceCustomResponseContentType = "text"
	SourceCustomResponseContentTypeXml  SourceCustomResponseContentType = "xml"
)

func NewSourceCustomResponseContentTypeFromString(s string) (SourceCustomResponseContentType, error) {
	switch s {
	case "json":
		return SourceCustomResponseContentTypeJson, nil
	case "text":
		return SourceCustomResponseContentTypeText, nil
	case "xml":
		return SourceCustomResponseContentTypeXml, nil
	}
	var t SourceCustomResponseContentType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceCustomResponseContentType) Ptr() *SourceCustomResponseContentType {
	return &s
}

// The type configs for the specified type
type SourceTypeConfig struct {
	SourceTypeConfigHmac              *SourceTypeConfigHmac
	SourceTypeConfigBasicAuth         *SourceTypeConfigBasicAuth
	SourceTypeConfigApiKey            *SourceTypeConfigApiKey
	SourceTypeConfigWebhook           *SourceTypeConfigWebhook
	SourceTypeConfigHttp              *SourceTypeConfigHttp
	SourceTypeConfigSanity            *SourceTypeConfigSanity
	SourceTypeConfigBridge            *SourceTypeConfigBridge
	SourceTypeConfigCloudSignal       *SourceTypeConfigCloudSignal
	SourceTypeConfigCourier           *SourceTypeConfigCourier
	SourceTypeConfigFrontApp          *SourceTypeConfigFrontApp
	SourceTypeConfigZoom              *SourceTypeConfigZoom
	SourceTypeConfigTwitter           *SourceTypeConfigTwitter
	SourceTypeConfigStripe            *SourceTypeConfigStripe
	SourceTypeConfigPropertyFinder    *SourceTypeConfigPropertyFinder
	SourceTypeConfigShopify           *SourceTypeConfigShopify
	SourceTypeConfigTwilio            *SourceTypeConfigTwilio
	SourceTypeConfigGitHub            *SourceTypeConfigGitHub
	SourceTypeConfigPostmark          *SourceTypeConfigPostmark
	SourceTypeConfigTypeform          *SourceTypeConfigTypeform
	SourceTypeConfigXero              *SourceTypeConfigXero
	SourceTypeConfigSvix              *SourceTypeConfigSvix
	SourceTypeConfigAdyen             *SourceTypeConfigAdyen
	SourceTypeConfigAkeneo            *SourceTypeConfigAkeneo
	SourceTypeConfigGitLab            *SourceTypeConfigGitLab
	SourceTypeConfigWooCommerce       *SourceTypeConfigWooCommerce
	SourceTypeConfigOura              *SourceTypeConfigOura
	SourceTypeConfigCommerceLayer     *SourceTypeConfigCommerceLayer
	SourceTypeConfigHubspot           *SourceTypeConfigHubspot
	SourceTypeConfigMailgun           *SourceTypeConfigMailgun
	SourceTypeConfigPersona           *SourceTypeConfigPersona
	SourceTypeConfigPipedrive         *SourceTypeConfigPipedrive
	SourceTypeConfigSendgrid          *SourceTypeConfigSendgrid
	SourceTypeConfigWorkOs            *SourceTypeConfigWorkOs
	SourceTypeConfigSynctera          *SourceTypeConfigSynctera
	SourceTypeConfigAwssns            *SourceTypeConfigAwssns
	SourceTypeConfigTwitch            *SourceTypeConfigTwitch
	SourceTypeConfigEnode             *SourceTypeConfigEnode
	SourceTypeConfigFavro             *SourceTypeConfigFavro
	SourceTypeConfigLinear            *SourceTypeConfigLinear
	SourceTypeConfigShopline          *SourceTypeConfigShopline
	SourceTypeConfigWix               *SourceTypeConfigWix
	SourceTypeConfigNmiPaymentGateway *SourceTypeConfigNmiPaymentGateway
	SourceTypeConfigOrb               *SourceTypeConfigOrb
	SourceTypeConfigPylon             *SourceTypeConfigPylon
	SourceTypeConfigRazorpay          *SourceTypeConfigRazorpay
	SourceTypeConfigSquare            *SourceTypeConfigSquare
	SourceTypeConfigSolidgate         *SourceTypeConfigSolidgate
	SourceTypeConfigTrello            *SourceTypeConfigTrello
	SourceTypeConfigEbay              *SourceTypeConfigEbay
	SourceTypeConfigTelnyx            *SourceTypeConfigTelnyx
	SourceTypeConfigDiscord           *SourceTypeConfigDiscord
	SourceTypeConfigTokenIo           *SourceTypeConfigTokenIo
	SourceTypeConfigFiserv            *SourceTypeConfigFiserv
	SourceTypeConfigBondsmith         *SourceTypeConfigBondsmith
	SourceTypeConfigVercelLogDrains   *SourceTypeConfigVercelLogDrains
	SourceTypeConfigVercelWebhooks    *SourceTypeConfigVercelWebhooks
	SourceTypeConfigSlack             *SourceTypeConfigSlack
	SourceTypeConfigMailchimp         *SourceTypeConfigMailchimp
	SourceTypeConfigPaddle            *SourceTypeConfigPaddle
	SourceTypeConfigPaypal            *SourceTypeConfigPaypal
	SourceTypeConfigTreezor           *SourceTypeConfigTreezor
	SourceTypeConfigPraxis            *SourceTypeConfigPraxis
	SourceTypeConfigCustomerIo        *SourceTypeConfigCustomerIo
	SourceTypeConfigFacebook          *SourceTypeConfigFacebook
	SourceTypeConfigWhatsApp          *SourceTypeConfigWhatsApp
	SourceTypeConfigUpollo            *SourceTypeConfigUpollo

	typ string
}

func NewSourceTypeConfigFromSourceTypeConfigHmac(value *SourceTypeConfigHmac) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigHmac", SourceTypeConfigHmac: value}
}

func NewSourceTypeConfigFromSourceTypeConfigBasicAuth(value *SourceTypeConfigBasicAuth) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigBasicAuth", SourceTypeConfigBasicAuth: value}
}

func NewSourceTypeConfigFromSourceTypeConfigApiKey(value *SourceTypeConfigApiKey) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigApiKey", SourceTypeConfigApiKey: value}
}

func NewSourceTypeConfigFromSourceTypeConfigWebhook(value *SourceTypeConfigWebhook) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigWebhook", SourceTypeConfigWebhook: value}
}

func NewSourceTypeConfigFromSourceTypeConfigHttp(value *SourceTypeConfigHttp) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigHttp", SourceTypeConfigHttp: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSanity(value *SourceTypeConfigSanity) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSanity", SourceTypeConfigSanity: value}
}

func NewSourceTypeConfigFromSourceTypeConfigBridge(value *SourceTypeConfigBridge) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigBridge", SourceTypeConfigBridge: value}
}

func NewSourceTypeConfigFromSourceTypeConfigCloudSignal(value *SourceTypeConfigCloudSignal) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigCloudSignal", SourceTypeConfigCloudSignal: value}
}

func NewSourceTypeConfigFromSourceTypeConfigCourier(value *SourceTypeConfigCourier) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigCourier", SourceTypeConfigCourier: value}
}

func NewSourceTypeConfigFromSourceTypeConfigFrontApp(value *SourceTypeConfigFrontApp) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigFrontApp", SourceTypeConfigFrontApp: value}
}

func NewSourceTypeConfigFromSourceTypeConfigZoom(value *SourceTypeConfigZoom) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigZoom", SourceTypeConfigZoom: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTwitter(value *SourceTypeConfigTwitter) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTwitter", SourceTypeConfigTwitter: value}
}

func NewSourceTypeConfigFromSourceTypeConfigStripe(value *SourceTypeConfigStripe) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigStripe", SourceTypeConfigStripe: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPropertyFinder(value *SourceTypeConfigPropertyFinder) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPropertyFinder", SourceTypeConfigPropertyFinder: value}
}

func NewSourceTypeConfigFromSourceTypeConfigShopify(value *SourceTypeConfigShopify) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigShopify", SourceTypeConfigShopify: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTwilio(value *SourceTypeConfigTwilio) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTwilio", SourceTypeConfigTwilio: value}
}

func NewSourceTypeConfigFromSourceTypeConfigGitHub(value *SourceTypeConfigGitHub) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigGitHub", SourceTypeConfigGitHub: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPostmark(value *SourceTypeConfigPostmark) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPostmark", SourceTypeConfigPostmark: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTypeform(value *SourceTypeConfigTypeform) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTypeform", SourceTypeConfigTypeform: value}
}

func NewSourceTypeConfigFromSourceTypeConfigXero(value *SourceTypeConfigXero) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigXero", SourceTypeConfigXero: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSvix(value *SourceTypeConfigSvix) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSvix", SourceTypeConfigSvix: value}
}

func NewSourceTypeConfigFromSourceTypeConfigAdyen(value *SourceTypeConfigAdyen) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigAdyen", SourceTypeConfigAdyen: value}
}

func NewSourceTypeConfigFromSourceTypeConfigAkeneo(value *SourceTypeConfigAkeneo) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigAkeneo", SourceTypeConfigAkeneo: value}
}

func NewSourceTypeConfigFromSourceTypeConfigGitLab(value *SourceTypeConfigGitLab) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigGitLab", SourceTypeConfigGitLab: value}
}

func NewSourceTypeConfigFromSourceTypeConfigWooCommerce(value *SourceTypeConfigWooCommerce) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigWooCommerce", SourceTypeConfigWooCommerce: value}
}

func NewSourceTypeConfigFromSourceTypeConfigOura(value *SourceTypeConfigOura) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigOura", SourceTypeConfigOura: value}
}

func NewSourceTypeConfigFromSourceTypeConfigCommerceLayer(value *SourceTypeConfigCommerceLayer) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigCommerceLayer", SourceTypeConfigCommerceLayer: value}
}

func NewSourceTypeConfigFromSourceTypeConfigHubspot(value *SourceTypeConfigHubspot) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigHubspot", SourceTypeConfigHubspot: value}
}

func NewSourceTypeConfigFromSourceTypeConfigMailgun(value *SourceTypeConfigMailgun) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigMailgun", SourceTypeConfigMailgun: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPersona(value *SourceTypeConfigPersona) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPersona", SourceTypeConfigPersona: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPipedrive(value *SourceTypeConfigPipedrive) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPipedrive", SourceTypeConfigPipedrive: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSendgrid(value *SourceTypeConfigSendgrid) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSendgrid", SourceTypeConfigSendgrid: value}
}

func NewSourceTypeConfigFromSourceTypeConfigWorkOs(value *SourceTypeConfigWorkOs) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigWorkOs", SourceTypeConfigWorkOs: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSynctera(value *SourceTypeConfigSynctera) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSynctera", SourceTypeConfigSynctera: value}
}

func NewSourceTypeConfigFromSourceTypeConfigAwssns(value *SourceTypeConfigAwssns) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigAwssns", SourceTypeConfigAwssns: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTwitch(value *SourceTypeConfigTwitch) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTwitch", SourceTypeConfigTwitch: value}
}

func NewSourceTypeConfigFromSourceTypeConfigEnode(value *SourceTypeConfigEnode) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigEnode", SourceTypeConfigEnode: value}
}

func NewSourceTypeConfigFromSourceTypeConfigFavro(value *SourceTypeConfigFavro) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigFavro", SourceTypeConfigFavro: value}
}

func NewSourceTypeConfigFromSourceTypeConfigLinear(value *SourceTypeConfigLinear) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigLinear", SourceTypeConfigLinear: value}
}

func NewSourceTypeConfigFromSourceTypeConfigShopline(value *SourceTypeConfigShopline) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigShopline", SourceTypeConfigShopline: value}
}

func NewSourceTypeConfigFromSourceTypeConfigWix(value *SourceTypeConfigWix) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigWix", SourceTypeConfigWix: value}
}

func NewSourceTypeConfigFromSourceTypeConfigNmiPaymentGateway(value *SourceTypeConfigNmiPaymentGateway) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigNmiPaymentGateway", SourceTypeConfigNmiPaymentGateway: value}
}

func NewSourceTypeConfigFromSourceTypeConfigOrb(value *SourceTypeConfigOrb) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigOrb", SourceTypeConfigOrb: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPylon(value *SourceTypeConfigPylon) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPylon", SourceTypeConfigPylon: value}
}

func NewSourceTypeConfigFromSourceTypeConfigRazorpay(value *SourceTypeConfigRazorpay) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigRazorpay", SourceTypeConfigRazorpay: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSquare(value *SourceTypeConfigSquare) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSquare", SourceTypeConfigSquare: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSolidgate(value *SourceTypeConfigSolidgate) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSolidgate", SourceTypeConfigSolidgate: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTrello(value *SourceTypeConfigTrello) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTrello", SourceTypeConfigTrello: value}
}

func NewSourceTypeConfigFromSourceTypeConfigEbay(value *SourceTypeConfigEbay) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigEbay", SourceTypeConfigEbay: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTelnyx(value *SourceTypeConfigTelnyx) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTelnyx", SourceTypeConfigTelnyx: value}
}

func NewSourceTypeConfigFromSourceTypeConfigDiscord(value *SourceTypeConfigDiscord) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigDiscord", SourceTypeConfigDiscord: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTokenIo(value *SourceTypeConfigTokenIo) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTokenIo", SourceTypeConfigTokenIo: value}
}

func NewSourceTypeConfigFromSourceTypeConfigFiserv(value *SourceTypeConfigFiserv) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigFiserv", SourceTypeConfigFiserv: value}
}

func NewSourceTypeConfigFromSourceTypeConfigBondsmith(value *SourceTypeConfigBondsmith) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigBondsmith", SourceTypeConfigBondsmith: value}
}

func NewSourceTypeConfigFromSourceTypeConfigVercelLogDrains(value *SourceTypeConfigVercelLogDrains) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigVercelLogDrains", SourceTypeConfigVercelLogDrains: value}
}

func NewSourceTypeConfigFromSourceTypeConfigVercelWebhooks(value *SourceTypeConfigVercelWebhooks) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigVercelWebhooks", SourceTypeConfigVercelWebhooks: value}
}

func NewSourceTypeConfigFromSourceTypeConfigSlack(value *SourceTypeConfigSlack) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigSlack", SourceTypeConfigSlack: value}
}

func NewSourceTypeConfigFromSourceTypeConfigMailchimp(value *SourceTypeConfigMailchimp) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigMailchimp", SourceTypeConfigMailchimp: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPaddle(value *SourceTypeConfigPaddle) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPaddle", SourceTypeConfigPaddle: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPaypal(value *SourceTypeConfigPaypal) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPaypal", SourceTypeConfigPaypal: value}
}

func NewSourceTypeConfigFromSourceTypeConfigTreezor(value *SourceTypeConfigTreezor) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigTreezor", SourceTypeConfigTreezor: value}
}

func NewSourceTypeConfigFromSourceTypeConfigPraxis(value *SourceTypeConfigPraxis) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigPraxis", SourceTypeConfigPraxis: value}
}

func NewSourceTypeConfigFromSourceTypeConfigCustomerIo(value *SourceTypeConfigCustomerIo) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigCustomerIo", SourceTypeConfigCustomerIo: value}
}

func NewSourceTypeConfigFromSourceTypeConfigFacebook(value *SourceTypeConfigFacebook) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigFacebook", SourceTypeConfigFacebook: value}
}

func NewSourceTypeConfigFromSourceTypeConfigWhatsApp(value *SourceTypeConfigWhatsApp) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigWhatsApp", SourceTypeConfigWhatsApp: value}
}

func NewSourceTypeConfigFromSourceTypeConfigUpollo(value *SourceTypeConfigUpollo) *SourceTypeConfig {
	return &SourceTypeConfig{typ: "SourceTypeConfigUpollo", SourceTypeConfigUpollo: value}
}

func (s *SourceTypeConfig) GetSourceTypeConfigHmac() *SourceTypeConfigHmac {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHmac
}

func (s *SourceTypeConfig) GetSourceTypeConfigBasicAuth() *SourceTypeConfigBasicAuth {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigBasicAuth
}

func (s *SourceTypeConfig) GetSourceTypeConfigApiKey() *SourceTypeConfigApiKey {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigApiKey
}

func (s *SourceTypeConfig) GetSourceTypeConfigWebhook() *SourceTypeConfigWebhook {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWebhook
}

func (s *SourceTypeConfig) GetSourceTypeConfigHttp() *SourceTypeConfigHttp {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHttp
}

func (s *SourceTypeConfig) GetSourceTypeConfigSanity() *SourceTypeConfigSanity {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSanity
}

func (s *SourceTypeConfig) GetSourceTypeConfigBridge() *SourceTypeConfigBridge {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigBridge
}

func (s *SourceTypeConfig) GetSourceTypeConfigCloudSignal() *SourceTypeConfigCloudSignal {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigCloudSignal
}

func (s *SourceTypeConfig) GetSourceTypeConfigCourier() *SourceTypeConfigCourier {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigCourier
}

func (s *SourceTypeConfig) GetSourceTypeConfigFrontApp() *SourceTypeConfigFrontApp {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigFrontApp
}

func (s *SourceTypeConfig) GetSourceTypeConfigZoom() *SourceTypeConfigZoom {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigZoom
}

func (s *SourceTypeConfig) GetSourceTypeConfigTwitter() *SourceTypeConfigTwitter {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTwitter
}

func (s *SourceTypeConfig) GetSourceTypeConfigStripe() *SourceTypeConfigStripe {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigStripe
}

func (s *SourceTypeConfig) GetSourceTypeConfigPropertyFinder() *SourceTypeConfigPropertyFinder {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPropertyFinder
}

func (s *SourceTypeConfig) GetSourceTypeConfigShopify() *SourceTypeConfigShopify {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigShopify
}

func (s *SourceTypeConfig) GetSourceTypeConfigTwilio() *SourceTypeConfigTwilio {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTwilio
}

func (s *SourceTypeConfig) GetSourceTypeConfigGitHub() *SourceTypeConfigGitHub {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigGitHub
}

func (s *SourceTypeConfig) GetSourceTypeConfigPostmark() *SourceTypeConfigPostmark {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPostmark
}

func (s *SourceTypeConfig) GetSourceTypeConfigTypeform() *SourceTypeConfigTypeform {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTypeform
}

func (s *SourceTypeConfig) GetSourceTypeConfigXero() *SourceTypeConfigXero {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigXero
}

func (s *SourceTypeConfig) GetSourceTypeConfigSvix() *SourceTypeConfigSvix {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSvix
}

func (s *SourceTypeConfig) GetSourceTypeConfigAdyen() *SourceTypeConfigAdyen {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigAdyen
}

func (s *SourceTypeConfig) GetSourceTypeConfigAkeneo() *SourceTypeConfigAkeneo {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigAkeneo
}

func (s *SourceTypeConfig) GetSourceTypeConfigGitLab() *SourceTypeConfigGitLab {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigGitLab
}

func (s *SourceTypeConfig) GetSourceTypeConfigWooCommerce() *SourceTypeConfigWooCommerce {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWooCommerce
}

func (s *SourceTypeConfig) GetSourceTypeConfigOura() *SourceTypeConfigOura {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigOura
}

func (s *SourceTypeConfig) GetSourceTypeConfigCommerceLayer() *SourceTypeConfigCommerceLayer {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigCommerceLayer
}

func (s *SourceTypeConfig) GetSourceTypeConfigHubspot() *SourceTypeConfigHubspot {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHubspot
}

func (s *SourceTypeConfig) GetSourceTypeConfigMailgun() *SourceTypeConfigMailgun {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigMailgun
}

func (s *SourceTypeConfig) GetSourceTypeConfigPersona() *SourceTypeConfigPersona {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPersona
}

func (s *SourceTypeConfig) GetSourceTypeConfigPipedrive() *SourceTypeConfigPipedrive {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPipedrive
}

func (s *SourceTypeConfig) GetSourceTypeConfigSendgrid() *SourceTypeConfigSendgrid {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSendgrid
}

func (s *SourceTypeConfig) GetSourceTypeConfigWorkOs() *SourceTypeConfigWorkOs {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWorkOs
}

func (s *SourceTypeConfig) GetSourceTypeConfigSynctera() *SourceTypeConfigSynctera {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSynctera
}

func (s *SourceTypeConfig) GetSourceTypeConfigAwssns() *SourceTypeConfigAwssns {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigAwssns
}

func (s *SourceTypeConfig) GetSourceTypeConfigTwitch() *SourceTypeConfigTwitch {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTwitch
}

func (s *SourceTypeConfig) GetSourceTypeConfigEnode() *SourceTypeConfigEnode {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigEnode
}

func (s *SourceTypeConfig) GetSourceTypeConfigFavro() *SourceTypeConfigFavro {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigFavro
}

func (s *SourceTypeConfig) GetSourceTypeConfigLinear() *SourceTypeConfigLinear {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigLinear
}

func (s *SourceTypeConfig) GetSourceTypeConfigShopline() *SourceTypeConfigShopline {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigShopline
}

func (s *SourceTypeConfig) GetSourceTypeConfigWix() *SourceTypeConfigWix {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWix
}

func (s *SourceTypeConfig) GetSourceTypeConfigNmiPaymentGateway() *SourceTypeConfigNmiPaymentGateway {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigNmiPaymentGateway
}

func (s *SourceTypeConfig) GetSourceTypeConfigOrb() *SourceTypeConfigOrb {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigOrb
}

func (s *SourceTypeConfig) GetSourceTypeConfigPylon() *SourceTypeConfigPylon {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPylon
}

func (s *SourceTypeConfig) GetSourceTypeConfigRazorpay() *SourceTypeConfigRazorpay {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigRazorpay
}

func (s *SourceTypeConfig) GetSourceTypeConfigSquare() *SourceTypeConfigSquare {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSquare
}

func (s *SourceTypeConfig) GetSourceTypeConfigSolidgate() *SourceTypeConfigSolidgate {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSolidgate
}

func (s *SourceTypeConfig) GetSourceTypeConfigTrello() *SourceTypeConfigTrello {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTrello
}

func (s *SourceTypeConfig) GetSourceTypeConfigEbay() *SourceTypeConfigEbay {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigEbay
}

func (s *SourceTypeConfig) GetSourceTypeConfigTelnyx() *SourceTypeConfigTelnyx {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTelnyx
}

func (s *SourceTypeConfig) GetSourceTypeConfigDiscord() *SourceTypeConfigDiscord {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigDiscord
}

func (s *SourceTypeConfig) GetSourceTypeConfigTokenIo() *SourceTypeConfigTokenIo {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTokenIo
}

func (s *SourceTypeConfig) GetSourceTypeConfigFiserv() *SourceTypeConfigFiserv {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigFiserv
}

func (s *SourceTypeConfig) GetSourceTypeConfigBondsmith() *SourceTypeConfigBondsmith {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigBondsmith
}

func (s *SourceTypeConfig) GetSourceTypeConfigVercelLogDrains() *SourceTypeConfigVercelLogDrains {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigVercelLogDrains
}

func (s *SourceTypeConfig) GetSourceTypeConfigVercelWebhooks() *SourceTypeConfigVercelWebhooks {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigVercelWebhooks
}

func (s *SourceTypeConfig) GetSourceTypeConfigSlack() *SourceTypeConfigSlack {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigSlack
}

func (s *SourceTypeConfig) GetSourceTypeConfigMailchimp() *SourceTypeConfigMailchimp {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigMailchimp
}

func (s *SourceTypeConfig) GetSourceTypeConfigPaddle() *SourceTypeConfigPaddle {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPaddle
}

func (s *SourceTypeConfig) GetSourceTypeConfigPaypal() *SourceTypeConfigPaypal {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPaypal
}

func (s *SourceTypeConfig) GetSourceTypeConfigTreezor() *SourceTypeConfigTreezor {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigTreezor
}

func (s *SourceTypeConfig) GetSourceTypeConfigPraxis() *SourceTypeConfigPraxis {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigPraxis
}

func (s *SourceTypeConfig) GetSourceTypeConfigCustomerIo() *SourceTypeConfigCustomerIo {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigCustomerIo
}

func (s *SourceTypeConfig) GetSourceTypeConfigFacebook() *SourceTypeConfigFacebook {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigFacebook
}

func (s *SourceTypeConfig) GetSourceTypeConfigWhatsApp() *SourceTypeConfigWhatsApp {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWhatsApp
}

func (s *SourceTypeConfig) GetSourceTypeConfigUpollo() *SourceTypeConfigUpollo {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigUpollo
}

func (s *SourceTypeConfig) UnmarshalJSON(data []byte) error {
	valueSourceTypeConfigHmac := new(SourceTypeConfigHmac)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHmac); err == nil {
		s.typ = "SourceTypeConfigHmac"
		s.SourceTypeConfigHmac = valueSourceTypeConfigHmac
		return nil
	}
	valueSourceTypeConfigBasicAuth := new(SourceTypeConfigBasicAuth)
	if err := json.Unmarshal(data, &valueSourceTypeConfigBasicAuth); err == nil {
		s.typ = "SourceTypeConfigBasicAuth"
		s.SourceTypeConfigBasicAuth = valueSourceTypeConfigBasicAuth
		return nil
	}
	valueSourceTypeConfigApiKey := new(SourceTypeConfigApiKey)
	if err := json.Unmarshal(data, &valueSourceTypeConfigApiKey); err == nil {
		s.typ = "SourceTypeConfigApiKey"
		s.SourceTypeConfigApiKey = valueSourceTypeConfigApiKey
		return nil
	}
	valueSourceTypeConfigWebhook := new(SourceTypeConfigWebhook)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWebhook); err == nil {
		s.typ = "SourceTypeConfigWebhook"
		s.SourceTypeConfigWebhook = valueSourceTypeConfigWebhook
		return nil
	}
	valueSourceTypeConfigHttp := new(SourceTypeConfigHttp)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHttp); err == nil {
		s.typ = "SourceTypeConfigHttp"
		s.SourceTypeConfigHttp = valueSourceTypeConfigHttp
		return nil
	}
	valueSourceTypeConfigSanity := new(SourceTypeConfigSanity)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSanity); err == nil {
		s.typ = "SourceTypeConfigSanity"
		s.SourceTypeConfigSanity = valueSourceTypeConfigSanity
		return nil
	}
	valueSourceTypeConfigBridge := new(SourceTypeConfigBridge)
	if err := json.Unmarshal(data, &valueSourceTypeConfigBridge); err == nil {
		s.typ = "SourceTypeConfigBridge"
		s.SourceTypeConfigBridge = valueSourceTypeConfigBridge
		return nil
	}
	valueSourceTypeConfigCloudSignal := new(SourceTypeConfigCloudSignal)
	if err := json.Unmarshal(data, &valueSourceTypeConfigCloudSignal); err == nil {
		s.typ = "SourceTypeConfigCloudSignal"
		s.SourceTypeConfigCloudSignal = valueSourceTypeConfigCloudSignal
		return nil
	}
	valueSourceTypeConfigCourier := new(SourceTypeConfigCourier)
	if err := json.Unmarshal(data, &valueSourceTypeConfigCourier); err == nil {
		s.typ = "SourceTypeConfigCourier"
		s.SourceTypeConfigCourier = valueSourceTypeConfigCourier
		return nil
	}
	valueSourceTypeConfigFrontApp := new(SourceTypeConfigFrontApp)
	if err := json.Unmarshal(data, &valueSourceTypeConfigFrontApp); err == nil {
		s.typ = "SourceTypeConfigFrontApp"
		s.SourceTypeConfigFrontApp = valueSourceTypeConfigFrontApp
		return nil
	}
	valueSourceTypeConfigZoom := new(SourceTypeConfigZoom)
	if err := json.Unmarshal(data, &valueSourceTypeConfigZoom); err == nil {
		s.typ = "SourceTypeConfigZoom"
		s.SourceTypeConfigZoom = valueSourceTypeConfigZoom
		return nil
	}
	valueSourceTypeConfigTwitter := new(SourceTypeConfigTwitter)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTwitter); err == nil {
		s.typ = "SourceTypeConfigTwitter"
		s.SourceTypeConfigTwitter = valueSourceTypeConfigTwitter
		return nil
	}
	valueSourceTypeConfigStripe := new(SourceTypeConfigStripe)
	if err := json.Unmarshal(data, &valueSourceTypeConfigStripe); err == nil {
		s.typ = "SourceTypeConfigStripe"
		s.SourceTypeConfigStripe = valueSourceTypeConfigStripe
		return nil
	}
	valueSourceTypeConfigPropertyFinder := new(SourceTypeConfigPropertyFinder)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPropertyFinder); err == nil {
		s.typ = "SourceTypeConfigPropertyFinder"
		s.SourceTypeConfigPropertyFinder = valueSourceTypeConfigPropertyFinder
		return nil
	}
	valueSourceTypeConfigShopify := new(SourceTypeConfigShopify)
	if err := json.Unmarshal(data, &valueSourceTypeConfigShopify); err == nil {
		s.typ = "SourceTypeConfigShopify"
		s.SourceTypeConfigShopify = valueSourceTypeConfigShopify
		return nil
	}
	valueSourceTypeConfigTwilio := new(SourceTypeConfigTwilio)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTwilio); err == nil {
		s.typ = "SourceTypeConfigTwilio"
		s.SourceTypeConfigTwilio = valueSourceTypeConfigTwilio
		return nil
	}
	valueSourceTypeConfigGitHub := new(SourceTypeConfigGitHub)
	if err := json.Unmarshal(data, &valueSourceTypeConfigGitHub); err == nil {
		s.typ = "SourceTypeConfigGitHub"
		s.SourceTypeConfigGitHub = valueSourceTypeConfigGitHub
		return nil
	}
	valueSourceTypeConfigPostmark := new(SourceTypeConfigPostmark)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPostmark); err == nil {
		s.typ = "SourceTypeConfigPostmark"
		s.SourceTypeConfigPostmark = valueSourceTypeConfigPostmark
		return nil
	}
	valueSourceTypeConfigTypeform := new(SourceTypeConfigTypeform)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTypeform); err == nil {
		s.typ = "SourceTypeConfigTypeform"
		s.SourceTypeConfigTypeform = valueSourceTypeConfigTypeform
		return nil
	}
	valueSourceTypeConfigXero := new(SourceTypeConfigXero)
	if err := json.Unmarshal(data, &valueSourceTypeConfigXero); err == nil {
		s.typ = "SourceTypeConfigXero"
		s.SourceTypeConfigXero = valueSourceTypeConfigXero
		return nil
	}
	valueSourceTypeConfigSvix := new(SourceTypeConfigSvix)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSvix); err == nil {
		s.typ = "SourceTypeConfigSvix"
		s.SourceTypeConfigSvix = valueSourceTypeConfigSvix
		return nil
	}
	valueSourceTypeConfigAdyen := new(SourceTypeConfigAdyen)
	if err := json.Unmarshal(data, &valueSourceTypeConfigAdyen); err == nil {
		s.typ = "SourceTypeConfigAdyen"
		s.SourceTypeConfigAdyen = valueSourceTypeConfigAdyen
		return nil
	}
	valueSourceTypeConfigAkeneo := new(SourceTypeConfigAkeneo)
	if err := json.Unmarshal(data, &valueSourceTypeConfigAkeneo); err == nil {
		s.typ = "SourceTypeConfigAkeneo"
		s.SourceTypeConfigAkeneo = valueSourceTypeConfigAkeneo
		return nil
	}
	valueSourceTypeConfigGitLab := new(SourceTypeConfigGitLab)
	if err := json.Unmarshal(data, &valueSourceTypeConfigGitLab); err == nil {
		s.typ = "SourceTypeConfigGitLab"
		s.SourceTypeConfigGitLab = valueSourceTypeConfigGitLab
		return nil
	}
	valueSourceTypeConfigWooCommerce := new(SourceTypeConfigWooCommerce)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWooCommerce); err == nil {
		s.typ = "SourceTypeConfigWooCommerce"
		s.SourceTypeConfigWooCommerce = valueSourceTypeConfigWooCommerce
		return nil
	}
	valueSourceTypeConfigOura := new(SourceTypeConfigOura)
	if err := json.Unmarshal(data, &valueSourceTypeConfigOura); err == nil {
		s.typ = "SourceTypeConfigOura"
		s.SourceTypeConfigOura = valueSourceTypeConfigOura
		return nil
	}
	valueSourceTypeConfigCommerceLayer := new(SourceTypeConfigCommerceLayer)
	if err := json.Unmarshal(data, &valueSourceTypeConfigCommerceLayer); err == nil {
		s.typ = "SourceTypeConfigCommerceLayer"
		s.SourceTypeConfigCommerceLayer = valueSourceTypeConfigCommerceLayer
		return nil
	}
	valueSourceTypeConfigHubspot := new(SourceTypeConfigHubspot)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHubspot); err == nil {
		s.typ = "SourceTypeConfigHubspot"
		s.SourceTypeConfigHubspot = valueSourceTypeConfigHubspot
		return nil
	}
	valueSourceTypeConfigMailgun := new(SourceTypeConfigMailgun)
	if err := json.Unmarshal(data, &valueSourceTypeConfigMailgun); err == nil {
		s.typ = "SourceTypeConfigMailgun"
		s.SourceTypeConfigMailgun = valueSourceTypeConfigMailgun
		return nil
	}
	valueSourceTypeConfigPersona := new(SourceTypeConfigPersona)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPersona); err == nil {
		s.typ = "SourceTypeConfigPersona"
		s.SourceTypeConfigPersona = valueSourceTypeConfigPersona
		return nil
	}
	valueSourceTypeConfigPipedrive := new(SourceTypeConfigPipedrive)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPipedrive); err == nil {
		s.typ = "SourceTypeConfigPipedrive"
		s.SourceTypeConfigPipedrive = valueSourceTypeConfigPipedrive
		return nil
	}
	valueSourceTypeConfigSendgrid := new(SourceTypeConfigSendgrid)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSendgrid); err == nil {
		s.typ = "SourceTypeConfigSendgrid"
		s.SourceTypeConfigSendgrid = valueSourceTypeConfigSendgrid
		return nil
	}
	valueSourceTypeConfigWorkOs := new(SourceTypeConfigWorkOs)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWorkOs); err == nil {
		s.typ = "SourceTypeConfigWorkOs"
		s.SourceTypeConfigWorkOs = valueSourceTypeConfigWorkOs
		return nil
	}
	valueSourceTypeConfigSynctera := new(SourceTypeConfigSynctera)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSynctera); err == nil {
		s.typ = "SourceTypeConfigSynctera"
		s.SourceTypeConfigSynctera = valueSourceTypeConfigSynctera
		return nil
	}
	valueSourceTypeConfigAwssns := new(SourceTypeConfigAwssns)
	if err := json.Unmarshal(data, &valueSourceTypeConfigAwssns); err == nil {
		s.typ = "SourceTypeConfigAwssns"
		s.SourceTypeConfigAwssns = valueSourceTypeConfigAwssns
		return nil
	}
	valueSourceTypeConfigTwitch := new(SourceTypeConfigTwitch)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTwitch); err == nil {
		s.typ = "SourceTypeConfigTwitch"
		s.SourceTypeConfigTwitch = valueSourceTypeConfigTwitch
		return nil
	}
	valueSourceTypeConfigEnode := new(SourceTypeConfigEnode)
	if err := json.Unmarshal(data, &valueSourceTypeConfigEnode); err == nil {
		s.typ = "SourceTypeConfigEnode"
		s.SourceTypeConfigEnode = valueSourceTypeConfigEnode
		return nil
	}
	valueSourceTypeConfigFavro := new(SourceTypeConfigFavro)
	if err := json.Unmarshal(data, &valueSourceTypeConfigFavro); err == nil {
		s.typ = "SourceTypeConfigFavro"
		s.SourceTypeConfigFavro = valueSourceTypeConfigFavro
		return nil
	}
	valueSourceTypeConfigLinear := new(SourceTypeConfigLinear)
	if err := json.Unmarshal(data, &valueSourceTypeConfigLinear); err == nil {
		s.typ = "SourceTypeConfigLinear"
		s.SourceTypeConfigLinear = valueSourceTypeConfigLinear
		return nil
	}
	valueSourceTypeConfigShopline := new(SourceTypeConfigShopline)
	if err := json.Unmarshal(data, &valueSourceTypeConfigShopline); err == nil {
		s.typ = "SourceTypeConfigShopline"
		s.SourceTypeConfigShopline = valueSourceTypeConfigShopline
		return nil
	}
	valueSourceTypeConfigWix := new(SourceTypeConfigWix)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWix); err == nil {
		s.typ = "SourceTypeConfigWix"
		s.SourceTypeConfigWix = valueSourceTypeConfigWix
		return nil
	}
	valueSourceTypeConfigNmiPaymentGateway := new(SourceTypeConfigNmiPaymentGateway)
	if err := json.Unmarshal(data, &valueSourceTypeConfigNmiPaymentGateway); err == nil {
		s.typ = "SourceTypeConfigNmiPaymentGateway"
		s.SourceTypeConfigNmiPaymentGateway = valueSourceTypeConfigNmiPaymentGateway
		return nil
	}
	valueSourceTypeConfigOrb := new(SourceTypeConfigOrb)
	if err := json.Unmarshal(data, &valueSourceTypeConfigOrb); err == nil {
		s.typ = "SourceTypeConfigOrb"
		s.SourceTypeConfigOrb = valueSourceTypeConfigOrb
		return nil
	}
	valueSourceTypeConfigPylon := new(SourceTypeConfigPylon)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPylon); err == nil {
		s.typ = "SourceTypeConfigPylon"
		s.SourceTypeConfigPylon = valueSourceTypeConfigPylon
		return nil
	}
	valueSourceTypeConfigRazorpay := new(SourceTypeConfigRazorpay)
	if err := json.Unmarshal(data, &valueSourceTypeConfigRazorpay); err == nil {
		s.typ = "SourceTypeConfigRazorpay"
		s.SourceTypeConfigRazorpay = valueSourceTypeConfigRazorpay
		return nil
	}
	valueSourceTypeConfigSquare := new(SourceTypeConfigSquare)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSquare); err == nil {
		s.typ = "SourceTypeConfigSquare"
		s.SourceTypeConfigSquare = valueSourceTypeConfigSquare
		return nil
	}
	valueSourceTypeConfigSolidgate := new(SourceTypeConfigSolidgate)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSolidgate); err == nil {
		s.typ = "SourceTypeConfigSolidgate"
		s.SourceTypeConfigSolidgate = valueSourceTypeConfigSolidgate
		return nil
	}
	valueSourceTypeConfigTrello := new(SourceTypeConfigTrello)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTrello); err == nil {
		s.typ = "SourceTypeConfigTrello"
		s.SourceTypeConfigTrello = valueSourceTypeConfigTrello
		return nil
	}
	valueSourceTypeConfigEbay := new(SourceTypeConfigEbay)
	if err := json.Unmarshal(data, &valueSourceTypeConfigEbay); err == nil {
		s.typ = "SourceTypeConfigEbay"
		s.SourceTypeConfigEbay = valueSourceTypeConfigEbay
		return nil
	}
	valueSourceTypeConfigTelnyx := new(SourceTypeConfigTelnyx)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTelnyx); err == nil {
		s.typ = "SourceTypeConfigTelnyx"
		s.SourceTypeConfigTelnyx = valueSourceTypeConfigTelnyx
		return nil
	}
	valueSourceTypeConfigDiscord := new(SourceTypeConfigDiscord)
	if err := json.Unmarshal(data, &valueSourceTypeConfigDiscord); err == nil {
		s.typ = "SourceTypeConfigDiscord"
		s.SourceTypeConfigDiscord = valueSourceTypeConfigDiscord
		return nil
	}
	valueSourceTypeConfigTokenIo := new(SourceTypeConfigTokenIo)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTokenIo); err == nil {
		s.typ = "SourceTypeConfigTokenIo"
		s.SourceTypeConfigTokenIo = valueSourceTypeConfigTokenIo
		return nil
	}
	valueSourceTypeConfigFiserv := new(SourceTypeConfigFiserv)
	if err := json.Unmarshal(data, &valueSourceTypeConfigFiserv); err == nil {
		s.typ = "SourceTypeConfigFiserv"
		s.SourceTypeConfigFiserv = valueSourceTypeConfigFiserv
		return nil
	}
	valueSourceTypeConfigBondsmith := new(SourceTypeConfigBondsmith)
	if err := json.Unmarshal(data, &valueSourceTypeConfigBondsmith); err == nil {
		s.typ = "SourceTypeConfigBondsmith"
		s.SourceTypeConfigBondsmith = valueSourceTypeConfigBondsmith
		return nil
	}
	valueSourceTypeConfigVercelLogDrains := new(SourceTypeConfigVercelLogDrains)
	if err := json.Unmarshal(data, &valueSourceTypeConfigVercelLogDrains); err == nil {
		s.typ = "SourceTypeConfigVercelLogDrains"
		s.SourceTypeConfigVercelLogDrains = valueSourceTypeConfigVercelLogDrains
		return nil
	}
	valueSourceTypeConfigVercelWebhooks := new(SourceTypeConfigVercelWebhooks)
	if err := json.Unmarshal(data, &valueSourceTypeConfigVercelWebhooks); err == nil {
		s.typ = "SourceTypeConfigVercelWebhooks"
		s.SourceTypeConfigVercelWebhooks = valueSourceTypeConfigVercelWebhooks
		return nil
	}
	valueSourceTypeConfigSlack := new(SourceTypeConfigSlack)
	if err := json.Unmarshal(data, &valueSourceTypeConfigSlack); err == nil {
		s.typ = "SourceTypeConfigSlack"
		s.SourceTypeConfigSlack = valueSourceTypeConfigSlack
		return nil
	}
	valueSourceTypeConfigMailchimp := new(SourceTypeConfigMailchimp)
	if err := json.Unmarshal(data, &valueSourceTypeConfigMailchimp); err == nil {
		s.typ = "SourceTypeConfigMailchimp"
		s.SourceTypeConfigMailchimp = valueSourceTypeConfigMailchimp
		return nil
	}
	valueSourceTypeConfigPaddle := new(SourceTypeConfigPaddle)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPaddle); err == nil {
		s.typ = "SourceTypeConfigPaddle"
		s.SourceTypeConfigPaddle = valueSourceTypeConfigPaddle
		return nil
	}
	valueSourceTypeConfigPaypal := new(SourceTypeConfigPaypal)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPaypal); err == nil {
		s.typ = "SourceTypeConfigPaypal"
		s.SourceTypeConfigPaypal = valueSourceTypeConfigPaypal
		return nil
	}
	valueSourceTypeConfigTreezor := new(SourceTypeConfigTreezor)
	if err := json.Unmarshal(data, &valueSourceTypeConfigTreezor); err == nil {
		s.typ = "SourceTypeConfigTreezor"
		s.SourceTypeConfigTreezor = valueSourceTypeConfigTreezor
		return nil
	}
	valueSourceTypeConfigPraxis := new(SourceTypeConfigPraxis)
	if err := json.Unmarshal(data, &valueSourceTypeConfigPraxis); err == nil {
		s.typ = "SourceTypeConfigPraxis"
		s.SourceTypeConfigPraxis = valueSourceTypeConfigPraxis
		return nil
	}
	valueSourceTypeConfigCustomerIo := new(SourceTypeConfigCustomerIo)
	if err := json.Unmarshal(data, &valueSourceTypeConfigCustomerIo); err == nil {
		s.typ = "SourceTypeConfigCustomerIo"
		s.SourceTypeConfigCustomerIo = valueSourceTypeConfigCustomerIo
		return nil
	}
	valueSourceTypeConfigFacebook := new(SourceTypeConfigFacebook)
	if err := json.Unmarshal(data, &valueSourceTypeConfigFacebook); err == nil {
		s.typ = "SourceTypeConfigFacebook"
		s.SourceTypeConfigFacebook = valueSourceTypeConfigFacebook
		return nil
	}
	valueSourceTypeConfigWhatsApp := new(SourceTypeConfigWhatsApp)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWhatsApp); err == nil {
		s.typ = "SourceTypeConfigWhatsApp"
		s.SourceTypeConfigWhatsApp = valueSourceTypeConfigWhatsApp
		return nil
	}
	valueSourceTypeConfigUpollo := new(SourceTypeConfigUpollo)
	if err := json.Unmarshal(data, &valueSourceTypeConfigUpollo); err == nil {
		s.typ = "SourceTypeConfigUpollo"
		s.SourceTypeConfigUpollo = valueSourceTypeConfigUpollo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SourceTypeConfig) MarshalJSON() ([]byte, error) {
	if s.typ == "SourceTypeConfigHmac" || s.SourceTypeConfigHmac != nil {
		return json.Marshal(s.SourceTypeConfigHmac)
	}
	if s.typ == "SourceTypeConfigBasicAuth" || s.SourceTypeConfigBasicAuth != nil {
		return json.Marshal(s.SourceTypeConfigBasicAuth)
	}
	if s.typ == "SourceTypeConfigApiKey" || s.SourceTypeConfigApiKey != nil {
		return json.Marshal(s.SourceTypeConfigApiKey)
	}
	if s.typ == "SourceTypeConfigWebhook" || s.SourceTypeConfigWebhook != nil {
		return json.Marshal(s.SourceTypeConfigWebhook)
	}
	if s.typ == "SourceTypeConfigHttp" || s.SourceTypeConfigHttp != nil {
		return json.Marshal(s.SourceTypeConfigHttp)
	}
	if s.typ == "SourceTypeConfigSanity" || s.SourceTypeConfigSanity != nil {
		return json.Marshal(s.SourceTypeConfigSanity)
	}
	if s.typ == "SourceTypeConfigBridge" || s.SourceTypeConfigBridge != nil {
		return json.Marshal(s.SourceTypeConfigBridge)
	}
	if s.typ == "SourceTypeConfigCloudSignal" || s.SourceTypeConfigCloudSignal != nil {
		return json.Marshal(s.SourceTypeConfigCloudSignal)
	}
	if s.typ == "SourceTypeConfigCourier" || s.SourceTypeConfigCourier != nil {
		return json.Marshal(s.SourceTypeConfigCourier)
	}
	if s.typ == "SourceTypeConfigFrontApp" || s.SourceTypeConfigFrontApp != nil {
		return json.Marshal(s.SourceTypeConfigFrontApp)
	}
	if s.typ == "SourceTypeConfigZoom" || s.SourceTypeConfigZoom != nil {
		return json.Marshal(s.SourceTypeConfigZoom)
	}
	if s.typ == "SourceTypeConfigTwitter" || s.SourceTypeConfigTwitter != nil {
		return json.Marshal(s.SourceTypeConfigTwitter)
	}
	if s.typ == "SourceTypeConfigStripe" || s.SourceTypeConfigStripe != nil {
		return json.Marshal(s.SourceTypeConfigStripe)
	}
	if s.typ == "SourceTypeConfigPropertyFinder" || s.SourceTypeConfigPropertyFinder != nil {
		return json.Marshal(s.SourceTypeConfigPropertyFinder)
	}
	if s.typ == "SourceTypeConfigShopify" || s.SourceTypeConfigShopify != nil {
		return json.Marshal(s.SourceTypeConfigShopify)
	}
	if s.typ == "SourceTypeConfigTwilio" || s.SourceTypeConfigTwilio != nil {
		return json.Marshal(s.SourceTypeConfigTwilio)
	}
	if s.typ == "SourceTypeConfigGitHub" || s.SourceTypeConfigGitHub != nil {
		return json.Marshal(s.SourceTypeConfigGitHub)
	}
	if s.typ == "SourceTypeConfigPostmark" || s.SourceTypeConfigPostmark != nil {
		return json.Marshal(s.SourceTypeConfigPostmark)
	}
	if s.typ == "SourceTypeConfigTypeform" || s.SourceTypeConfigTypeform != nil {
		return json.Marshal(s.SourceTypeConfigTypeform)
	}
	if s.typ == "SourceTypeConfigXero" || s.SourceTypeConfigXero != nil {
		return json.Marshal(s.SourceTypeConfigXero)
	}
	if s.typ == "SourceTypeConfigSvix" || s.SourceTypeConfigSvix != nil {
		return json.Marshal(s.SourceTypeConfigSvix)
	}
	if s.typ == "SourceTypeConfigAdyen" || s.SourceTypeConfigAdyen != nil {
		return json.Marshal(s.SourceTypeConfigAdyen)
	}
	if s.typ == "SourceTypeConfigAkeneo" || s.SourceTypeConfigAkeneo != nil {
		return json.Marshal(s.SourceTypeConfigAkeneo)
	}
	if s.typ == "SourceTypeConfigGitLab" || s.SourceTypeConfigGitLab != nil {
		return json.Marshal(s.SourceTypeConfigGitLab)
	}
	if s.typ == "SourceTypeConfigWooCommerce" || s.SourceTypeConfigWooCommerce != nil {
		return json.Marshal(s.SourceTypeConfigWooCommerce)
	}
	if s.typ == "SourceTypeConfigOura" || s.SourceTypeConfigOura != nil {
		return json.Marshal(s.SourceTypeConfigOura)
	}
	if s.typ == "SourceTypeConfigCommerceLayer" || s.SourceTypeConfigCommerceLayer != nil {
		return json.Marshal(s.SourceTypeConfigCommerceLayer)
	}
	if s.typ == "SourceTypeConfigHubspot" || s.SourceTypeConfigHubspot != nil {
		return json.Marshal(s.SourceTypeConfigHubspot)
	}
	if s.typ == "SourceTypeConfigMailgun" || s.SourceTypeConfigMailgun != nil {
		return json.Marshal(s.SourceTypeConfigMailgun)
	}
	if s.typ == "SourceTypeConfigPersona" || s.SourceTypeConfigPersona != nil {
		return json.Marshal(s.SourceTypeConfigPersona)
	}
	if s.typ == "SourceTypeConfigPipedrive" || s.SourceTypeConfigPipedrive != nil {
		return json.Marshal(s.SourceTypeConfigPipedrive)
	}
	if s.typ == "SourceTypeConfigSendgrid" || s.SourceTypeConfigSendgrid != nil {
		return json.Marshal(s.SourceTypeConfigSendgrid)
	}
	if s.typ == "SourceTypeConfigWorkOs" || s.SourceTypeConfigWorkOs != nil {
		return json.Marshal(s.SourceTypeConfigWorkOs)
	}
	if s.typ == "SourceTypeConfigSynctera" || s.SourceTypeConfigSynctera != nil {
		return json.Marshal(s.SourceTypeConfigSynctera)
	}
	if s.typ == "SourceTypeConfigAwssns" || s.SourceTypeConfigAwssns != nil {
		return json.Marshal(s.SourceTypeConfigAwssns)
	}
	if s.typ == "SourceTypeConfigTwitch" || s.SourceTypeConfigTwitch != nil {
		return json.Marshal(s.SourceTypeConfigTwitch)
	}
	if s.typ == "SourceTypeConfigEnode" || s.SourceTypeConfigEnode != nil {
		return json.Marshal(s.SourceTypeConfigEnode)
	}
	if s.typ == "SourceTypeConfigFavro" || s.SourceTypeConfigFavro != nil {
		return json.Marshal(s.SourceTypeConfigFavro)
	}
	if s.typ == "SourceTypeConfigLinear" || s.SourceTypeConfigLinear != nil {
		return json.Marshal(s.SourceTypeConfigLinear)
	}
	if s.typ == "SourceTypeConfigShopline" || s.SourceTypeConfigShopline != nil {
		return json.Marshal(s.SourceTypeConfigShopline)
	}
	if s.typ == "SourceTypeConfigWix" || s.SourceTypeConfigWix != nil {
		return json.Marshal(s.SourceTypeConfigWix)
	}
	if s.typ == "SourceTypeConfigNmiPaymentGateway" || s.SourceTypeConfigNmiPaymentGateway != nil {
		return json.Marshal(s.SourceTypeConfigNmiPaymentGateway)
	}
	if s.typ == "SourceTypeConfigOrb" || s.SourceTypeConfigOrb != nil {
		return json.Marshal(s.SourceTypeConfigOrb)
	}
	if s.typ == "SourceTypeConfigPylon" || s.SourceTypeConfigPylon != nil {
		return json.Marshal(s.SourceTypeConfigPylon)
	}
	if s.typ == "SourceTypeConfigRazorpay" || s.SourceTypeConfigRazorpay != nil {
		return json.Marshal(s.SourceTypeConfigRazorpay)
	}
	if s.typ == "SourceTypeConfigSquare" || s.SourceTypeConfigSquare != nil {
		return json.Marshal(s.SourceTypeConfigSquare)
	}
	if s.typ == "SourceTypeConfigSolidgate" || s.SourceTypeConfigSolidgate != nil {
		return json.Marshal(s.SourceTypeConfigSolidgate)
	}
	if s.typ == "SourceTypeConfigTrello" || s.SourceTypeConfigTrello != nil {
		return json.Marshal(s.SourceTypeConfigTrello)
	}
	if s.typ == "SourceTypeConfigEbay" || s.SourceTypeConfigEbay != nil {
		return json.Marshal(s.SourceTypeConfigEbay)
	}
	if s.typ == "SourceTypeConfigTelnyx" || s.SourceTypeConfigTelnyx != nil {
		return json.Marshal(s.SourceTypeConfigTelnyx)
	}
	if s.typ == "SourceTypeConfigDiscord" || s.SourceTypeConfigDiscord != nil {
		return json.Marshal(s.SourceTypeConfigDiscord)
	}
	if s.typ == "SourceTypeConfigTokenIo" || s.SourceTypeConfigTokenIo != nil {
		return json.Marshal(s.SourceTypeConfigTokenIo)
	}
	if s.typ == "SourceTypeConfigFiserv" || s.SourceTypeConfigFiserv != nil {
		return json.Marshal(s.SourceTypeConfigFiserv)
	}
	if s.typ == "SourceTypeConfigBondsmith" || s.SourceTypeConfigBondsmith != nil {
		return json.Marshal(s.SourceTypeConfigBondsmith)
	}
	if s.typ == "SourceTypeConfigVercelLogDrains" || s.SourceTypeConfigVercelLogDrains != nil {
		return json.Marshal(s.SourceTypeConfigVercelLogDrains)
	}
	if s.typ == "SourceTypeConfigVercelWebhooks" || s.SourceTypeConfigVercelWebhooks != nil {
		return json.Marshal(s.SourceTypeConfigVercelWebhooks)
	}
	if s.typ == "SourceTypeConfigSlack" || s.SourceTypeConfigSlack != nil {
		return json.Marshal(s.SourceTypeConfigSlack)
	}
	if s.typ == "SourceTypeConfigMailchimp" || s.SourceTypeConfigMailchimp != nil {
		return json.Marshal(s.SourceTypeConfigMailchimp)
	}
	if s.typ == "SourceTypeConfigPaddle" || s.SourceTypeConfigPaddle != nil {
		return json.Marshal(s.SourceTypeConfigPaddle)
	}
	if s.typ == "SourceTypeConfigPaypal" || s.SourceTypeConfigPaypal != nil {
		return json.Marshal(s.SourceTypeConfigPaypal)
	}
	if s.typ == "SourceTypeConfigTreezor" || s.SourceTypeConfigTreezor != nil {
		return json.Marshal(s.SourceTypeConfigTreezor)
	}
	if s.typ == "SourceTypeConfigPraxis" || s.SourceTypeConfigPraxis != nil {
		return json.Marshal(s.SourceTypeConfigPraxis)
	}
	if s.typ == "SourceTypeConfigCustomerIo" || s.SourceTypeConfigCustomerIo != nil {
		return json.Marshal(s.SourceTypeConfigCustomerIo)
	}
	if s.typ == "SourceTypeConfigFacebook" || s.SourceTypeConfigFacebook != nil {
		return json.Marshal(s.SourceTypeConfigFacebook)
	}
	if s.typ == "SourceTypeConfigWhatsApp" || s.SourceTypeConfigWhatsApp != nil {
		return json.Marshal(s.SourceTypeConfigWhatsApp)
	}
	if s.typ == "SourceTypeConfigUpollo" || s.SourceTypeConfigUpollo != nil {
		return json.Marshal(s.SourceTypeConfigUpollo)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SourceTypeConfigVisitor interface {
	VisitSourceTypeConfigHmac(*SourceTypeConfigHmac) error
	VisitSourceTypeConfigBasicAuth(*SourceTypeConfigBasicAuth) error
	VisitSourceTypeConfigApiKey(*SourceTypeConfigApiKey) error
	VisitSourceTypeConfigWebhook(*SourceTypeConfigWebhook) error
	VisitSourceTypeConfigHttp(*SourceTypeConfigHttp) error
	VisitSourceTypeConfigSanity(*SourceTypeConfigSanity) error
	VisitSourceTypeConfigBridge(*SourceTypeConfigBridge) error
	VisitSourceTypeConfigCloudSignal(*SourceTypeConfigCloudSignal) error
	VisitSourceTypeConfigCourier(*SourceTypeConfigCourier) error
	VisitSourceTypeConfigFrontApp(*SourceTypeConfigFrontApp) error
	VisitSourceTypeConfigZoom(*SourceTypeConfigZoom) error
	VisitSourceTypeConfigTwitter(*SourceTypeConfigTwitter) error
	VisitSourceTypeConfigStripe(*SourceTypeConfigStripe) error
	VisitSourceTypeConfigPropertyFinder(*SourceTypeConfigPropertyFinder) error
	VisitSourceTypeConfigShopify(*SourceTypeConfigShopify) error
	VisitSourceTypeConfigTwilio(*SourceTypeConfigTwilio) error
	VisitSourceTypeConfigGitHub(*SourceTypeConfigGitHub) error
	VisitSourceTypeConfigPostmark(*SourceTypeConfigPostmark) error
	VisitSourceTypeConfigTypeform(*SourceTypeConfigTypeform) error
	VisitSourceTypeConfigXero(*SourceTypeConfigXero) error
	VisitSourceTypeConfigSvix(*SourceTypeConfigSvix) error
	VisitSourceTypeConfigAdyen(*SourceTypeConfigAdyen) error
	VisitSourceTypeConfigAkeneo(*SourceTypeConfigAkeneo) error
	VisitSourceTypeConfigGitLab(*SourceTypeConfigGitLab) error
	VisitSourceTypeConfigWooCommerce(*SourceTypeConfigWooCommerce) error
	VisitSourceTypeConfigOura(*SourceTypeConfigOura) error
	VisitSourceTypeConfigCommerceLayer(*SourceTypeConfigCommerceLayer) error
	VisitSourceTypeConfigHubspot(*SourceTypeConfigHubspot) error
	VisitSourceTypeConfigMailgun(*SourceTypeConfigMailgun) error
	VisitSourceTypeConfigPersona(*SourceTypeConfigPersona) error
	VisitSourceTypeConfigPipedrive(*SourceTypeConfigPipedrive) error
	VisitSourceTypeConfigSendgrid(*SourceTypeConfigSendgrid) error
	VisitSourceTypeConfigWorkOs(*SourceTypeConfigWorkOs) error
	VisitSourceTypeConfigSynctera(*SourceTypeConfigSynctera) error
	VisitSourceTypeConfigAwssns(*SourceTypeConfigAwssns) error
	VisitSourceTypeConfigTwitch(*SourceTypeConfigTwitch) error
	VisitSourceTypeConfigEnode(*SourceTypeConfigEnode) error
	VisitSourceTypeConfigFavro(*SourceTypeConfigFavro) error
	VisitSourceTypeConfigLinear(*SourceTypeConfigLinear) error
	VisitSourceTypeConfigShopline(*SourceTypeConfigShopline) error
	VisitSourceTypeConfigWix(*SourceTypeConfigWix) error
	VisitSourceTypeConfigNmiPaymentGateway(*SourceTypeConfigNmiPaymentGateway) error
	VisitSourceTypeConfigOrb(*SourceTypeConfigOrb) error
	VisitSourceTypeConfigPylon(*SourceTypeConfigPylon) error
	VisitSourceTypeConfigRazorpay(*SourceTypeConfigRazorpay) error
	VisitSourceTypeConfigSquare(*SourceTypeConfigSquare) error
	VisitSourceTypeConfigSolidgate(*SourceTypeConfigSolidgate) error
	VisitSourceTypeConfigTrello(*SourceTypeConfigTrello) error
	VisitSourceTypeConfigEbay(*SourceTypeConfigEbay) error
	VisitSourceTypeConfigTelnyx(*SourceTypeConfigTelnyx) error
	VisitSourceTypeConfigDiscord(*SourceTypeConfigDiscord) error
	VisitSourceTypeConfigTokenIo(*SourceTypeConfigTokenIo) error
	VisitSourceTypeConfigFiserv(*SourceTypeConfigFiserv) error
	VisitSourceTypeConfigBondsmith(*SourceTypeConfigBondsmith) error
	VisitSourceTypeConfigVercelLogDrains(*SourceTypeConfigVercelLogDrains) error
	VisitSourceTypeConfigVercelWebhooks(*SourceTypeConfigVercelWebhooks) error
	VisitSourceTypeConfigSlack(*SourceTypeConfigSlack) error
	VisitSourceTypeConfigMailchimp(*SourceTypeConfigMailchimp) error
	VisitSourceTypeConfigPaddle(*SourceTypeConfigPaddle) error
	VisitSourceTypeConfigPaypal(*SourceTypeConfigPaypal) error
	VisitSourceTypeConfigTreezor(*SourceTypeConfigTreezor) error
	VisitSourceTypeConfigPraxis(*SourceTypeConfigPraxis) error
	VisitSourceTypeConfigCustomerIo(*SourceTypeConfigCustomerIo) error
	VisitSourceTypeConfigFacebook(*SourceTypeConfigFacebook) error
	VisitSourceTypeConfigWhatsApp(*SourceTypeConfigWhatsApp) error
	VisitSourceTypeConfigUpollo(*SourceTypeConfigUpollo) error
}

func (s *SourceTypeConfig) Accept(visitor SourceTypeConfigVisitor) error {
	if s.typ == "SourceTypeConfigHmac" || s.SourceTypeConfigHmac != nil {
		return visitor.VisitSourceTypeConfigHmac(s.SourceTypeConfigHmac)
	}
	if s.typ == "SourceTypeConfigBasicAuth" || s.SourceTypeConfigBasicAuth != nil {
		return visitor.VisitSourceTypeConfigBasicAuth(s.SourceTypeConfigBasicAuth)
	}
	if s.typ == "SourceTypeConfigApiKey" || s.SourceTypeConfigApiKey != nil {
		return visitor.VisitSourceTypeConfigApiKey(s.SourceTypeConfigApiKey)
	}
	if s.typ == "SourceTypeConfigWebhook" || s.SourceTypeConfigWebhook != nil {
		return visitor.VisitSourceTypeConfigWebhook(s.SourceTypeConfigWebhook)
	}
	if s.typ == "SourceTypeConfigHttp" || s.SourceTypeConfigHttp != nil {
		return visitor.VisitSourceTypeConfigHttp(s.SourceTypeConfigHttp)
	}
	if s.typ == "SourceTypeConfigSanity" || s.SourceTypeConfigSanity != nil {
		return visitor.VisitSourceTypeConfigSanity(s.SourceTypeConfigSanity)
	}
	if s.typ == "SourceTypeConfigBridge" || s.SourceTypeConfigBridge != nil {
		return visitor.VisitSourceTypeConfigBridge(s.SourceTypeConfigBridge)
	}
	if s.typ == "SourceTypeConfigCloudSignal" || s.SourceTypeConfigCloudSignal != nil {
		return visitor.VisitSourceTypeConfigCloudSignal(s.SourceTypeConfigCloudSignal)
	}
	if s.typ == "SourceTypeConfigCourier" || s.SourceTypeConfigCourier != nil {
		return visitor.VisitSourceTypeConfigCourier(s.SourceTypeConfigCourier)
	}
	if s.typ == "SourceTypeConfigFrontApp" || s.SourceTypeConfigFrontApp != nil {
		return visitor.VisitSourceTypeConfigFrontApp(s.SourceTypeConfigFrontApp)
	}
	if s.typ == "SourceTypeConfigZoom" || s.SourceTypeConfigZoom != nil {
		return visitor.VisitSourceTypeConfigZoom(s.SourceTypeConfigZoom)
	}
	if s.typ == "SourceTypeConfigTwitter" || s.SourceTypeConfigTwitter != nil {
		return visitor.VisitSourceTypeConfigTwitter(s.SourceTypeConfigTwitter)
	}
	if s.typ == "SourceTypeConfigStripe" || s.SourceTypeConfigStripe != nil {
		return visitor.VisitSourceTypeConfigStripe(s.SourceTypeConfigStripe)
	}
	if s.typ == "SourceTypeConfigPropertyFinder" || s.SourceTypeConfigPropertyFinder != nil {
		return visitor.VisitSourceTypeConfigPropertyFinder(s.SourceTypeConfigPropertyFinder)
	}
	if s.typ == "SourceTypeConfigShopify" || s.SourceTypeConfigShopify != nil {
		return visitor.VisitSourceTypeConfigShopify(s.SourceTypeConfigShopify)
	}
	if s.typ == "SourceTypeConfigTwilio" || s.SourceTypeConfigTwilio != nil {
		return visitor.VisitSourceTypeConfigTwilio(s.SourceTypeConfigTwilio)
	}
	if s.typ == "SourceTypeConfigGitHub" || s.SourceTypeConfigGitHub != nil {
		return visitor.VisitSourceTypeConfigGitHub(s.SourceTypeConfigGitHub)
	}
	if s.typ == "SourceTypeConfigPostmark" || s.SourceTypeConfigPostmark != nil {
		return visitor.VisitSourceTypeConfigPostmark(s.SourceTypeConfigPostmark)
	}
	if s.typ == "SourceTypeConfigTypeform" || s.SourceTypeConfigTypeform != nil {
		return visitor.VisitSourceTypeConfigTypeform(s.SourceTypeConfigTypeform)
	}
	if s.typ == "SourceTypeConfigXero" || s.SourceTypeConfigXero != nil {
		return visitor.VisitSourceTypeConfigXero(s.SourceTypeConfigXero)
	}
	if s.typ == "SourceTypeConfigSvix" || s.SourceTypeConfigSvix != nil {
		return visitor.VisitSourceTypeConfigSvix(s.SourceTypeConfigSvix)
	}
	if s.typ == "SourceTypeConfigAdyen" || s.SourceTypeConfigAdyen != nil {
		return visitor.VisitSourceTypeConfigAdyen(s.SourceTypeConfigAdyen)
	}
	if s.typ == "SourceTypeConfigAkeneo" || s.SourceTypeConfigAkeneo != nil {
		return visitor.VisitSourceTypeConfigAkeneo(s.SourceTypeConfigAkeneo)
	}
	if s.typ == "SourceTypeConfigGitLab" || s.SourceTypeConfigGitLab != nil {
		return visitor.VisitSourceTypeConfigGitLab(s.SourceTypeConfigGitLab)
	}
	if s.typ == "SourceTypeConfigWooCommerce" || s.SourceTypeConfigWooCommerce != nil {
		return visitor.VisitSourceTypeConfigWooCommerce(s.SourceTypeConfigWooCommerce)
	}
	if s.typ == "SourceTypeConfigOura" || s.SourceTypeConfigOura != nil {
		return visitor.VisitSourceTypeConfigOura(s.SourceTypeConfigOura)
	}
	if s.typ == "SourceTypeConfigCommerceLayer" || s.SourceTypeConfigCommerceLayer != nil {
		return visitor.VisitSourceTypeConfigCommerceLayer(s.SourceTypeConfigCommerceLayer)
	}
	if s.typ == "SourceTypeConfigHubspot" || s.SourceTypeConfigHubspot != nil {
		return visitor.VisitSourceTypeConfigHubspot(s.SourceTypeConfigHubspot)
	}
	if s.typ == "SourceTypeConfigMailgun" || s.SourceTypeConfigMailgun != nil {
		return visitor.VisitSourceTypeConfigMailgun(s.SourceTypeConfigMailgun)
	}
	if s.typ == "SourceTypeConfigPersona" || s.SourceTypeConfigPersona != nil {
		return visitor.VisitSourceTypeConfigPersona(s.SourceTypeConfigPersona)
	}
	if s.typ == "SourceTypeConfigPipedrive" || s.SourceTypeConfigPipedrive != nil {
		return visitor.VisitSourceTypeConfigPipedrive(s.SourceTypeConfigPipedrive)
	}
	if s.typ == "SourceTypeConfigSendgrid" || s.SourceTypeConfigSendgrid != nil {
		return visitor.VisitSourceTypeConfigSendgrid(s.SourceTypeConfigSendgrid)
	}
	if s.typ == "SourceTypeConfigWorkOs" || s.SourceTypeConfigWorkOs != nil {
		return visitor.VisitSourceTypeConfigWorkOs(s.SourceTypeConfigWorkOs)
	}
	if s.typ == "SourceTypeConfigSynctera" || s.SourceTypeConfigSynctera != nil {
		return visitor.VisitSourceTypeConfigSynctera(s.SourceTypeConfigSynctera)
	}
	if s.typ == "SourceTypeConfigAwssns" || s.SourceTypeConfigAwssns != nil {
		return visitor.VisitSourceTypeConfigAwssns(s.SourceTypeConfigAwssns)
	}
	if s.typ == "SourceTypeConfigTwitch" || s.SourceTypeConfigTwitch != nil {
		return visitor.VisitSourceTypeConfigTwitch(s.SourceTypeConfigTwitch)
	}
	if s.typ == "SourceTypeConfigEnode" || s.SourceTypeConfigEnode != nil {
		return visitor.VisitSourceTypeConfigEnode(s.SourceTypeConfigEnode)
	}
	if s.typ == "SourceTypeConfigFavro" || s.SourceTypeConfigFavro != nil {
		return visitor.VisitSourceTypeConfigFavro(s.SourceTypeConfigFavro)
	}
	if s.typ == "SourceTypeConfigLinear" || s.SourceTypeConfigLinear != nil {
		return visitor.VisitSourceTypeConfigLinear(s.SourceTypeConfigLinear)
	}
	if s.typ == "SourceTypeConfigShopline" || s.SourceTypeConfigShopline != nil {
		return visitor.VisitSourceTypeConfigShopline(s.SourceTypeConfigShopline)
	}
	if s.typ == "SourceTypeConfigWix" || s.SourceTypeConfigWix != nil {
		return visitor.VisitSourceTypeConfigWix(s.SourceTypeConfigWix)
	}
	if s.typ == "SourceTypeConfigNmiPaymentGateway" || s.SourceTypeConfigNmiPaymentGateway != nil {
		return visitor.VisitSourceTypeConfigNmiPaymentGateway(s.SourceTypeConfigNmiPaymentGateway)
	}
	if s.typ == "SourceTypeConfigOrb" || s.SourceTypeConfigOrb != nil {
		return visitor.VisitSourceTypeConfigOrb(s.SourceTypeConfigOrb)
	}
	if s.typ == "SourceTypeConfigPylon" || s.SourceTypeConfigPylon != nil {
		return visitor.VisitSourceTypeConfigPylon(s.SourceTypeConfigPylon)
	}
	if s.typ == "SourceTypeConfigRazorpay" || s.SourceTypeConfigRazorpay != nil {
		return visitor.VisitSourceTypeConfigRazorpay(s.SourceTypeConfigRazorpay)
	}
	if s.typ == "SourceTypeConfigSquare" || s.SourceTypeConfigSquare != nil {
		return visitor.VisitSourceTypeConfigSquare(s.SourceTypeConfigSquare)
	}
	if s.typ == "SourceTypeConfigSolidgate" || s.SourceTypeConfigSolidgate != nil {
		return visitor.VisitSourceTypeConfigSolidgate(s.SourceTypeConfigSolidgate)
	}
	if s.typ == "SourceTypeConfigTrello" || s.SourceTypeConfigTrello != nil {
		return visitor.VisitSourceTypeConfigTrello(s.SourceTypeConfigTrello)
	}
	if s.typ == "SourceTypeConfigEbay" || s.SourceTypeConfigEbay != nil {
		return visitor.VisitSourceTypeConfigEbay(s.SourceTypeConfigEbay)
	}
	if s.typ == "SourceTypeConfigTelnyx" || s.SourceTypeConfigTelnyx != nil {
		return visitor.VisitSourceTypeConfigTelnyx(s.SourceTypeConfigTelnyx)
	}
	if s.typ == "SourceTypeConfigDiscord" || s.SourceTypeConfigDiscord != nil {
		return visitor.VisitSourceTypeConfigDiscord(s.SourceTypeConfigDiscord)
	}
	if s.typ == "SourceTypeConfigTokenIo" || s.SourceTypeConfigTokenIo != nil {
		return visitor.VisitSourceTypeConfigTokenIo(s.SourceTypeConfigTokenIo)
	}
	if s.typ == "SourceTypeConfigFiserv" || s.SourceTypeConfigFiserv != nil {
		return visitor.VisitSourceTypeConfigFiserv(s.SourceTypeConfigFiserv)
	}
	if s.typ == "SourceTypeConfigBondsmith" || s.SourceTypeConfigBondsmith != nil {
		return visitor.VisitSourceTypeConfigBondsmith(s.SourceTypeConfigBondsmith)
	}
	if s.typ == "SourceTypeConfigVercelLogDrains" || s.SourceTypeConfigVercelLogDrains != nil {
		return visitor.VisitSourceTypeConfigVercelLogDrains(s.SourceTypeConfigVercelLogDrains)
	}
	if s.typ == "SourceTypeConfigVercelWebhooks" || s.SourceTypeConfigVercelWebhooks != nil {
		return visitor.VisitSourceTypeConfigVercelWebhooks(s.SourceTypeConfigVercelWebhooks)
	}
	if s.typ == "SourceTypeConfigSlack" || s.SourceTypeConfigSlack != nil {
		return visitor.VisitSourceTypeConfigSlack(s.SourceTypeConfigSlack)
	}
	if s.typ == "SourceTypeConfigMailchimp" || s.SourceTypeConfigMailchimp != nil {
		return visitor.VisitSourceTypeConfigMailchimp(s.SourceTypeConfigMailchimp)
	}
	if s.typ == "SourceTypeConfigPaddle" || s.SourceTypeConfigPaddle != nil {
		return visitor.VisitSourceTypeConfigPaddle(s.SourceTypeConfigPaddle)
	}
	if s.typ == "SourceTypeConfigPaypal" || s.SourceTypeConfigPaypal != nil {
		return visitor.VisitSourceTypeConfigPaypal(s.SourceTypeConfigPaypal)
	}
	if s.typ == "SourceTypeConfigTreezor" || s.SourceTypeConfigTreezor != nil {
		return visitor.VisitSourceTypeConfigTreezor(s.SourceTypeConfigTreezor)
	}
	if s.typ == "SourceTypeConfigPraxis" || s.SourceTypeConfigPraxis != nil {
		return visitor.VisitSourceTypeConfigPraxis(s.SourceTypeConfigPraxis)
	}
	if s.typ == "SourceTypeConfigCustomerIo" || s.SourceTypeConfigCustomerIo != nil {
		return visitor.VisitSourceTypeConfigCustomerIo(s.SourceTypeConfigCustomerIo)
	}
	if s.typ == "SourceTypeConfigFacebook" || s.SourceTypeConfigFacebook != nil {
		return visitor.VisitSourceTypeConfigFacebook(s.SourceTypeConfigFacebook)
	}
	if s.typ == "SourceTypeConfigWhatsApp" || s.SourceTypeConfigWhatsApp != nil {
		return visitor.VisitSourceTypeConfigWhatsApp(s.SourceTypeConfigWhatsApp)
	}
	if s.typ == "SourceTypeConfigUpollo" || s.SourceTypeConfigUpollo != nil {
		return visitor.VisitSourceTypeConfigUpollo(s.SourceTypeConfigUpollo)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

// The type config for Adyen. Requires type to be `ADYEN`.
type SourceTypeConfigAdyen struct {
	AllowedHttpMethods []SourceTypeConfigAdyenAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigAdyenAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigAdyen) GetAllowedHttpMethods() []SourceTypeConfigAdyenAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigAdyen) GetAuth() *SourceTypeConfigAdyenAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigAdyen) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigAdyen) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigAdyen
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigAdyen(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigAdyen) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigAdyenAllowedHttpMethodsItem string

const (
	SourceTypeConfigAdyenAllowedHttpMethodsItemGet    SourceTypeConfigAdyenAllowedHttpMethodsItem = "GET"
	SourceTypeConfigAdyenAllowedHttpMethodsItemPost   SourceTypeConfigAdyenAllowedHttpMethodsItem = "POST"
	SourceTypeConfigAdyenAllowedHttpMethodsItemPut    SourceTypeConfigAdyenAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigAdyenAllowedHttpMethodsItemPatch  SourceTypeConfigAdyenAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigAdyenAllowedHttpMethodsItemDelete SourceTypeConfigAdyenAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigAdyenAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigAdyenAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigAdyenAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigAdyenAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigAdyenAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigAdyenAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigAdyenAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigAdyenAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigAdyenAllowedHttpMethodsItem) Ptr() *SourceTypeConfigAdyenAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigAdyenAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigAdyenAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigAdyenAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigAdyenAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigAdyenAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigAdyenAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigAdyenAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Akeneo. Requires type to be `AKENEO`.
type SourceTypeConfigAkeneo struct {
	AllowedHttpMethods []SourceTypeConfigAkeneoAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigAkeneoAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigAkeneo) GetAllowedHttpMethods() []SourceTypeConfigAkeneoAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigAkeneo) GetAuth() *SourceTypeConfigAkeneoAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigAkeneo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigAkeneo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigAkeneo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigAkeneo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigAkeneo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigAkeneoAllowedHttpMethodsItem string

const (
	SourceTypeConfigAkeneoAllowedHttpMethodsItemGet    SourceTypeConfigAkeneoAllowedHttpMethodsItem = "GET"
	SourceTypeConfigAkeneoAllowedHttpMethodsItemPost   SourceTypeConfigAkeneoAllowedHttpMethodsItem = "POST"
	SourceTypeConfigAkeneoAllowedHttpMethodsItemPut    SourceTypeConfigAkeneoAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigAkeneoAllowedHttpMethodsItemPatch  SourceTypeConfigAkeneoAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigAkeneoAllowedHttpMethodsItemDelete SourceTypeConfigAkeneoAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigAkeneoAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigAkeneoAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigAkeneoAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigAkeneoAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigAkeneoAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigAkeneoAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigAkeneoAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigAkeneoAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigAkeneoAllowedHttpMethodsItem) Ptr() *SourceTypeConfigAkeneoAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigAkeneoAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigAkeneoAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigAkeneoAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigAkeneoAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigAkeneoAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigAkeneoAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigAkeneoAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for API Key. Requires type to be `API_KEY`.
type SourceTypeConfigApiKey struct {
	Type               *string                                        `json:"type,omitempty" url:"type,omitempty"`
	AllowedHttpMethods []SourceTypeConfigApiKeyAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	CustomResponse     *SourceTypeConfigApiKeyCustomResponse          `json:"custom_response,omitempty" url:"custom_response,omitempty"`
	Auth               *SourceTypeConfigApiKeyAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigApiKey) GetAllowedHttpMethods() []SourceTypeConfigApiKeyAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigApiKey) GetCustomResponse() *SourceTypeConfigApiKeyCustomResponse {
	if s == nil {
		return nil
	}
	return s.CustomResponse
}

func (s *SourceTypeConfigApiKey) GetAuth() *SourceTypeConfigApiKeyAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigApiKey) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigApiKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigApiKey) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigApiKeyAllowedHttpMethodsItem string

const (
	SourceTypeConfigApiKeyAllowedHttpMethodsItemGet    SourceTypeConfigApiKeyAllowedHttpMethodsItem = "GET"
	SourceTypeConfigApiKeyAllowedHttpMethodsItemPost   SourceTypeConfigApiKeyAllowedHttpMethodsItem = "POST"
	SourceTypeConfigApiKeyAllowedHttpMethodsItemPut    SourceTypeConfigApiKeyAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigApiKeyAllowedHttpMethodsItemPatch  SourceTypeConfigApiKeyAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigApiKeyAllowedHttpMethodsItemDelete SourceTypeConfigApiKeyAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigApiKeyAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigApiKeyAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigApiKeyAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigApiKeyAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigApiKeyAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigApiKeyAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigApiKeyAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigApiKeyAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigApiKeyAllowedHttpMethodsItem) Ptr() *SourceTypeConfigApiKeyAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigApiKeyAuth struct {
	HeaderKey string `json:"header_key" url:"header_key"`
	ApiKey    string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigApiKeyAuth) GetHeaderKey() string {
	if s == nil {
		return ""
	}
	return s.HeaderKey
}

func (s *SourceTypeConfigApiKeyAuth) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceTypeConfigApiKeyAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigApiKeyAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigApiKeyAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigApiKeyAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigApiKeyAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigApiKeyCustomResponse struct {
	ContentType *SourceTypeConfigApiKeyCustomResponseContentType `json:"content_type,omitempty" url:"content_type,omitempty"`
	Body        string                                           `json:"body" url:"body"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigApiKeyCustomResponse) GetContentType() *SourceTypeConfigApiKeyCustomResponseContentType {
	if s == nil {
		return nil
	}
	return s.ContentType
}

func (s *SourceTypeConfigApiKeyCustomResponse) GetBody() string {
	if s == nil {
		return ""
	}
	return s.Body
}

func (s *SourceTypeConfigApiKeyCustomResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigApiKeyCustomResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigApiKeyCustomResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigApiKeyCustomResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigApiKeyCustomResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigApiKeyCustomResponseContentType string

const (
	SourceTypeConfigApiKeyCustomResponseContentTypeJson SourceTypeConfigApiKeyCustomResponseContentType = "json"
	SourceTypeConfigApiKeyCustomResponseContentTypeText SourceTypeConfigApiKeyCustomResponseContentType = "text"
	SourceTypeConfigApiKeyCustomResponseContentTypeXml  SourceTypeConfigApiKeyCustomResponseContentType = "xml"
)

func NewSourceTypeConfigApiKeyCustomResponseContentTypeFromString(s string) (SourceTypeConfigApiKeyCustomResponseContentType, error) {
	switch s {
	case "json":
		return SourceTypeConfigApiKeyCustomResponseContentTypeJson, nil
	case "text":
		return SourceTypeConfigApiKeyCustomResponseContentTypeText, nil
	case "xml":
		return SourceTypeConfigApiKeyCustomResponseContentTypeXml, nil
	}
	var t SourceTypeConfigApiKeyCustomResponseContentType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigApiKeyCustomResponseContentType) Ptr() *SourceTypeConfigApiKeyCustomResponseContentType {
	return &s
}

// The type config for AWS SNS. Requires type to be `AWS_SNS`.
type SourceTypeConfigAwssns struct {
	AllowedHttpMethods []SourceTypeConfigAwssnsAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigAwssnsAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigAwssns) GetAllowedHttpMethods() []SourceTypeConfigAwssnsAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigAwssns) GetAuth() *SourceTypeConfigAwssnsAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigAwssns) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigAwssns) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigAwssns
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigAwssns(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigAwssns) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigAwssnsAllowedHttpMethodsItem string

const (
	SourceTypeConfigAwssnsAllowedHttpMethodsItemGet    SourceTypeConfigAwssnsAllowedHttpMethodsItem = "GET"
	SourceTypeConfigAwssnsAllowedHttpMethodsItemPost   SourceTypeConfigAwssnsAllowedHttpMethodsItem = "POST"
	SourceTypeConfigAwssnsAllowedHttpMethodsItemPut    SourceTypeConfigAwssnsAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigAwssnsAllowedHttpMethodsItemPatch  SourceTypeConfigAwssnsAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigAwssnsAllowedHttpMethodsItemDelete SourceTypeConfigAwssnsAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigAwssnsAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigAwssnsAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigAwssnsAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigAwssnsAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigAwssnsAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigAwssnsAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigAwssnsAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigAwssnsAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigAwssnsAllowedHttpMethodsItem) Ptr() *SourceTypeConfigAwssnsAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigAwssnsAuth struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigAwssnsAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigAwssnsAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigAwssnsAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigAwssnsAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigAwssnsAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Basic Auth. Requires type to be `BASIC_AUTH`.
type SourceTypeConfigBasicAuth struct {
	Type               *string                                           `json:"type,omitempty" url:"type,omitempty"`
	AllowedHttpMethods []SourceTypeConfigBasicAuthAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	CustomResponse     *SourceTypeConfigBasicAuthCustomResponse          `json:"custom_response,omitempty" url:"custom_response,omitempty"`
	Auth               *SourceTypeConfigBasicAuthAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigBasicAuth) GetAllowedHttpMethods() []SourceTypeConfigBasicAuthAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigBasicAuth) GetCustomResponse() *SourceTypeConfigBasicAuthCustomResponse {
	if s == nil {
		return nil
	}
	return s.CustomResponse
}

func (s *SourceTypeConfigBasicAuth) GetAuth() *SourceTypeConfigBasicAuthAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigBasicAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigBasicAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigBasicAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigBasicAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigBasicAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigBasicAuthAllowedHttpMethodsItem string

const (
	SourceTypeConfigBasicAuthAllowedHttpMethodsItemGet    SourceTypeConfigBasicAuthAllowedHttpMethodsItem = "GET"
	SourceTypeConfigBasicAuthAllowedHttpMethodsItemPost   SourceTypeConfigBasicAuthAllowedHttpMethodsItem = "POST"
	SourceTypeConfigBasicAuthAllowedHttpMethodsItemPut    SourceTypeConfigBasicAuthAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigBasicAuthAllowedHttpMethodsItemPatch  SourceTypeConfigBasicAuthAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigBasicAuthAllowedHttpMethodsItemDelete SourceTypeConfigBasicAuthAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigBasicAuthAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigBasicAuthAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigBasicAuthAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigBasicAuthAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigBasicAuthAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigBasicAuthAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigBasicAuthAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigBasicAuthAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigBasicAuthAllowedHttpMethodsItem) Ptr() *SourceTypeConfigBasicAuthAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigBasicAuthAuth struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigBasicAuthAuth) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

func (s *SourceTypeConfigBasicAuthAuth) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SourceTypeConfigBasicAuthAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigBasicAuthAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigBasicAuthAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigBasicAuthAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigBasicAuthAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigBasicAuthCustomResponse struct {
	ContentType *SourceTypeConfigBasicAuthCustomResponseContentType `json:"content_type,omitempty" url:"content_type,omitempty"`
	Body        string                                              `json:"body" url:"body"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigBasicAuthCustomResponse) GetContentType() *SourceTypeConfigBasicAuthCustomResponseContentType {
	if s == nil {
		return nil
	}
	return s.ContentType
}

func (s *SourceTypeConfigBasicAuthCustomResponse) GetBody() string {
	if s == nil {
		return ""
	}
	return s.Body
}

func (s *SourceTypeConfigBasicAuthCustomResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigBasicAuthCustomResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigBasicAuthCustomResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigBasicAuthCustomResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigBasicAuthCustomResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigBasicAuthCustomResponseContentType string

const (
	SourceTypeConfigBasicAuthCustomResponseContentTypeJson SourceTypeConfigBasicAuthCustomResponseContentType = "json"
	SourceTypeConfigBasicAuthCustomResponseContentTypeText SourceTypeConfigBasicAuthCustomResponseContentType = "text"
	SourceTypeConfigBasicAuthCustomResponseContentTypeXml  SourceTypeConfigBasicAuthCustomResponseContentType = "xml"
)

func NewSourceTypeConfigBasicAuthCustomResponseContentTypeFromString(s string) (SourceTypeConfigBasicAuthCustomResponseContentType, error) {
	switch s {
	case "json":
		return SourceTypeConfigBasicAuthCustomResponseContentTypeJson, nil
	case "text":
		return SourceTypeConfigBasicAuthCustomResponseContentTypeText, nil
	case "xml":
		return SourceTypeConfigBasicAuthCustomResponseContentTypeXml, nil
	}
	var t SourceTypeConfigBasicAuthCustomResponseContentType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigBasicAuthCustomResponseContentType) Ptr() *SourceTypeConfigBasicAuthCustomResponseContentType {
	return &s
}

// The type config for Bondsmith. Requires type to be `BONDSMITH`.
type SourceTypeConfigBondsmith struct {
	AllowedHttpMethods []SourceTypeConfigBondsmithAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigBondsmithAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigBondsmith) GetAllowedHttpMethods() []SourceTypeConfigBondsmithAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigBondsmith) GetAuth() *SourceTypeConfigBondsmithAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigBondsmith) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigBondsmith) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigBondsmith
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigBondsmith(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigBondsmith) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigBondsmithAllowedHttpMethodsItem string

const (
	SourceTypeConfigBondsmithAllowedHttpMethodsItemGet    SourceTypeConfigBondsmithAllowedHttpMethodsItem = "GET"
	SourceTypeConfigBondsmithAllowedHttpMethodsItemPost   SourceTypeConfigBondsmithAllowedHttpMethodsItem = "POST"
	SourceTypeConfigBondsmithAllowedHttpMethodsItemPut    SourceTypeConfigBondsmithAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigBondsmithAllowedHttpMethodsItemPatch  SourceTypeConfigBondsmithAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigBondsmithAllowedHttpMethodsItemDelete SourceTypeConfigBondsmithAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigBondsmithAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigBondsmithAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigBondsmithAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigBondsmithAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigBondsmithAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigBondsmithAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigBondsmithAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigBondsmithAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigBondsmithAllowedHttpMethodsItem) Ptr() *SourceTypeConfigBondsmithAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigBondsmithAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigBondsmithAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigBondsmithAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigBondsmithAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigBondsmithAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigBondsmithAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigBondsmithAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Bridge. Requires type to be `BRIDGE`.
type SourceTypeConfigBridge struct {
	AllowedHttpMethods []SourceTypeConfigBridgeAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigBridgeAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigBridge) GetAllowedHttpMethods() []SourceTypeConfigBridgeAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigBridge) GetAuth() *SourceTypeConfigBridgeAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigBridge) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigBridge) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigBridge
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigBridge(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigBridge) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigBridgeAllowedHttpMethodsItem string

const (
	SourceTypeConfigBridgeAllowedHttpMethodsItemGet    SourceTypeConfigBridgeAllowedHttpMethodsItem = "GET"
	SourceTypeConfigBridgeAllowedHttpMethodsItemPost   SourceTypeConfigBridgeAllowedHttpMethodsItem = "POST"
	SourceTypeConfigBridgeAllowedHttpMethodsItemPut    SourceTypeConfigBridgeAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigBridgeAllowedHttpMethodsItemPatch  SourceTypeConfigBridgeAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigBridgeAllowedHttpMethodsItemDelete SourceTypeConfigBridgeAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigBridgeAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigBridgeAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigBridgeAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigBridgeAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigBridgeAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigBridgeAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigBridgeAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigBridgeAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigBridgeAllowedHttpMethodsItem) Ptr() *SourceTypeConfigBridgeAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigBridgeAuth struct {
	PublicKey string `json:"public_key" url:"public_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigBridgeAuth) GetPublicKey() string {
	if s == nil {
		return ""
	}
	return s.PublicKey
}

func (s *SourceTypeConfigBridgeAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigBridgeAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigBridgeAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigBridgeAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigBridgeAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Cloud Signal. Requires type to be `CLOUDSIGNAL`.
type SourceTypeConfigCloudSignal struct {
	AllowedHttpMethods []SourceTypeConfigCloudSignalAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigCloudSignalAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigCloudSignal) GetAllowedHttpMethods() []SourceTypeConfigCloudSignalAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigCloudSignal) GetAuth() *SourceTypeConfigCloudSignalAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigCloudSignal) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigCloudSignal) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigCloudSignal
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigCloudSignal(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigCloudSignal) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigCloudSignalAllowedHttpMethodsItem string

const (
	SourceTypeConfigCloudSignalAllowedHttpMethodsItemGet    SourceTypeConfigCloudSignalAllowedHttpMethodsItem = "GET"
	SourceTypeConfigCloudSignalAllowedHttpMethodsItemPost   SourceTypeConfigCloudSignalAllowedHttpMethodsItem = "POST"
	SourceTypeConfigCloudSignalAllowedHttpMethodsItemPut    SourceTypeConfigCloudSignalAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigCloudSignalAllowedHttpMethodsItemPatch  SourceTypeConfigCloudSignalAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigCloudSignalAllowedHttpMethodsItemDelete SourceTypeConfigCloudSignalAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigCloudSignalAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigCloudSignalAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigCloudSignalAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigCloudSignalAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigCloudSignalAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigCloudSignalAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigCloudSignalAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigCloudSignalAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigCloudSignalAllowedHttpMethodsItem) Ptr() *SourceTypeConfigCloudSignalAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigCloudSignalAuth struct {
	ApiKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigCloudSignalAuth) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceTypeConfigCloudSignalAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigCloudSignalAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigCloudSignalAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigCloudSignalAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigCloudSignalAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Commerce Layer. Requires type to be `COMMERCELAYER`.
type SourceTypeConfigCommerceLayer struct {
	AllowedHttpMethods []SourceTypeConfigCommerceLayerAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigCommerceLayerAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigCommerceLayer) GetAllowedHttpMethods() []SourceTypeConfigCommerceLayerAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigCommerceLayer) GetAuth() *SourceTypeConfigCommerceLayerAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigCommerceLayer) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigCommerceLayer) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigCommerceLayer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigCommerceLayer(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigCommerceLayer) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigCommerceLayerAllowedHttpMethodsItem string

const (
	SourceTypeConfigCommerceLayerAllowedHttpMethodsItemGet    SourceTypeConfigCommerceLayerAllowedHttpMethodsItem = "GET"
	SourceTypeConfigCommerceLayerAllowedHttpMethodsItemPost   SourceTypeConfigCommerceLayerAllowedHttpMethodsItem = "POST"
	SourceTypeConfigCommerceLayerAllowedHttpMethodsItemPut    SourceTypeConfigCommerceLayerAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigCommerceLayerAllowedHttpMethodsItemPatch  SourceTypeConfigCommerceLayerAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigCommerceLayerAllowedHttpMethodsItemDelete SourceTypeConfigCommerceLayerAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigCommerceLayerAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigCommerceLayerAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigCommerceLayerAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigCommerceLayerAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigCommerceLayerAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigCommerceLayerAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigCommerceLayerAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigCommerceLayerAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigCommerceLayerAllowedHttpMethodsItem) Ptr() *SourceTypeConfigCommerceLayerAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigCommerceLayerAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigCommerceLayerAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigCommerceLayerAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigCommerceLayerAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigCommerceLayerAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigCommerceLayerAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigCommerceLayerAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Courier. Requires type to be `COURIER`.
type SourceTypeConfigCourier struct {
	AllowedHttpMethods []SourceTypeConfigCourierAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigCourierAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigCourier) GetAllowedHttpMethods() []SourceTypeConfigCourierAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigCourier) GetAuth() *SourceTypeConfigCourierAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigCourier) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigCourier) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigCourier
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigCourier(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigCourier) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigCourierAllowedHttpMethodsItem string

const (
	SourceTypeConfigCourierAllowedHttpMethodsItemGet    SourceTypeConfigCourierAllowedHttpMethodsItem = "GET"
	SourceTypeConfigCourierAllowedHttpMethodsItemPost   SourceTypeConfigCourierAllowedHttpMethodsItem = "POST"
	SourceTypeConfigCourierAllowedHttpMethodsItemPut    SourceTypeConfigCourierAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigCourierAllowedHttpMethodsItemPatch  SourceTypeConfigCourierAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigCourierAllowedHttpMethodsItemDelete SourceTypeConfigCourierAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigCourierAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigCourierAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigCourierAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigCourierAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigCourierAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigCourierAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigCourierAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigCourierAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigCourierAllowedHttpMethodsItem) Ptr() *SourceTypeConfigCourierAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigCourierAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigCourierAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigCourierAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigCourierAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigCourierAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigCourierAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigCourierAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Customer.IO. Requires type to be `CUSTOMERIO`.
type SourceTypeConfigCustomerIo struct {
	AllowedHttpMethods []SourceTypeConfigCustomerIoAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigCustomerIoAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigCustomerIo) GetAllowedHttpMethods() []SourceTypeConfigCustomerIoAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigCustomerIo) GetAuth() *SourceTypeConfigCustomerIoAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigCustomerIo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigCustomerIo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigCustomerIo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigCustomerIo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigCustomerIo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigCustomerIoAllowedHttpMethodsItem string

const (
	SourceTypeConfigCustomerIoAllowedHttpMethodsItemGet    SourceTypeConfigCustomerIoAllowedHttpMethodsItem = "GET"
	SourceTypeConfigCustomerIoAllowedHttpMethodsItemPost   SourceTypeConfigCustomerIoAllowedHttpMethodsItem = "POST"
	SourceTypeConfigCustomerIoAllowedHttpMethodsItemPut    SourceTypeConfigCustomerIoAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigCustomerIoAllowedHttpMethodsItemPatch  SourceTypeConfigCustomerIoAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigCustomerIoAllowedHttpMethodsItemDelete SourceTypeConfigCustomerIoAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigCustomerIoAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigCustomerIoAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigCustomerIoAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigCustomerIoAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigCustomerIoAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigCustomerIoAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigCustomerIoAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigCustomerIoAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigCustomerIoAllowedHttpMethodsItem) Ptr() *SourceTypeConfigCustomerIoAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigCustomerIoAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigCustomerIoAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigCustomerIoAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigCustomerIoAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigCustomerIoAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigCustomerIoAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigCustomerIoAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Discord. Requires type to be `DISCORD`.
type SourceTypeConfigDiscord struct {
	AllowedHttpMethods []SourceTypeConfigDiscordAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigDiscordAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigDiscord) GetAllowedHttpMethods() []SourceTypeConfigDiscordAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigDiscord) GetAuth() *SourceTypeConfigDiscordAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigDiscord) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigDiscord) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigDiscord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigDiscord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigDiscord) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigDiscordAllowedHttpMethodsItem string

const (
	SourceTypeConfigDiscordAllowedHttpMethodsItemGet    SourceTypeConfigDiscordAllowedHttpMethodsItem = "GET"
	SourceTypeConfigDiscordAllowedHttpMethodsItemPost   SourceTypeConfigDiscordAllowedHttpMethodsItem = "POST"
	SourceTypeConfigDiscordAllowedHttpMethodsItemPut    SourceTypeConfigDiscordAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigDiscordAllowedHttpMethodsItemPatch  SourceTypeConfigDiscordAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigDiscordAllowedHttpMethodsItemDelete SourceTypeConfigDiscordAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigDiscordAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigDiscordAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigDiscordAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigDiscordAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigDiscordAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigDiscordAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigDiscordAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigDiscordAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigDiscordAllowedHttpMethodsItem) Ptr() *SourceTypeConfigDiscordAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigDiscordAuth struct {
	PublicKey string `json:"public_key" url:"public_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigDiscordAuth) GetPublicKey() string {
	if s == nil {
		return ""
	}
	return s.PublicKey
}

func (s *SourceTypeConfigDiscordAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigDiscordAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigDiscordAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigDiscordAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigDiscordAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Ebay. Requires type to be `EBAY`.
type SourceTypeConfigEbay struct {
	AllowedHttpMethods []SourceTypeConfigEbayAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigEbayAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigEbay) GetAllowedHttpMethods() []SourceTypeConfigEbayAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigEbay) GetAuth() *SourceTypeConfigEbayAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigEbay) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigEbay) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigEbay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigEbay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigEbay) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigEbayAllowedHttpMethodsItem string

const (
	SourceTypeConfigEbayAllowedHttpMethodsItemGet    SourceTypeConfigEbayAllowedHttpMethodsItem = "GET"
	SourceTypeConfigEbayAllowedHttpMethodsItemPost   SourceTypeConfigEbayAllowedHttpMethodsItem = "POST"
	SourceTypeConfigEbayAllowedHttpMethodsItemPut    SourceTypeConfigEbayAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigEbayAllowedHttpMethodsItemPatch  SourceTypeConfigEbayAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigEbayAllowedHttpMethodsItemDelete SourceTypeConfigEbayAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigEbayAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigEbayAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigEbayAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigEbayAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigEbayAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigEbayAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigEbayAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigEbayAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigEbayAllowedHttpMethodsItem) Ptr() *SourceTypeConfigEbayAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigEbayAuth struct {
	Environment       SourceTypeConfigEbayAuthEnvironment `json:"environment" url:"environment"`
	DevId             string                              `json:"dev_id" url:"dev_id"`
	ClientId          string                              `json:"client_id" url:"client_id"`
	ClientSecret      string                              `json:"client_secret" url:"client_secret"`
	VerificationToken string                              `json:"verification_token" url:"verification_token"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigEbayAuth) GetEnvironment() SourceTypeConfigEbayAuthEnvironment {
	if s == nil {
		return ""
	}
	return s.Environment
}

func (s *SourceTypeConfigEbayAuth) GetDevId() string {
	if s == nil {
		return ""
	}
	return s.DevId
}

func (s *SourceTypeConfigEbayAuth) GetClientId() string {
	if s == nil {
		return ""
	}
	return s.ClientId
}

func (s *SourceTypeConfigEbayAuth) GetClientSecret() string {
	if s == nil {
		return ""
	}
	return s.ClientSecret
}

func (s *SourceTypeConfigEbayAuth) GetVerificationToken() string {
	if s == nil {
		return ""
	}
	return s.VerificationToken
}

func (s *SourceTypeConfigEbayAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigEbayAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigEbayAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigEbayAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigEbayAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigEbayAuthEnvironment string

const (
	SourceTypeConfigEbayAuthEnvironmentProduction SourceTypeConfigEbayAuthEnvironment = "PRODUCTION"
	SourceTypeConfigEbayAuthEnvironmentSandbox    SourceTypeConfigEbayAuthEnvironment = "SANDBOX"
)

func NewSourceTypeConfigEbayAuthEnvironmentFromString(s string) (SourceTypeConfigEbayAuthEnvironment, error) {
	switch s {
	case "PRODUCTION":
		return SourceTypeConfigEbayAuthEnvironmentProduction, nil
	case "SANDBOX":
		return SourceTypeConfigEbayAuthEnvironmentSandbox, nil
	}
	var t SourceTypeConfigEbayAuthEnvironment
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigEbayAuthEnvironment) Ptr() *SourceTypeConfigEbayAuthEnvironment {
	return &s
}

// The type config for Enode. Requires type to be `ENODE`.
type SourceTypeConfigEnode struct {
	AllowedHttpMethods []SourceTypeConfigEnodeAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigEnodeAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigEnode) GetAllowedHttpMethods() []SourceTypeConfigEnodeAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigEnode) GetAuth() *SourceTypeConfigEnodeAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigEnode) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigEnode) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigEnode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigEnode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigEnode) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigEnodeAllowedHttpMethodsItem string

const (
	SourceTypeConfigEnodeAllowedHttpMethodsItemGet    SourceTypeConfigEnodeAllowedHttpMethodsItem = "GET"
	SourceTypeConfigEnodeAllowedHttpMethodsItemPost   SourceTypeConfigEnodeAllowedHttpMethodsItem = "POST"
	SourceTypeConfigEnodeAllowedHttpMethodsItemPut    SourceTypeConfigEnodeAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigEnodeAllowedHttpMethodsItemPatch  SourceTypeConfigEnodeAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigEnodeAllowedHttpMethodsItemDelete SourceTypeConfigEnodeAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigEnodeAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigEnodeAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigEnodeAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigEnodeAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigEnodeAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigEnodeAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigEnodeAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigEnodeAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigEnodeAllowedHttpMethodsItem) Ptr() *SourceTypeConfigEnodeAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigEnodeAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigEnodeAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigEnodeAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigEnodeAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigEnodeAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigEnodeAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigEnodeAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Facebook. Requires type to be `FACEBOOK`.
type SourceTypeConfigFacebook struct {
	AllowedHttpMethods []SourceTypeConfigFacebookAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigFacebookAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigFacebook) GetAllowedHttpMethods() []SourceTypeConfigFacebookAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigFacebook) GetAuth() *SourceTypeConfigFacebookAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigFacebook) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigFacebook) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigFacebook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigFacebook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigFacebook) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigFacebookAllowedHttpMethodsItem string

const (
	SourceTypeConfigFacebookAllowedHttpMethodsItemGet    SourceTypeConfigFacebookAllowedHttpMethodsItem = "GET"
	SourceTypeConfigFacebookAllowedHttpMethodsItemPost   SourceTypeConfigFacebookAllowedHttpMethodsItem = "POST"
	SourceTypeConfigFacebookAllowedHttpMethodsItemPut    SourceTypeConfigFacebookAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigFacebookAllowedHttpMethodsItemPatch  SourceTypeConfigFacebookAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigFacebookAllowedHttpMethodsItemDelete SourceTypeConfigFacebookAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigFacebookAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigFacebookAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigFacebookAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigFacebookAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigFacebookAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigFacebookAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigFacebookAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigFacebookAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigFacebookAllowedHttpMethodsItem) Ptr() *SourceTypeConfigFacebookAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigFacebookAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigFacebookAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigFacebookAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigFacebookAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigFacebookAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigFacebookAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigFacebookAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Favro. Requires type to be `FAVRO`.
type SourceTypeConfigFavro struct {
	AllowedHttpMethods []SourceTypeConfigFavroAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigFavroAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigFavro) GetAllowedHttpMethods() []SourceTypeConfigFavroAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigFavro) GetAuth() *SourceTypeConfigFavroAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigFavro) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigFavro) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigFavro
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigFavro(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigFavro) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigFavroAllowedHttpMethodsItem string

const (
	SourceTypeConfigFavroAllowedHttpMethodsItemGet    SourceTypeConfigFavroAllowedHttpMethodsItem = "GET"
	SourceTypeConfigFavroAllowedHttpMethodsItemPost   SourceTypeConfigFavroAllowedHttpMethodsItem = "POST"
	SourceTypeConfigFavroAllowedHttpMethodsItemPut    SourceTypeConfigFavroAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigFavroAllowedHttpMethodsItemPatch  SourceTypeConfigFavroAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigFavroAllowedHttpMethodsItemDelete SourceTypeConfigFavroAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigFavroAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigFavroAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigFavroAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigFavroAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigFavroAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigFavroAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigFavroAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigFavroAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigFavroAllowedHttpMethodsItem) Ptr() *SourceTypeConfigFavroAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigFavroAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigFavroAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigFavroAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigFavroAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigFavroAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigFavroAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigFavroAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Fiserv. Requires type to be `FISERV`.
type SourceTypeConfigFiserv struct {
	AllowedHttpMethods []SourceTypeConfigFiservAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigFiservAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigFiserv) GetAllowedHttpMethods() []SourceTypeConfigFiservAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigFiserv) GetAuth() *SourceTypeConfigFiservAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigFiserv) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigFiserv) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigFiserv
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigFiserv(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigFiserv) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigFiservAllowedHttpMethodsItem string

const (
	SourceTypeConfigFiservAllowedHttpMethodsItemGet    SourceTypeConfigFiservAllowedHttpMethodsItem = "GET"
	SourceTypeConfigFiservAllowedHttpMethodsItemPost   SourceTypeConfigFiservAllowedHttpMethodsItem = "POST"
	SourceTypeConfigFiservAllowedHttpMethodsItemPut    SourceTypeConfigFiservAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigFiservAllowedHttpMethodsItemPatch  SourceTypeConfigFiservAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigFiservAllowedHttpMethodsItemDelete SourceTypeConfigFiservAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigFiservAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigFiservAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigFiservAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigFiservAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigFiservAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigFiservAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigFiservAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigFiservAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigFiservAllowedHttpMethodsItem) Ptr() *SourceTypeConfigFiservAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigFiservAuth struct {
	WebhookSecretKey string  `json:"webhook_secret_key" url:"webhook_secret_key"`
	StoreName        *string `json:"store_name,omitempty" url:"store_name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigFiservAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigFiservAuth) GetStoreName() *string {
	if s == nil {
		return nil
	}
	return s.StoreName
}

func (s *SourceTypeConfigFiservAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigFiservAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigFiservAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigFiservAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigFiservAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for FrontApp. Requires type to be `FRONTAPP`.
type SourceTypeConfigFrontApp struct {
	AllowedHttpMethods []SourceTypeConfigFrontAppAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigFrontAppAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigFrontApp) GetAllowedHttpMethods() []SourceTypeConfigFrontAppAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigFrontApp) GetAuth() *SourceTypeConfigFrontAppAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigFrontApp) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigFrontApp) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigFrontApp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigFrontApp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigFrontApp) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigFrontAppAllowedHttpMethodsItem string

const (
	SourceTypeConfigFrontAppAllowedHttpMethodsItemGet    SourceTypeConfigFrontAppAllowedHttpMethodsItem = "GET"
	SourceTypeConfigFrontAppAllowedHttpMethodsItemPost   SourceTypeConfigFrontAppAllowedHttpMethodsItem = "POST"
	SourceTypeConfigFrontAppAllowedHttpMethodsItemPut    SourceTypeConfigFrontAppAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigFrontAppAllowedHttpMethodsItemPatch  SourceTypeConfigFrontAppAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigFrontAppAllowedHttpMethodsItemDelete SourceTypeConfigFrontAppAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigFrontAppAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigFrontAppAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigFrontAppAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigFrontAppAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigFrontAppAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigFrontAppAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigFrontAppAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigFrontAppAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigFrontAppAllowedHttpMethodsItem) Ptr() *SourceTypeConfigFrontAppAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigFrontAppAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigFrontAppAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigFrontAppAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigFrontAppAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigFrontAppAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigFrontAppAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigFrontAppAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for GitHub. Requires type to be `GITHUB`.
type SourceTypeConfigGitHub struct {
	AllowedHttpMethods []SourceTypeConfigGitHubAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigGitHubAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigGitHub) GetAllowedHttpMethods() []SourceTypeConfigGitHubAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigGitHub) GetAuth() *SourceTypeConfigGitHubAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigGitHub) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigGitHub) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigGitHub
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigGitHub(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigGitHub) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigGitHubAllowedHttpMethodsItem string

const (
	SourceTypeConfigGitHubAllowedHttpMethodsItemGet    SourceTypeConfigGitHubAllowedHttpMethodsItem = "GET"
	SourceTypeConfigGitHubAllowedHttpMethodsItemPost   SourceTypeConfigGitHubAllowedHttpMethodsItem = "POST"
	SourceTypeConfigGitHubAllowedHttpMethodsItemPut    SourceTypeConfigGitHubAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigGitHubAllowedHttpMethodsItemPatch  SourceTypeConfigGitHubAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigGitHubAllowedHttpMethodsItemDelete SourceTypeConfigGitHubAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigGitHubAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigGitHubAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigGitHubAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigGitHubAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigGitHubAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigGitHubAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigGitHubAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigGitHubAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigGitHubAllowedHttpMethodsItem) Ptr() *SourceTypeConfigGitHubAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigGitHubAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigGitHubAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigGitHubAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigGitHubAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigGitHubAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigGitHubAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigGitHubAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for GitLab. Requires type to be `GITLAB`.
type SourceTypeConfigGitLab struct {
	AllowedHttpMethods []SourceTypeConfigGitLabAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigGitLabAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigGitLab) GetAllowedHttpMethods() []SourceTypeConfigGitLabAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigGitLab) GetAuth() *SourceTypeConfigGitLabAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigGitLab) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigGitLab) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigGitLab
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigGitLab(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigGitLab) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigGitLabAllowedHttpMethodsItem string

const (
	SourceTypeConfigGitLabAllowedHttpMethodsItemGet    SourceTypeConfigGitLabAllowedHttpMethodsItem = "GET"
	SourceTypeConfigGitLabAllowedHttpMethodsItemPost   SourceTypeConfigGitLabAllowedHttpMethodsItem = "POST"
	SourceTypeConfigGitLabAllowedHttpMethodsItemPut    SourceTypeConfigGitLabAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigGitLabAllowedHttpMethodsItemPatch  SourceTypeConfigGitLabAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigGitLabAllowedHttpMethodsItemDelete SourceTypeConfigGitLabAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigGitLabAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigGitLabAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigGitLabAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigGitLabAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigGitLabAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigGitLabAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigGitLabAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigGitLabAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigGitLabAllowedHttpMethodsItem) Ptr() *SourceTypeConfigGitLabAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigGitLabAuth struct {
	ApiKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigGitLabAuth) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceTypeConfigGitLabAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigGitLabAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigGitLabAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigGitLabAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigGitLabAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for HMAC. Requires type to be `HMAC`.
type SourceTypeConfigHmac struct {
	Type               *string                                      `json:"type,omitempty" url:"type,omitempty"`
	AllowedHttpMethods []SourceTypeConfigHmacAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	CustomResponse     *SourceTypeConfigHmacCustomResponse          `json:"custom_response,omitempty" url:"custom_response,omitempty"`
	Auth               *SourceTypeConfigHmacAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHmac) GetAllowedHttpMethods() []SourceTypeConfigHmacAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigHmac) GetCustomResponse() *SourceTypeConfigHmacCustomResponse {
	if s == nil {
		return nil
	}
	return s.CustomResponse
}

func (s *SourceTypeConfigHmac) GetAuth() *SourceTypeConfigHmacAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigHmac) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHmac) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHmac
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHmac(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHmac) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHmacAllowedHttpMethodsItem string

const (
	SourceTypeConfigHmacAllowedHttpMethodsItemGet    SourceTypeConfigHmacAllowedHttpMethodsItem = "GET"
	SourceTypeConfigHmacAllowedHttpMethodsItemPost   SourceTypeConfigHmacAllowedHttpMethodsItem = "POST"
	SourceTypeConfigHmacAllowedHttpMethodsItemPut    SourceTypeConfigHmacAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigHmacAllowedHttpMethodsItemPatch  SourceTypeConfigHmacAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigHmacAllowedHttpMethodsItemDelete SourceTypeConfigHmacAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigHmacAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigHmacAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigHmacAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigHmacAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigHmacAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigHmacAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigHmacAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigHmacAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHmacAllowedHttpMethodsItem) Ptr() *SourceTypeConfigHmacAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigHmacAuth struct {
	Algorithm        SourceTypeConfigHmacAuthAlgorithm `json:"algorithm" url:"algorithm"`
	Encoding         SourceTypeConfigHmacAuthEncoding  `json:"encoding" url:"encoding"`
	HeaderKey        string                            `json:"header_key" url:"header_key"`
	WebhookSecretKey string                            `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHmacAuth) GetAlgorithm() SourceTypeConfigHmacAuthAlgorithm {
	if s == nil {
		return ""
	}
	return s.Algorithm
}

func (s *SourceTypeConfigHmacAuth) GetEncoding() SourceTypeConfigHmacAuthEncoding {
	if s == nil {
		return ""
	}
	return s.Encoding
}

func (s *SourceTypeConfigHmacAuth) GetHeaderKey() string {
	if s == nil {
		return ""
	}
	return s.HeaderKey
}

func (s *SourceTypeConfigHmacAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigHmacAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHmacAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHmacAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHmacAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHmacAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHmacAuthAlgorithm string

const (
	SourceTypeConfigHmacAuthAlgorithmSha1   SourceTypeConfigHmacAuthAlgorithm = "sha1"
	SourceTypeConfigHmacAuthAlgorithmSha256 SourceTypeConfigHmacAuthAlgorithm = "sha256"
	SourceTypeConfigHmacAuthAlgorithmSha512 SourceTypeConfigHmacAuthAlgorithm = "sha512"
	SourceTypeConfigHmacAuthAlgorithmMd5    SourceTypeConfigHmacAuthAlgorithm = "md5"
)

func NewSourceTypeConfigHmacAuthAlgorithmFromString(s string) (SourceTypeConfigHmacAuthAlgorithm, error) {
	switch s {
	case "sha1":
		return SourceTypeConfigHmacAuthAlgorithmSha1, nil
	case "sha256":
		return SourceTypeConfigHmacAuthAlgorithmSha256, nil
	case "sha512":
		return SourceTypeConfigHmacAuthAlgorithmSha512, nil
	case "md5":
		return SourceTypeConfigHmacAuthAlgorithmMd5, nil
	}
	var t SourceTypeConfigHmacAuthAlgorithm
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHmacAuthAlgorithm) Ptr() *SourceTypeConfigHmacAuthAlgorithm {
	return &s
}

type SourceTypeConfigHmacAuthEncoding string

const (
	SourceTypeConfigHmacAuthEncodingBase64    SourceTypeConfigHmacAuthEncoding = "base64"
	SourceTypeConfigHmacAuthEncodingBase64Url SourceTypeConfigHmacAuthEncoding = "base64url"
	SourceTypeConfigHmacAuthEncodingHex       SourceTypeConfigHmacAuthEncoding = "hex"
)

func NewSourceTypeConfigHmacAuthEncodingFromString(s string) (SourceTypeConfigHmacAuthEncoding, error) {
	switch s {
	case "base64":
		return SourceTypeConfigHmacAuthEncodingBase64, nil
	case "base64url":
		return SourceTypeConfigHmacAuthEncodingBase64Url, nil
	case "hex":
		return SourceTypeConfigHmacAuthEncodingHex, nil
	}
	var t SourceTypeConfigHmacAuthEncoding
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHmacAuthEncoding) Ptr() *SourceTypeConfigHmacAuthEncoding {
	return &s
}

type SourceTypeConfigHmacCustomResponse struct {
	ContentType *SourceTypeConfigHmacCustomResponseContentType `json:"content_type,omitempty" url:"content_type,omitempty"`
	Body        string                                         `json:"body" url:"body"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHmacCustomResponse) GetContentType() *SourceTypeConfigHmacCustomResponseContentType {
	if s == nil {
		return nil
	}
	return s.ContentType
}

func (s *SourceTypeConfigHmacCustomResponse) GetBody() string {
	if s == nil {
		return ""
	}
	return s.Body
}

func (s *SourceTypeConfigHmacCustomResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHmacCustomResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHmacCustomResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHmacCustomResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHmacCustomResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHmacCustomResponseContentType string

const (
	SourceTypeConfigHmacCustomResponseContentTypeJson SourceTypeConfigHmacCustomResponseContentType = "json"
	SourceTypeConfigHmacCustomResponseContentTypeText SourceTypeConfigHmacCustomResponseContentType = "text"
	SourceTypeConfigHmacCustomResponseContentTypeXml  SourceTypeConfigHmacCustomResponseContentType = "xml"
)

func NewSourceTypeConfigHmacCustomResponseContentTypeFromString(s string) (SourceTypeConfigHmacCustomResponseContentType, error) {
	switch s {
	case "json":
		return SourceTypeConfigHmacCustomResponseContentTypeJson, nil
	case "text":
		return SourceTypeConfigHmacCustomResponseContentTypeText, nil
	case "xml":
		return SourceTypeConfigHmacCustomResponseContentTypeXml, nil
	}
	var t SourceTypeConfigHmacCustomResponseContentType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHmacCustomResponseContentType) Ptr() *SourceTypeConfigHmacCustomResponseContentType {
	return &s
}

// The type config for HTTP. Requires type to be `HTTP`.
type SourceTypeConfigHttp struct {
	AllowedHttpMethods []SourceTypeConfigHttpAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	CustomResponse     *SourceTypeConfigHttpCustomResponse          `json:"custom_response,omitempty" url:"custom_response,omitempty"`
	Type               *SourceTypeConfigHttpType                    `json:"type,omitempty" url:"type,omitempty"`
	Auth               *SourceTypeConfigHttpAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHttp) GetAllowedHttpMethods() []SourceTypeConfigHttpAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigHttp) GetCustomResponse() *SourceTypeConfigHttpCustomResponse {
	if s == nil {
		return nil
	}
	return s.CustomResponse
}

func (s *SourceTypeConfigHttp) GetType() *SourceTypeConfigHttpType {
	if s == nil {
		return nil
	}
	return s.Type
}

func (s *SourceTypeConfigHttp) GetAuth() *SourceTypeConfigHttpAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigHttp) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHttp) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHttp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHttp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHttp) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHttpAllowedHttpMethodsItem string

const (
	SourceTypeConfigHttpAllowedHttpMethodsItemGet    SourceTypeConfigHttpAllowedHttpMethodsItem = "GET"
	SourceTypeConfigHttpAllowedHttpMethodsItemPost   SourceTypeConfigHttpAllowedHttpMethodsItem = "POST"
	SourceTypeConfigHttpAllowedHttpMethodsItemPut    SourceTypeConfigHttpAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigHttpAllowedHttpMethodsItemPatch  SourceTypeConfigHttpAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigHttpAllowedHttpMethodsItemDelete SourceTypeConfigHttpAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigHttpAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigHttpAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigHttpAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigHttpAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigHttpAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigHttpAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigHttpAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigHttpAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHttpAllowedHttpMethodsItem) Ptr() *SourceTypeConfigHttpAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigHttpAuth struct {
	SourceTypeConfigHttpAuthAlgorithm *SourceTypeConfigHttpAuthAlgorithm
	SourceTypeConfigHttpAuthPassword  *SourceTypeConfigHttpAuthPassword
	SourceTypeConfigHttpAuthApiKey    *SourceTypeConfigHttpAuthApiKey

	typ string
}

func NewSourceTypeConfigHttpAuthFromSourceTypeConfigHttpAuthAlgorithm(value *SourceTypeConfigHttpAuthAlgorithm) *SourceTypeConfigHttpAuth {
	return &SourceTypeConfigHttpAuth{typ: "SourceTypeConfigHttpAuthAlgorithm", SourceTypeConfigHttpAuthAlgorithm: value}
}

func NewSourceTypeConfigHttpAuthFromSourceTypeConfigHttpAuthPassword(value *SourceTypeConfigHttpAuthPassword) *SourceTypeConfigHttpAuth {
	return &SourceTypeConfigHttpAuth{typ: "SourceTypeConfigHttpAuthPassword", SourceTypeConfigHttpAuthPassword: value}
}

func NewSourceTypeConfigHttpAuthFromSourceTypeConfigHttpAuthApiKey(value *SourceTypeConfigHttpAuthApiKey) *SourceTypeConfigHttpAuth {
	return &SourceTypeConfigHttpAuth{typ: "SourceTypeConfigHttpAuthApiKey", SourceTypeConfigHttpAuthApiKey: value}
}

func (s *SourceTypeConfigHttpAuth) GetSourceTypeConfigHttpAuthAlgorithm() *SourceTypeConfigHttpAuthAlgorithm {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHttpAuthAlgorithm
}

func (s *SourceTypeConfigHttpAuth) GetSourceTypeConfigHttpAuthPassword() *SourceTypeConfigHttpAuthPassword {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHttpAuthPassword
}

func (s *SourceTypeConfigHttpAuth) GetSourceTypeConfigHttpAuthApiKey() *SourceTypeConfigHttpAuthApiKey {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigHttpAuthApiKey
}

func (s *SourceTypeConfigHttpAuth) UnmarshalJSON(data []byte) error {
	valueSourceTypeConfigHttpAuthAlgorithm := new(SourceTypeConfigHttpAuthAlgorithm)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHttpAuthAlgorithm); err == nil {
		s.typ = "SourceTypeConfigHttpAuthAlgorithm"
		s.SourceTypeConfigHttpAuthAlgorithm = valueSourceTypeConfigHttpAuthAlgorithm
		return nil
	}
	valueSourceTypeConfigHttpAuthPassword := new(SourceTypeConfigHttpAuthPassword)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHttpAuthPassword); err == nil {
		s.typ = "SourceTypeConfigHttpAuthPassword"
		s.SourceTypeConfigHttpAuthPassword = valueSourceTypeConfigHttpAuthPassword
		return nil
	}
	valueSourceTypeConfigHttpAuthApiKey := new(SourceTypeConfigHttpAuthApiKey)
	if err := json.Unmarshal(data, &valueSourceTypeConfigHttpAuthApiKey); err == nil {
		s.typ = "SourceTypeConfigHttpAuthApiKey"
		s.SourceTypeConfigHttpAuthApiKey = valueSourceTypeConfigHttpAuthApiKey
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SourceTypeConfigHttpAuth) MarshalJSON() ([]byte, error) {
	if s.typ == "SourceTypeConfigHttpAuthAlgorithm" || s.SourceTypeConfigHttpAuthAlgorithm != nil {
		return json.Marshal(s.SourceTypeConfigHttpAuthAlgorithm)
	}
	if s.typ == "SourceTypeConfigHttpAuthPassword" || s.SourceTypeConfigHttpAuthPassword != nil {
		return json.Marshal(s.SourceTypeConfigHttpAuthPassword)
	}
	if s.typ == "SourceTypeConfigHttpAuthApiKey" || s.SourceTypeConfigHttpAuthApiKey != nil {
		return json.Marshal(s.SourceTypeConfigHttpAuthApiKey)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SourceTypeConfigHttpAuthVisitor interface {
	VisitSourceTypeConfigHttpAuthAlgorithm(*SourceTypeConfigHttpAuthAlgorithm) error
	VisitSourceTypeConfigHttpAuthPassword(*SourceTypeConfigHttpAuthPassword) error
	VisitSourceTypeConfigHttpAuthApiKey(*SourceTypeConfigHttpAuthApiKey) error
}

func (s *SourceTypeConfigHttpAuth) Accept(visitor SourceTypeConfigHttpAuthVisitor) error {
	if s.typ == "SourceTypeConfigHttpAuthAlgorithm" || s.SourceTypeConfigHttpAuthAlgorithm != nil {
		return visitor.VisitSourceTypeConfigHttpAuthAlgorithm(s.SourceTypeConfigHttpAuthAlgorithm)
	}
	if s.typ == "SourceTypeConfigHttpAuthPassword" || s.SourceTypeConfigHttpAuthPassword != nil {
		return visitor.VisitSourceTypeConfigHttpAuthPassword(s.SourceTypeConfigHttpAuthPassword)
	}
	if s.typ == "SourceTypeConfigHttpAuthApiKey" || s.SourceTypeConfigHttpAuthApiKey != nil {
		return visitor.VisitSourceTypeConfigHttpAuthApiKey(s.SourceTypeConfigHttpAuthApiKey)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SourceTypeConfigHttpAuthAlgorithm struct {
	Algorithm        SourceTypeConfigHttpAuthAlgorithmAlgorithm `json:"algorithm" url:"algorithm"`
	Encoding         SourceTypeConfigHttpAuthAlgorithmEncoding  `json:"encoding" url:"encoding"`
	HeaderKey        string                                     `json:"header_key" url:"header_key"`
	WebhookSecretKey string                                     `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHttpAuthAlgorithm) GetAlgorithm() SourceTypeConfigHttpAuthAlgorithmAlgorithm {
	if s == nil {
		return ""
	}
	return s.Algorithm
}

func (s *SourceTypeConfigHttpAuthAlgorithm) GetEncoding() SourceTypeConfigHttpAuthAlgorithmEncoding {
	if s == nil {
		return ""
	}
	return s.Encoding
}

func (s *SourceTypeConfigHttpAuthAlgorithm) GetHeaderKey() string {
	if s == nil {
		return ""
	}
	return s.HeaderKey
}

func (s *SourceTypeConfigHttpAuthAlgorithm) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigHttpAuthAlgorithm) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHttpAuthAlgorithm) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHttpAuthAlgorithm
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHttpAuthAlgorithm(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHttpAuthAlgorithm) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHttpAuthAlgorithmAlgorithm string

const (
	SourceTypeConfigHttpAuthAlgorithmAlgorithmSha1   SourceTypeConfigHttpAuthAlgorithmAlgorithm = "sha1"
	SourceTypeConfigHttpAuthAlgorithmAlgorithmSha256 SourceTypeConfigHttpAuthAlgorithmAlgorithm = "sha256"
	SourceTypeConfigHttpAuthAlgorithmAlgorithmSha512 SourceTypeConfigHttpAuthAlgorithmAlgorithm = "sha512"
	SourceTypeConfigHttpAuthAlgorithmAlgorithmMd5    SourceTypeConfigHttpAuthAlgorithmAlgorithm = "md5"
)

func NewSourceTypeConfigHttpAuthAlgorithmAlgorithmFromString(s string) (SourceTypeConfigHttpAuthAlgorithmAlgorithm, error) {
	switch s {
	case "sha1":
		return SourceTypeConfigHttpAuthAlgorithmAlgorithmSha1, nil
	case "sha256":
		return SourceTypeConfigHttpAuthAlgorithmAlgorithmSha256, nil
	case "sha512":
		return SourceTypeConfigHttpAuthAlgorithmAlgorithmSha512, nil
	case "md5":
		return SourceTypeConfigHttpAuthAlgorithmAlgorithmMd5, nil
	}
	var t SourceTypeConfigHttpAuthAlgorithmAlgorithm
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHttpAuthAlgorithmAlgorithm) Ptr() *SourceTypeConfigHttpAuthAlgorithmAlgorithm {
	return &s
}

type SourceTypeConfigHttpAuthAlgorithmEncoding string

const (
	SourceTypeConfigHttpAuthAlgorithmEncodingBase64    SourceTypeConfigHttpAuthAlgorithmEncoding = "base64"
	SourceTypeConfigHttpAuthAlgorithmEncodingBase64Url SourceTypeConfigHttpAuthAlgorithmEncoding = "base64url"
	SourceTypeConfigHttpAuthAlgorithmEncodingHex       SourceTypeConfigHttpAuthAlgorithmEncoding = "hex"
)

func NewSourceTypeConfigHttpAuthAlgorithmEncodingFromString(s string) (SourceTypeConfigHttpAuthAlgorithmEncoding, error) {
	switch s {
	case "base64":
		return SourceTypeConfigHttpAuthAlgorithmEncodingBase64, nil
	case "base64url":
		return SourceTypeConfigHttpAuthAlgorithmEncodingBase64Url, nil
	case "hex":
		return SourceTypeConfigHttpAuthAlgorithmEncodingHex, nil
	}
	var t SourceTypeConfigHttpAuthAlgorithmEncoding
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHttpAuthAlgorithmEncoding) Ptr() *SourceTypeConfigHttpAuthAlgorithmEncoding {
	return &s
}

type SourceTypeConfigHttpAuthApiKey struct {
	HeaderKey string `json:"header_key" url:"header_key"`
	ApiKey    string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHttpAuthApiKey) GetHeaderKey() string {
	if s == nil {
		return ""
	}
	return s.HeaderKey
}

func (s *SourceTypeConfigHttpAuthApiKey) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceTypeConfigHttpAuthApiKey) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHttpAuthApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHttpAuthApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHttpAuthApiKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHttpAuthApiKey) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHttpAuthPassword struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHttpAuthPassword) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

func (s *SourceTypeConfigHttpAuthPassword) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SourceTypeConfigHttpAuthPassword) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHttpAuthPassword) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHttpAuthPassword
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHttpAuthPassword(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHttpAuthPassword) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHttpCustomResponse struct {
	ContentType *SourceTypeConfigHttpCustomResponseContentType `json:"content_type,omitempty" url:"content_type,omitempty"`
	Body        string                                         `json:"body" url:"body"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHttpCustomResponse) GetContentType() *SourceTypeConfigHttpCustomResponseContentType {
	if s == nil {
		return nil
	}
	return s.ContentType
}

func (s *SourceTypeConfigHttpCustomResponse) GetBody() string {
	if s == nil {
		return ""
	}
	return s.Body
}

func (s *SourceTypeConfigHttpCustomResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHttpCustomResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHttpCustomResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHttpCustomResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHttpCustomResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHttpCustomResponseContentType string

const (
	SourceTypeConfigHttpCustomResponseContentTypeJson SourceTypeConfigHttpCustomResponseContentType = "json"
	SourceTypeConfigHttpCustomResponseContentTypeText SourceTypeConfigHttpCustomResponseContentType = "text"
	SourceTypeConfigHttpCustomResponseContentTypeXml  SourceTypeConfigHttpCustomResponseContentType = "xml"
)

func NewSourceTypeConfigHttpCustomResponseContentTypeFromString(s string) (SourceTypeConfigHttpCustomResponseContentType, error) {
	switch s {
	case "json":
		return SourceTypeConfigHttpCustomResponseContentTypeJson, nil
	case "text":
		return SourceTypeConfigHttpCustomResponseContentTypeText, nil
	case "xml":
		return SourceTypeConfigHttpCustomResponseContentTypeXml, nil
	}
	var t SourceTypeConfigHttpCustomResponseContentType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHttpCustomResponseContentType) Ptr() *SourceTypeConfigHttpCustomResponseContentType {
	return &s
}

type SourceTypeConfigHttpType string

const (
	SourceTypeConfigHttpTypeHmac      SourceTypeConfigHttpType = "HMAC"
	SourceTypeConfigHttpTypeBasicAuth SourceTypeConfigHttpType = "BASIC_AUTH"
	SourceTypeConfigHttpTypeApiKey    SourceTypeConfigHttpType = "API_KEY"
)

func NewSourceTypeConfigHttpTypeFromString(s string) (SourceTypeConfigHttpType, error) {
	switch s {
	case "HMAC":
		return SourceTypeConfigHttpTypeHmac, nil
	case "BASIC_AUTH":
		return SourceTypeConfigHttpTypeBasicAuth, nil
	case "API_KEY":
		return SourceTypeConfigHttpTypeApiKey, nil
	}
	var t SourceTypeConfigHttpType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHttpType) Ptr() *SourceTypeConfigHttpType {
	return &s
}

// The type config for Hubspot. Requires type to be `HUBSPOT`.
type SourceTypeConfigHubspot struct {
	AllowedHttpMethods []SourceTypeConfigHubspotAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigHubspotAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHubspot) GetAllowedHttpMethods() []SourceTypeConfigHubspotAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigHubspot) GetAuth() *SourceTypeConfigHubspotAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigHubspot) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHubspot) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHubspot
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHubspot(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHubspot) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigHubspotAllowedHttpMethodsItem string

const (
	SourceTypeConfigHubspotAllowedHttpMethodsItemGet    SourceTypeConfigHubspotAllowedHttpMethodsItem = "GET"
	SourceTypeConfigHubspotAllowedHttpMethodsItemPost   SourceTypeConfigHubspotAllowedHttpMethodsItem = "POST"
	SourceTypeConfigHubspotAllowedHttpMethodsItemPut    SourceTypeConfigHubspotAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigHubspotAllowedHttpMethodsItemPatch  SourceTypeConfigHubspotAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigHubspotAllowedHttpMethodsItemDelete SourceTypeConfigHubspotAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigHubspotAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigHubspotAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigHubspotAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigHubspotAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigHubspotAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigHubspotAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigHubspotAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigHubspotAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigHubspotAllowedHttpMethodsItem) Ptr() *SourceTypeConfigHubspotAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigHubspotAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigHubspotAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigHubspotAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigHubspotAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigHubspotAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigHubspotAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigHubspotAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Linear. Requires type to be `LINEAR`.
type SourceTypeConfigLinear struct {
	AllowedHttpMethods []SourceTypeConfigLinearAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigLinearAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigLinear) GetAllowedHttpMethods() []SourceTypeConfigLinearAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigLinear) GetAuth() *SourceTypeConfigLinearAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigLinear) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigLinear) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigLinear
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigLinear(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigLinear) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigLinearAllowedHttpMethodsItem string

const (
	SourceTypeConfigLinearAllowedHttpMethodsItemGet    SourceTypeConfigLinearAllowedHttpMethodsItem = "GET"
	SourceTypeConfigLinearAllowedHttpMethodsItemPost   SourceTypeConfigLinearAllowedHttpMethodsItem = "POST"
	SourceTypeConfigLinearAllowedHttpMethodsItemPut    SourceTypeConfigLinearAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigLinearAllowedHttpMethodsItemPatch  SourceTypeConfigLinearAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigLinearAllowedHttpMethodsItemDelete SourceTypeConfigLinearAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigLinearAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigLinearAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigLinearAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigLinearAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigLinearAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigLinearAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigLinearAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigLinearAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigLinearAllowedHttpMethodsItem) Ptr() *SourceTypeConfigLinearAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigLinearAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigLinearAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigLinearAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigLinearAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigLinearAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigLinearAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigLinearAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Mailchimp. Requires type to be `MAILCHIMP`.
type SourceTypeConfigMailchimp struct {
	AllowedHttpMethods []SourceTypeConfigMailchimpAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigMailchimpAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigMailchimp) GetAllowedHttpMethods() []SourceTypeConfigMailchimpAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigMailchimp) GetAuth() *SourceTypeConfigMailchimpAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigMailchimp) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigMailchimp) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigMailchimp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigMailchimp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigMailchimp) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigMailchimpAllowedHttpMethodsItem string

const (
	SourceTypeConfigMailchimpAllowedHttpMethodsItemGet    SourceTypeConfigMailchimpAllowedHttpMethodsItem = "GET"
	SourceTypeConfigMailchimpAllowedHttpMethodsItemPost   SourceTypeConfigMailchimpAllowedHttpMethodsItem = "POST"
	SourceTypeConfigMailchimpAllowedHttpMethodsItemPut    SourceTypeConfigMailchimpAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigMailchimpAllowedHttpMethodsItemPatch  SourceTypeConfigMailchimpAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigMailchimpAllowedHttpMethodsItemDelete SourceTypeConfigMailchimpAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigMailchimpAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigMailchimpAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigMailchimpAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigMailchimpAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigMailchimpAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigMailchimpAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigMailchimpAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigMailchimpAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigMailchimpAllowedHttpMethodsItem) Ptr() *SourceTypeConfigMailchimpAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigMailchimpAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigMailchimpAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigMailchimpAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigMailchimpAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigMailchimpAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigMailchimpAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigMailchimpAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Mailgun. Requires type to be `MAILGUN`.
type SourceTypeConfigMailgun struct {
	AllowedHttpMethods []SourceTypeConfigMailgunAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigMailgunAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigMailgun) GetAllowedHttpMethods() []SourceTypeConfigMailgunAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigMailgun) GetAuth() *SourceTypeConfigMailgunAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigMailgun) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigMailgun) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigMailgun
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigMailgun(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigMailgun) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigMailgunAllowedHttpMethodsItem string

const (
	SourceTypeConfigMailgunAllowedHttpMethodsItemGet    SourceTypeConfigMailgunAllowedHttpMethodsItem = "GET"
	SourceTypeConfigMailgunAllowedHttpMethodsItemPost   SourceTypeConfigMailgunAllowedHttpMethodsItem = "POST"
	SourceTypeConfigMailgunAllowedHttpMethodsItemPut    SourceTypeConfigMailgunAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigMailgunAllowedHttpMethodsItemPatch  SourceTypeConfigMailgunAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigMailgunAllowedHttpMethodsItemDelete SourceTypeConfigMailgunAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigMailgunAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigMailgunAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigMailgunAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigMailgunAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigMailgunAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigMailgunAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigMailgunAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigMailgunAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigMailgunAllowedHttpMethodsItem) Ptr() *SourceTypeConfigMailgunAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigMailgunAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigMailgunAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigMailgunAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigMailgunAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigMailgunAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigMailgunAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigMailgunAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for NMI Payment Gateway. Requires type to be `NMI`.
type SourceTypeConfigNmiPaymentGateway struct {
	AllowedHttpMethods []SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigNmiPaymentGatewayAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigNmiPaymentGateway) GetAllowedHttpMethods() []SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigNmiPaymentGateway) GetAuth() *SourceTypeConfigNmiPaymentGatewayAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigNmiPaymentGateway) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigNmiPaymentGateway) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigNmiPaymentGateway
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigNmiPaymentGateway(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigNmiPaymentGateway) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItem string

const (
	SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItemGet    SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItem = "GET"
	SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItemPost   SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItem = "POST"
	SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItemPut    SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItemPatch  SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItemDelete SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItem) Ptr() *SourceTypeConfigNmiPaymentGatewayAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigNmiPaymentGatewayAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigNmiPaymentGatewayAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigNmiPaymentGatewayAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigNmiPaymentGatewayAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigNmiPaymentGatewayAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigNmiPaymentGatewayAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigNmiPaymentGatewayAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Orb. Requires type to be `ORB`.
type SourceTypeConfigOrb struct {
	AllowedHttpMethods []SourceTypeConfigOrbAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigOrbAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigOrb) GetAllowedHttpMethods() []SourceTypeConfigOrbAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigOrb) GetAuth() *SourceTypeConfigOrbAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigOrb) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigOrb) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigOrb
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigOrb(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigOrb) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigOrbAllowedHttpMethodsItem string

const (
	SourceTypeConfigOrbAllowedHttpMethodsItemGet    SourceTypeConfigOrbAllowedHttpMethodsItem = "GET"
	SourceTypeConfigOrbAllowedHttpMethodsItemPost   SourceTypeConfigOrbAllowedHttpMethodsItem = "POST"
	SourceTypeConfigOrbAllowedHttpMethodsItemPut    SourceTypeConfigOrbAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigOrbAllowedHttpMethodsItemPatch  SourceTypeConfigOrbAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigOrbAllowedHttpMethodsItemDelete SourceTypeConfigOrbAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigOrbAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigOrbAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigOrbAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigOrbAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigOrbAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigOrbAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigOrbAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigOrbAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigOrbAllowedHttpMethodsItem) Ptr() *SourceTypeConfigOrbAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigOrbAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigOrbAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigOrbAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigOrbAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigOrbAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigOrbAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigOrbAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Oura. Requires type to be `OURA`.
type SourceTypeConfigOura struct {
	AllowedHttpMethods []SourceTypeConfigOuraAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigOuraAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigOura) GetAllowedHttpMethods() []SourceTypeConfigOuraAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigOura) GetAuth() *SourceTypeConfigOuraAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigOura) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigOura) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigOura
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigOura(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigOura) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigOuraAllowedHttpMethodsItem string

const (
	SourceTypeConfigOuraAllowedHttpMethodsItemGet    SourceTypeConfigOuraAllowedHttpMethodsItem = "GET"
	SourceTypeConfigOuraAllowedHttpMethodsItemPost   SourceTypeConfigOuraAllowedHttpMethodsItem = "POST"
	SourceTypeConfigOuraAllowedHttpMethodsItemPut    SourceTypeConfigOuraAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigOuraAllowedHttpMethodsItemPatch  SourceTypeConfigOuraAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigOuraAllowedHttpMethodsItemDelete SourceTypeConfigOuraAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigOuraAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigOuraAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigOuraAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigOuraAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigOuraAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigOuraAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigOuraAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigOuraAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigOuraAllowedHttpMethodsItem) Ptr() *SourceTypeConfigOuraAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigOuraAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigOuraAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigOuraAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigOuraAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigOuraAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigOuraAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigOuraAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Paddle. Requires type to be `PADDLE`.
type SourceTypeConfigPaddle struct {
	AllowedHttpMethods []SourceTypeConfigPaddleAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigPaddleAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPaddle) GetAllowedHttpMethods() []SourceTypeConfigPaddleAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigPaddle) GetAuth() *SourceTypeConfigPaddleAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPaddle) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPaddle) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPaddle
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPaddle(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPaddle) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigPaddleAllowedHttpMethodsItem string

const (
	SourceTypeConfigPaddleAllowedHttpMethodsItemGet    SourceTypeConfigPaddleAllowedHttpMethodsItem = "GET"
	SourceTypeConfigPaddleAllowedHttpMethodsItemPost   SourceTypeConfigPaddleAllowedHttpMethodsItem = "POST"
	SourceTypeConfigPaddleAllowedHttpMethodsItemPut    SourceTypeConfigPaddleAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigPaddleAllowedHttpMethodsItemPatch  SourceTypeConfigPaddleAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigPaddleAllowedHttpMethodsItemDelete SourceTypeConfigPaddleAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigPaddleAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigPaddleAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigPaddleAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigPaddleAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigPaddleAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigPaddleAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigPaddleAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigPaddleAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigPaddleAllowedHttpMethodsItem) Ptr() *SourceTypeConfigPaddleAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigPaddleAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPaddleAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigPaddleAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPaddleAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPaddleAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPaddleAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPaddleAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Paypal. Requires type to be `PAYPAL`.
type SourceTypeConfigPaypal struct {
	AllowedHttpMethods []SourceTypeConfigPaypalAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigPaypalAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPaypal) GetAllowedHttpMethods() []SourceTypeConfigPaypalAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigPaypal) GetAuth() *SourceTypeConfigPaypalAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPaypal) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPaypal) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPaypal
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPaypal(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPaypal) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigPaypalAllowedHttpMethodsItem string

const (
	SourceTypeConfigPaypalAllowedHttpMethodsItemGet    SourceTypeConfigPaypalAllowedHttpMethodsItem = "GET"
	SourceTypeConfigPaypalAllowedHttpMethodsItemPost   SourceTypeConfigPaypalAllowedHttpMethodsItem = "POST"
	SourceTypeConfigPaypalAllowedHttpMethodsItemPut    SourceTypeConfigPaypalAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigPaypalAllowedHttpMethodsItemPatch  SourceTypeConfigPaypalAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigPaypalAllowedHttpMethodsItemDelete SourceTypeConfigPaypalAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigPaypalAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigPaypalAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigPaypalAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigPaypalAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigPaypalAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigPaypalAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigPaypalAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigPaypalAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigPaypalAllowedHttpMethodsItem) Ptr() *SourceTypeConfigPaypalAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigPaypalAuth struct {
	WebhookId string `json:"webhook_id" url:"webhook_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPaypalAuth) GetWebhookId() string {
	if s == nil {
		return ""
	}
	return s.WebhookId
}

func (s *SourceTypeConfigPaypalAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPaypalAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPaypalAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPaypalAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPaypalAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Persona. Requires type to be `PERSONA`.
type SourceTypeConfigPersona struct {
	AllowedHttpMethods []SourceTypeConfigPersonaAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigPersonaAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPersona) GetAllowedHttpMethods() []SourceTypeConfigPersonaAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigPersona) GetAuth() *SourceTypeConfigPersonaAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPersona) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPersona) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPersona
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPersona(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPersona) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigPersonaAllowedHttpMethodsItem string

const (
	SourceTypeConfigPersonaAllowedHttpMethodsItemGet    SourceTypeConfigPersonaAllowedHttpMethodsItem = "GET"
	SourceTypeConfigPersonaAllowedHttpMethodsItemPost   SourceTypeConfigPersonaAllowedHttpMethodsItem = "POST"
	SourceTypeConfigPersonaAllowedHttpMethodsItemPut    SourceTypeConfigPersonaAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigPersonaAllowedHttpMethodsItemPatch  SourceTypeConfigPersonaAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigPersonaAllowedHttpMethodsItemDelete SourceTypeConfigPersonaAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigPersonaAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigPersonaAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigPersonaAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigPersonaAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigPersonaAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigPersonaAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigPersonaAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigPersonaAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigPersonaAllowedHttpMethodsItem) Ptr() *SourceTypeConfigPersonaAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigPersonaAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPersonaAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigPersonaAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPersonaAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPersonaAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPersonaAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPersonaAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Pipedrive. Requires type to be `PIPEDRIVE`.
type SourceTypeConfigPipedrive struct {
	AllowedHttpMethods []SourceTypeConfigPipedriveAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigPipedriveAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPipedrive) GetAllowedHttpMethods() []SourceTypeConfigPipedriveAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigPipedrive) GetAuth() *SourceTypeConfigPipedriveAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPipedrive) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPipedrive) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPipedrive
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPipedrive(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPipedrive) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigPipedriveAllowedHttpMethodsItem string

const (
	SourceTypeConfigPipedriveAllowedHttpMethodsItemGet    SourceTypeConfigPipedriveAllowedHttpMethodsItem = "GET"
	SourceTypeConfigPipedriveAllowedHttpMethodsItemPost   SourceTypeConfigPipedriveAllowedHttpMethodsItem = "POST"
	SourceTypeConfigPipedriveAllowedHttpMethodsItemPut    SourceTypeConfigPipedriveAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigPipedriveAllowedHttpMethodsItemPatch  SourceTypeConfigPipedriveAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigPipedriveAllowedHttpMethodsItemDelete SourceTypeConfigPipedriveAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigPipedriveAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigPipedriveAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigPipedriveAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigPipedriveAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigPipedriveAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigPipedriveAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigPipedriveAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigPipedriveAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigPipedriveAllowedHttpMethodsItem) Ptr() *SourceTypeConfigPipedriveAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigPipedriveAuth struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPipedriveAuth) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

func (s *SourceTypeConfigPipedriveAuth) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SourceTypeConfigPipedriveAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPipedriveAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPipedriveAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPipedriveAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPipedriveAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Postmark. Requires type to be `POSTMARK`.
type SourceTypeConfigPostmark struct {
	AllowedHttpMethods []SourceTypeConfigPostmarkAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigPostmarkAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPostmark) GetAllowedHttpMethods() []SourceTypeConfigPostmarkAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigPostmark) GetAuth() *SourceTypeConfigPostmarkAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPostmark) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPostmark) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPostmark
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPostmark(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPostmark) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigPostmarkAllowedHttpMethodsItem string

const (
	SourceTypeConfigPostmarkAllowedHttpMethodsItemGet    SourceTypeConfigPostmarkAllowedHttpMethodsItem = "GET"
	SourceTypeConfigPostmarkAllowedHttpMethodsItemPost   SourceTypeConfigPostmarkAllowedHttpMethodsItem = "POST"
	SourceTypeConfigPostmarkAllowedHttpMethodsItemPut    SourceTypeConfigPostmarkAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigPostmarkAllowedHttpMethodsItemPatch  SourceTypeConfigPostmarkAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigPostmarkAllowedHttpMethodsItemDelete SourceTypeConfigPostmarkAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigPostmarkAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigPostmarkAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigPostmarkAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigPostmarkAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigPostmarkAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigPostmarkAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigPostmarkAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigPostmarkAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigPostmarkAllowedHttpMethodsItem) Ptr() *SourceTypeConfigPostmarkAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigPostmarkAuth struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPostmarkAuth) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

func (s *SourceTypeConfigPostmarkAuth) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SourceTypeConfigPostmarkAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPostmarkAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPostmarkAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPostmarkAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPostmarkAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Praxis. Requires type to be `PRAXIS`.
type SourceTypeConfigPraxis struct {
	AllowedHttpMethods []SourceTypeConfigPraxisAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigPraxisAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPraxis) GetAllowedHttpMethods() []SourceTypeConfigPraxisAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigPraxis) GetAuth() *SourceTypeConfigPraxisAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPraxis) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPraxis) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPraxis
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPraxis(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPraxis) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigPraxisAllowedHttpMethodsItem string

const (
	SourceTypeConfigPraxisAllowedHttpMethodsItemGet    SourceTypeConfigPraxisAllowedHttpMethodsItem = "GET"
	SourceTypeConfigPraxisAllowedHttpMethodsItemPost   SourceTypeConfigPraxisAllowedHttpMethodsItem = "POST"
	SourceTypeConfigPraxisAllowedHttpMethodsItemPut    SourceTypeConfigPraxisAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigPraxisAllowedHttpMethodsItemPatch  SourceTypeConfigPraxisAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigPraxisAllowedHttpMethodsItemDelete SourceTypeConfigPraxisAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigPraxisAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigPraxisAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigPraxisAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigPraxisAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigPraxisAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigPraxisAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigPraxisAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigPraxisAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigPraxisAllowedHttpMethodsItem) Ptr() *SourceTypeConfigPraxisAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigPraxisAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPraxisAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigPraxisAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPraxisAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPraxisAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPraxisAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPraxisAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Property Finder. Requires type to be `PROPERTY-FINDER`.
type SourceTypeConfigPropertyFinder struct {
	AllowedHttpMethods []SourceTypeConfigPropertyFinderAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigPropertyFinderAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPropertyFinder) GetAllowedHttpMethods() []SourceTypeConfigPropertyFinderAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigPropertyFinder) GetAuth() *SourceTypeConfigPropertyFinderAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPropertyFinder) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPropertyFinder) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPropertyFinder
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPropertyFinder(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPropertyFinder) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigPropertyFinderAllowedHttpMethodsItem string

const (
	SourceTypeConfigPropertyFinderAllowedHttpMethodsItemGet    SourceTypeConfigPropertyFinderAllowedHttpMethodsItem = "GET"
	SourceTypeConfigPropertyFinderAllowedHttpMethodsItemPost   SourceTypeConfigPropertyFinderAllowedHttpMethodsItem = "POST"
	SourceTypeConfigPropertyFinderAllowedHttpMethodsItemPut    SourceTypeConfigPropertyFinderAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigPropertyFinderAllowedHttpMethodsItemPatch  SourceTypeConfigPropertyFinderAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigPropertyFinderAllowedHttpMethodsItemDelete SourceTypeConfigPropertyFinderAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigPropertyFinderAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigPropertyFinderAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigPropertyFinderAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigPropertyFinderAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigPropertyFinderAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigPropertyFinderAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigPropertyFinderAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigPropertyFinderAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigPropertyFinderAllowedHttpMethodsItem) Ptr() *SourceTypeConfigPropertyFinderAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigPropertyFinderAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPropertyFinderAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigPropertyFinderAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPropertyFinderAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPropertyFinderAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPropertyFinderAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPropertyFinderAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Pylon. Requires type to be `PYLON`.
type SourceTypeConfigPylon struct {
	AllowedHttpMethods []SourceTypeConfigPylonAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigPylonAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPylon) GetAllowedHttpMethods() []SourceTypeConfigPylonAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigPylon) GetAuth() *SourceTypeConfigPylonAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigPylon) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPylon) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPylon
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPylon(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPylon) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigPylonAllowedHttpMethodsItem string

const (
	SourceTypeConfigPylonAllowedHttpMethodsItemGet    SourceTypeConfigPylonAllowedHttpMethodsItem = "GET"
	SourceTypeConfigPylonAllowedHttpMethodsItemPost   SourceTypeConfigPylonAllowedHttpMethodsItem = "POST"
	SourceTypeConfigPylonAllowedHttpMethodsItemPut    SourceTypeConfigPylonAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigPylonAllowedHttpMethodsItemPatch  SourceTypeConfigPylonAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigPylonAllowedHttpMethodsItemDelete SourceTypeConfigPylonAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigPylonAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigPylonAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigPylonAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigPylonAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigPylonAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigPylonAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigPylonAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigPylonAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigPylonAllowedHttpMethodsItem) Ptr() *SourceTypeConfigPylonAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigPylonAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigPylonAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigPylonAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigPylonAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigPylonAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigPylonAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigPylonAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Razorpay. Requires type to be `RAZORPAY`.
type SourceTypeConfigRazorpay struct {
	AllowedHttpMethods []SourceTypeConfigRazorpayAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigRazorpayAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigRazorpay) GetAllowedHttpMethods() []SourceTypeConfigRazorpayAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigRazorpay) GetAuth() *SourceTypeConfigRazorpayAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigRazorpay) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigRazorpay) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigRazorpay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigRazorpay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigRazorpay) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigRazorpayAllowedHttpMethodsItem string

const (
	SourceTypeConfigRazorpayAllowedHttpMethodsItemGet    SourceTypeConfigRazorpayAllowedHttpMethodsItem = "GET"
	SourceTypeConfigRazorpayAllowedHttpMethodsItemPost   SourceTypeConfigRazorpayAllowedHttpMethodsItem = "POST"
	SourceTypeConfigRazorpayAllowedHttpMethodsItemPut    SourceTypeConfigRazorpayAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigRazorpayAllowedHttpMethodsItemPatch  SourceTypeConfigRazorpayAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigRazorpayAllowedHttpMethodsItemDelete SourceTypeConfigRazorpayAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigRazorpayAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigRazorpayAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigRazorpayAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigRazorpayAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigRazorpayAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigRazorpayAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigRazorpayAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigRazorpayAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigRazorpayAllowedHttpMethodsItem) Ptr() *SourceTypeConfigRazorpayAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigRazorpayAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigRazorpayAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigRazorpayAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigRazorpayAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigRazorpayAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigRazorpayAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigRazorpayAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Sanity. Requires type to be `SANITY`.
type SourceTypeConfigSanity struct {
	AllowedHttpMethods []SourceTypeConfigSanityAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigSanityAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSanity) GetAllowedHttpMethods() []SourceTypeConfigSanityAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigSanity) GetAuth() *SourceTypeConfigSanityAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSanity) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSanity) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSanity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSanity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSanity) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigSanityAllowedHttpMethodsItem string

const (
	SourceTypeConfigSanityAllowedHttpMethodsItemGet    SourceTypeConfigSanityAllowedHttpMethodsItem = "GET"
	SourceTypeConfigSanityAllowedHttpMethodsItemPost   SourceTypeConfigSanityAllowedHttpMethodsItem = "POST"
	SourceTypeConfigSanityAllowedHttpMethodsItemPut    SourceTypeConfigSanityAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigSanityAllowedHttpMethodsItemPatch  SourceTypeConfigSanityAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigSanityAllowedHttpMethodsItemDelete SourceTypeConfigSanityAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigSanityAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigSanityAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigSanityAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigSanityAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigSanityAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigSanityAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigSanityAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigSanityAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigSanityAllowedHttpMethodsItem) Ptr() *SourceTypeConfigSanityAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigSanityAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSanityAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigSanityAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSanityAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSanityAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSanityAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSanityAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Sendgrid. Requires type to be `SENDGRID`.
type SourceTypeConfigSendgrid struct {
	AllowedHttpMethods []SourceTypeConfigSendgridAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigSendgridAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSendgrid) GetAllowedHttpMethods() []SourceTypeConfigSendgridAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigSendgrid) GetAuth() *SourceTypeConfigSendgridAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSendgrid) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSendgrid) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSendgrid
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSendgrid(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSendgrid) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigSendgridAllowedHttpMethodsItem string

const (
	SourceTypeConfigSendgridAllowedHttpMethodsItemGet    SourceTypeConfigSendgridAllowedHttpMethodsItem = "GET"
	SourceTypeConfigSendgridAllowedHttpMethodsItemPost   SourceTypeConfigSendgridAllowedHttpMethodsItem = "POST"
	SourceTypeConfigSendgridAllowedHttpMethodsItemPut    SourceTypeConfigSendgridAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigSendgridAllowedHttpMethodsItemPatch  SourceTypeConfigSendgridAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigSendgridAllowedHttpMethodsItemDelete SourceTypeConfigSendgridAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigSendgridAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigSendgridAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigSendgridAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigSendgridAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigSendgridAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigSendgridAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigSendgridAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigSendgridAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigSendgridAllowedHttpMethodsItem) Ptr() *SourceTypeConfigSendgridAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigSendgridAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSendgridAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigSendgridAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSendgridAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSendgridAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSendgridAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSendgridAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Shopify. Requires type to be `SHOPIFY`.
type SourceTypeConfigShopify struct {
	AllowedHttpMethods []SourceTypeConfigShopifyAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigShopifyAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigShopify) GetAllowedHttpMethods() []SourceTypeConfigShopifyAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigShopify) GetAuth() *SourceTypeConfigShopifyAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigShopify) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigShopify) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigShopify
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigShopify(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigShopify) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigShopifyAllowedHttpMethodsItem string

const (
	SourceTypeConfigShopifyAllowedHttpMethodsItemGet    SourceTypeConfigShopifyAllowedHttpMethodsItem = "GET"
	SourceTypeConfigShopifyAllowedHttpMethodsItemPost   SourceTypeConfigShopifyAllowedHttpMethodsItem = "POST"
	SourceTypeConfigShopifyAllowedHttpMethodsItemPut    SourceTypeConfigShopifyAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigShopifyAllowedHttpMethodsItemPatch  SourceTypeConfigShopifyAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigShopifyAllowedHttpMethodsItemDelete SourceTypeConfigShopifyAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigShopifyAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigShopifyAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigShopifyAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigShopifyAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigShopifyAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigShopifyAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigShopifyAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigShopifyAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigShopifyAllowedHttpMethodsItem) Ptr() *SourceTypeConfigShopifyAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigShopifyAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigShopifyAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigShopifyAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigShopifyAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigShopifyAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigShopifyAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigShopifyAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Shopline. Requires type to be `SHOPLINE`.
type SourceTypeConfigShopline struct {
	AllowedHttpMethods []SourceTypeConfigShoplineAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigShoplineAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigShopline) GetAllowedHttpMethods() []SourceTypeConfigShoplineAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigShopline) GetAuth() *SourceTypeConfigShoplineAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigShopline) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigShopline) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigShopline
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigShopline(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigShopline) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigShoplineAllowedHttpMethodsItem string

const (
	SourceTypeConfigShoplineAllowedHttpMethodsItemGet    SourceTypeConfigShoplineAllowedHttpMethodsItem = "GET"
	SourceTypeConfigShoplineAllowedHttpMethodsItemPost   SourceTypeConfigShoplineAllowedHttpMethodsItem = "POST"
	SourceTypeConfigShoplineAllowedHttpMethodsItemPut    SourceTypeConfigShoplineAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigShoplineAllowedHttpMethodsItemPatch  SourceTypeConfigShoplineAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigShoplineAllowedHttpMethodsItemDelete SourceTypeConfigShoplineAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigShoplineAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigShoplineAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigShoplineAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigShoplineAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigShoplineAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigShoplineAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigShoplineAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigShoplineAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigShoplineAllowedHttpMethodsItem) Ptr() *SourceTypeConfigShoplineAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigShoplineAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigShoplineAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigShoplineAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigShoplineAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigShoplineAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigShoplineAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigShoplineAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Slack. Requires type to be `SLACK`.
type SourceTypeConfigSlack struct {
	AllowedHttpMethods []SourceTypeConfigSlackAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigSlackAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSlack) GetAllowedHttpMethods() []SourceTypeConfigSlackAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigSlack) GetAuth() *SourceTypeConfigSlackAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSlack) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSlack) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSlack
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSlack(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSlack) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigSlackAllowedHttpMethodsItem string

const (
	SourceTypeConfigSlackAllowedHttpMethodsItemGet    SourceTypeConfigSlackAllowedHttpMethodsItem = "GET"
	SourceTypeConfigSlackAllowedHttpMethodsItemPost   SourceTypeConfigSlackAllowedHttpMethodsItem = "POST"
	SourceTypeConfigSlackAllowedHttpMethodsItemPut    SourceTypeConfigSlackAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigSlackAllowedHttpMethodsItemPatch  SourceTypeConfigSlackAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigSlackAllowedHttpMethodsItemDelete SourceTypeConfigSlackAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigSlackAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigSlackAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigSlackAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigSlackAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigSlackAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigSlackAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigSlackAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigSlackAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigSlackAllowedHttpMethodsItem) Ptr() *SourceTypeConfigSlackAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigSlackAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSlackAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigSlackAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSlackAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSlackAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSlackAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSlackAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Solidgate. Requires type to be `SOLIDGATE`.
type SourceTypeConfigSolidgate struct {
	AllowedHttpMethods []SourceTypeConfigSolidgateAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigSolidgateAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSolidgate) GetAllowedHttpMethods() []SourceTypeConfigSolidgateAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigSolidgate) GetAuth() *SourceTypeConfigSolidgateAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSolidgate) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSolidgate) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSolidgate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSolidgate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSolidgate) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigSolidgateAllowedHttpMethodsItem string

const (
	SourceTypeConfigSolidgateAllowedHttpMethodsItemGet    SourceTypeConfigSolidgateAllowedHttpMethodsItem = "GET"
	SourceTypeConfigSolidgateAllowedHttpMethodsItemPost   SourceTypeConfigSolidgateAllowedHttpMethodsItem = "POST"
	SourceTypeConfigSolidgateAllowedHttpMethodsItemPut    SourceTypeConfigSolidgateAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigSolidgateAllowedHttpMethodsItemPatch  SourceTypeConfigSolidgateAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigSolidgateAllowedHttpMethodsItemDelete SourceTypeConfigSolidgateAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigSolidgateAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigSolidgateAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigSolidgateAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigSolidgateAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigSolidgateAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigSolidgateAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigSolidgateAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigSolidgateAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigSolidgateAllowedHttpMethodsItem) Ptr() *SourceTypeConfigSolidgateAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigSolidgateAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSolidgateAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigSolidgateAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSolidgateAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSolidgateAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSolidgateAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSolidgateAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Square. Requires type to be `SQUARE`.
type SourceTypeConfigSquare struct {
	AllowedHttpMethods []SourceTypeConfigSquareAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigSquareAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSquare) GetAllowedHttpMethods() []SourceTypeConfigSquareAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigSquare) GetAuth() *SourceTypeConfigSquareAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSquare) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSquare) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSquare
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSquare(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSquare) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigSquareAllowedHttpMethodsItem string

const (
	SourceTypeConfigSquareAllowedHttpMethodsItemGet    SourceTypeConfigSquareAllowedHttpMethodsItem = "GET"
	SourceTypeConfigSquareAllowedHttpMethodsItemPost   SourceTypeConfigSquareAllowedHttpMethodsItem = "POST"
	SourceTypeConfigSquareAllowedHttpMethodsItemPut    SourceTypeConfigSquareAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigSquareAllowedHttpMethodsItemPatch  SourceTypeConfigSquareAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigSquareAllowedHttpMethodsItemDelete SourceTypeConfigSquareAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigSquareAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigSquareAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigSquareAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigSquareAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigSquareAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigSquareAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigSquareAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigSquareAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigSquareAllowedHttpMethodsItem) Ptr() *SourceTypeConfigSquareAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigSquareAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSquareAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigSquareAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSquareAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSquareAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSquareAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSquareAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Stripe. Requires type to be `STRIPE`.
type SourceTypeConfigStripe struct {
	AllowedHttpMethods []SourceTypeConfigStripeAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigStripeAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigStripe) GetAllowedHttpMethods() []SourceTypeConfigStripeAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigStripe) GetAuth() *SourceTypeConfigStripeAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigStripe) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigStripe) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigStripe
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigStripe(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigStripe) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigStripeAllowedHttpMethodsItem string

const (
	SourceTypeConfigStripeAllowedHttpMethodsItemGet    SourceTypeConfigStripeAllowedHttpMethodsItem = "GET"
	SourceTypeConfigStripeAllowedHttpMethodsItemPost   SourceTypeConfigStripeAllowedHttpMethodsItem = "POST"
	SourceTypeConfigStripeAllowedHttpMethodsItemPut    SourceTypeConfigStripeAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigStripeAllowedHttpMethodsItemPatch  SourceTypeConfigStripeAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigStripeAllowedHttpMethodsItemDelete SourceTypeConfigStripeAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigStripeAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigStripeAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigStripeAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigStripeAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigStripeAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigStripeAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigStripeAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigStripeAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigStripeAllowedHttpMethodsItem) Ptr() *SourceTypeConfigStripeAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigStripeAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigStripeAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigStripeAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigStripeAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigStripeAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigStripeAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigStripeAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Svix. Requires type to be `SVIX`.
type SourceTypeConfigSvix struct {
	AllowedHttpMethods []SourceTypeConfigSvixAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigSvixAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSvix) GetAllowedHttpMethods() []SourceTypeConfigSvixAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigSvix) GetAuth() *SourceTypeConfigSvixAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSvix) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSvix) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSvix
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSvix(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSvix) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigSvixAllowedHttpMethodsItem string

const (
	SourceTypeConfigSvixAllowedHttpMethodsItemGet    SourceTypeConfigSvixAllowedHttpMethodsItem = "GET"
	SourceTypeConfigSvixAllowedHttpMethodsItemPost   SourceTypeConfigSvixAllowedHttpMethodsItem = "POST"
	SourceTypeConfigSvixAllowedHttpMethodsItemPut    SourceTypeConfigSvixAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigSvixAllowedHttpMethodsItemPatch  SourceTypeConfigSvixAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigSvixAllowedHttpMethodsItemDelete SourceTypeConfigSvixAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigSvixAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigSvixAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigSvixAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigSvixAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigSvixAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigSvixAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigSvixAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigSvixAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigSvixAllowedHttpMethodsItem) Ptr() *SourceTypeConfigSvixAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigSvixAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSvixAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigSvixAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSvixAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSvixAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSvixAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSvixAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Synctera. Requires type to be `SYNCTERA`.
type SourceTypeConfigSynctera struct {
	AllowedHttpMethods []SourceTypeConfigSyncteraAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigSyncteraAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSynctera) GetAllowedHttpMethods() []SourceTypeConfigSyncteraAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigSynctera) GetAuth() *SourceTypeConfigSyncteraAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigSynctera) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSynctera) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSynctera
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSynctera(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSynctera) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigSyncteraAllowedHttpMethodsItem string

const (
	SourceTypeConfigSyncteraAllowedHttpMethodsItemGet    SourceTypeConfigSyncteraAllowedHttpMethodsItem = "GET"
	SourceTypeConfigSyncteraAllowedHttpMethodsItemPost   SourceTypeConfigSyncteraAllowedHttpMethodsItem = "POST"
	SourceTypeConfigSyncteraAllowedHttpMethodsItemPut    SourceTypeConfigSyncteraAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigSyncteraAllowedHttpMethodsItemPatch  SourceTypeConfigSyncteraAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigSyncteraAllowedHttpMethodsItemDelete SourceTypeConfigSyncteraAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigSyncteraAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigSyncteraAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigSyncteraAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigSyncteraAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigSyncteraAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigSyncteraAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigSyncteraAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigSyncteraAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigSyncteraAllowedHttpMethodsItem) Ptr() *SourceTypeConfigSyncteraAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigSyncteraAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigSyncteraAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigSyncteraAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigSyncteraAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigSyncteraAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigSyncteraAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigSyncteraAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Telnyx. Requires type to be `TELNYX`.
type SourceTypeConfigTelnyx struct {
	AllowedHttpMethods []SourceTypeConfigTelnyxAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigTelnyxAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTelnyx) GetAllowedHttpMethods() []SourceTypeConfigTelnyxAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigTelnyx) GetAuth() *SourceTypeConfigTelnyxAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTelnyx) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTelnyx) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTelnyx
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTelnyx(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTelnyx) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigTelnyxAllowedHttpMethodsItem string

const (
	SourceTypeConfigTelnyxAllowedHttpMethodsItemGet    SourceTypeConfigTelnyxAllowedHttpMethodsItem = "GET"
	SourceTypeConfigTelnyxAllowedHttpMethodsItemPost   SourceTypeConfigTelnyxAllowedHttpMethodsItem = "POST"
	SourceTypeConfigTelnyxAllowedHttpMethodsItemPut    SourceTypeConfigTelnyxAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigTelnyxAllowedHttpMethodsItemPatch  SourceTypeConfigTelnyxAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigTelnyxAllowedHttpMethodsItemDelete SourceTypeConfigTelnyxAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigTelnyxAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigTelnyxAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigTelnyxAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigTelnyxAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigTelnyxAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigTelnyxAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigTelnyxAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigTelnyxAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigTelnyxAllowedHttpMethodsItem) Ptr() *SourceTypeConfigTelnyxAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigTelnyxAuth struct {
	PublicKey string `json:"public_key" url:"public_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTelnyxAuth) GetPublicKey() string {
	if s == nil {
		return ""
	}
	return s.PublicKey
}

func (s *SourceTypeConfigTelnyxAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTelnyxAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTelnyxAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTelnyxAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTelnyxAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for TokenIO. Requires type to be `TOKENIO`.
type SourceTypeConfigTokenIo struct {
	AllowedHttpMethods []SourceTypeConfigTokenIoAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigTokenIoAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTokenIo) GetAllowedHttpMethods() []SourceTypeConfigTokenIoAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigTokenIo) GetAuth() *SourceTypeConfigTokenIoAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTokenIo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTokenIo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTokenIo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTokenIo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTokenIo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigTokenIoAllowedHttpMethodsItem string

const (
	SourceTypeConfigTokenIoAllowedHttpMethodsItemGet    SourceTypeConfigTokenIoAllowedHttpMethodsItem = "GET"
	SourceTypeConfigTokenIoAllowedHttpMethodsItemPost   SourceTypeConfigTokenIoAllowedHttpMethodsItem = "POST"
	SourceTypeConfigTokenIoAllowedHttpMethodsItemPut    SourceTypeConfigTokenIoAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigTokenIoAllowedHttpMethodsItemPatch  SourceTypeConfigTokenIoAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigTokenIoAllowedHttpMethodsItemDelete SourceTypeConfigTokenIoAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigTokenIoAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigTokenIoAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigTokenIoAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigTokenIoAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigTokenIoAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigTokenIoAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigTokenIoAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigTokenIoAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigTokenIoAllowedHttpMethodsItem) Ptr() *SourceTypeConfigTokenIoAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigTokenIoAuth struct {
	PublicKey string `json:"public_key" url:"public_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTokenIoAuth) GetPublicKey() string {
	if s == nil {
		return ""
	}
	return s.PublicKey
}

func (s *SourceTypeConfigTokenIoAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTokenIoAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTokenIoAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTokenIoAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTokenIoAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Treezor. Requires type to be `TREEZOR`.
type SourceTypeConfigTreezor struct {
	AllowedHttpMethods []SourceTypeConfigTreezorAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigTreezorAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTreezor) GetAllowedHttpMethods() []SourceTypeConfigTreezorAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigTreezor) GetAuth() *SourceTypeConfigTreezorAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTreezor) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTreezor) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTreezor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTreezor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTreezor) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigTreezorAllowedHttpMethodsItem string

const (
	SourceTypeConfigTreezorAllowedHttpMethodsItemGet    SourceTypeConfigTreezorAllowedHttpMethodsItem = "GET"
	SourceTypeConfigTreezorAllowedHttpMethodsItemPost   SourceTypeConfigTreezorAllowedHttpMethodsItem = "POST"
	SourceTypeConfigTreezorAllowedHttpMethodsItemPut    SourceTypeConfigTreezorAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigTreezorAllowedHttpMethodsItemPatch  SourceTypeConfigTreezorAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigTreezorAllowedHttpMethodsItemDelete SourceTypeConfigTreezorAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigTreezorAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigTreezorAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigTreezorAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigTreezorAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigTreezorAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigTreezorAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigTreezorAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigTreezorAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigTreezorAllowedHttpMethodsItem) Ptr() *SourceTypeConfigTreezorAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigTreezorAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTreezorAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigTreezorAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTreezorAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTreezorAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTreezorAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTreezorAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Trello. Requires type to be `TRELLO`.
type SourceTypeConfigTrello struct {
	AllowedHttpMethods []SourceTypeConfigTrelloAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigTrelloAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTrello) GetAllowedHttpMethods() []SourceTypeConfigTrelloAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigTrello) GetAuth() *SourceTypeConfigTrelloAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTrello) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTrello) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTrello
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTrello(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTrello) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigTrelloAllowedHttpMethodsItem string

const (
	SourceTypeConfigTrelloAllowedHttpMethodsItemGet    SourceTypeConfigTrelloAllowedHttpMethodsItem = "GET"
	SourceTypeConfigTrelloAllowedHttpMethodsItemPost   SourceTypeConfigTrelloAllowedHttpMethodsItem = "POST"
	SourceTypeConfigTrelloAllowedHttpMethodsItemPut    SourceTypeConfigTrelloAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigTrelloAllowedHttpMethodsItemPatch  SourceTypeConfigTrelloAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigTrelloAllowedHttpMethodsItemDelete SourceTypeConfigTrelloAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigTrelloAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigTrelloAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigTrelloAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigTrelloAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigTrelloAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigTrelloAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigTrelloAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigTrelloAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigTrelloAllowedHttpMethodsItem) Ptr() *SourceTypeConfigTrelloAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigTrelloAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTrelloAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigTrelloAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTrelloAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTrelloAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTrelloAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTrelloAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Twilio. Requires type to be `TWILIO`.
type SourceTypeConfigTwilio struct {
	AllowedHttpMethods []SourceTypeConfigTwilioAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigTwilioAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTwilio) GetAllowedHttpMethods() []SourceTypeConfigTwilioAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigTwilio) GetAuth() *SourceTypeConfigTwilioAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTwilio) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTwilio) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTwilio
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTwilio(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTwilio) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigTwilioAllowedHttpMethodsItem string

const (
	SourceTypeConfigTwilioAllowedHttpMethodsItemGet    SourceTypeConfigTwilioAllowedHttpMethodsItem = "GET"
	SourceTypeConfigTwilioAllowedHttpMethodsItemPost   SourceTypeConfigTwilioAllowedHttpMethodsItem = "POST"
	SourceTypeConfigTwilioAllowedHttpMethodsItemPut    SourceTypeConfigTwilioAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigTwilioAllowedHttpMethodsItemPatch  SourceTypeConfigTwilioAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigTwilioAllowedHttpMethodsItemDelete SourceTypeConfigTwilioAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigTwilioAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigTwilioAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigTwilioAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigTwilioAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigTwilioAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigTwilioAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigTwilioAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigTwilioAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigTwilioAllowedHttpMethodsItem) Ptr() *SourceTypeConfigTwilioAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigTwilioAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTwilioAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigTwilioAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTwilioAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTwilioAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTwilioAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTwilioAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Twitch. Requires type to be `TWITCH`.
type SourceTypeConfigTwitch struct {
	AllowedHttpMethods []SourceTypeConfigTwitchAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigTwitchAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTwitch) GetAllowedHttpMethods() []SourceTypeConfigTwitchAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigTwitch) GetAuth() *SourceTypeConfigTwitchAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTwitch) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTwitch) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTwitch
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTwitch(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTwitch) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigTwitchAllowedHttpMethodsItem string

const (
	SourceTypeConfigTwitchAllowedHttpMethodsItemGet    SourceTypeConfigTwitchAllowedHttpMethodsItem = "GET"
	SourceTypeConfigTwitchAllowedHttpMethodsItemPost   SourceTypeConfigTwitchAllowedHttpMethodsItem = "POST"
	SourceTypeConfigTwitchAllowedHttpMethodsItemPut    SourceTypeConfigTwitchAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigTwitchAllowedHttpMethodsItemPatch  SourceTypeConfigTwitchAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigTwitchAllowedHttpMethodsItemDelete SourceTypeConfigTwitchAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigTwitchAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigTwitchAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigTwitchAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigTwitchAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigTwitchAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigTwitchAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigTwitchAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigTwitchAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigTwitchAllowedHttpMethodsItem) Ptr() *SourceTypeConfigTwitchAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigTwitchAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTwitchAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigTwitchAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTwitchAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTwitchAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTwitchAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTwitchAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Twitter. Requires type to be `TWITTER`.
type SourceTypeConfigTwitter struct {
	AllowedHttpMethods []SourceTypeConfigTwitterAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigTwitterAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTwitter) GetAllowedHttpMethods() []SourceTypeConfigTwitterAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigTwitter) GetAuth() *SourceTypeConfigTwitterAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTwitter) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTwitter) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTwitter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTwitter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTwitter) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigTwitterAllowedHttpMethodsItem string

const (
	SourceTypeConfigTwitterAllowedHttpMethodsItemGet    SourceTypeConfigTwitterAllowedHttpMethodsItem = "GET"
	SourceTypeConfigTwitterAllowedHttpMethodsItemPost   SourceTypeConfigTwitterAllowedHttpMethodsItem = "POST"
	SourceTypeConfigTwitterAllowedHttpMethodsItemPut    SourceTypeConfigTwitterAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigTwitterAllowedHttpMethodsItemPatch  SourceTypeConfigTwitterAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigTwitterAllowedHttpMethodsItemDelete SourceTypeConfigTwitterAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigTwitterAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigTwitterAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigTwitterAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigTwitterAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigTwitterAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigTwitterAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigTwitterAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigTwitterAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigTwitterAllowedHttpMethodsItem) Ptr() *SourceTypeConfigTwitterAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigTwitterAuth struct {
	ApiKey string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTwitterAuth) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceTypeConfigTwitterAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTwitterAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTwitterAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTwitterAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTwitterAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Typeform. Requires type to be `TYPEFORM`.
type SourceTypeConfigTypeform struct {
	AllowedHttpMethods []SourceTypeConfigTypeformAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigTypeformAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTypeform) GetAllowedHttpMethods() []SourceTypeConfigTypeformAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigTypeform) GetAuth() *SourceTypeConfigTypeformAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigTypeform) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTypeform) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTypeform
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTypeform(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTypeform) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigTypeformAllowedHttpMethodsItem string

const (
	SourceTypeConfigTypeformAllowedHttpMethodsItemGet    SourceTypeConfigTypeformAllowedHttpMethodsItem = "GET"
	SourceTypeConfigTypeformAllowedHttpMethodsItemPost   SourceTypeConfigTypeformAllowedHttpMethodsItem = "POST"
	SourceTypeConfigTypeformAllowedHttpMethodsItemPut    SourceTypeConfigTypeformAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigTypeformAllowedHttpMethodsItemPatch  SourceTypeConfigTypeformAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigTypeformAllowedHttpMethodsItemDelete SourceTypeConfigTypeformAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigTypeformAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigTypeformAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigTypeformAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigTypeformAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigTypeformAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigTypeformAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigTypeformAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigTypeformAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigTypeformAllowedHttpMethodsItem) Ptr() *SourceTypeConfigTypeformAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigTypeformAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigTypeformAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigTypeformAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigTypeformAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigTypeformAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigTypeformAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigTypeformAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Upollo. Requires type to be `UPOLLO`.
type SourceTypeConfigUpollo struct {
	AllowedHttpMethods []SourceTypeConfigUpolloAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigUpolloAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigUpollo) GetAllowedHttpMethods() []SourceTypeConfigUpolloAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigUpollo) GetAuth() *SourceTypeConfigUpolloAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigUpollo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigUpollo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigUpollo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigUpollo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigUpollo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigUpolloAllowedHttpMethodsItem string

const (
	SourceTypeConfigUpolloAllowedHttpMethodsItemGet    SourceTypeConfigUpolloAllowedHttpMethodsItem = "GET"
	SourceTypeConfigUpolloAllowedHttpMethodsItemPost   SourceTypeConfigUpolloAllowedHttpMethodsItem = "POST"
	SourceTypeConfigUpolloAllowedHttpMethodsItemPut    SourceTypeConfigUpolloAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigUpolloAllowedHttpMethodsItemPatch  SourceTypeConfigUpolloAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigUpolloAllowedHttpMethodsItemDelete SourceTypeConfigUpolloAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigUpolloAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigUpolloAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigUpolloAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigUpolloAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigUpolloAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigUpolloAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigUpolloAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigUpolloAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigUpolloAllowedHttpMethodsItem) Ptr() *SourceTypeConfigUpolloAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigUpolloAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigUpolloAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigUpolloAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigUpolloAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigUpolloAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigUpolloAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigUpolloAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Vercel Log Drains. Requires type to be `VERCEL_LOG_DRAINS`.
type SourceTypeConfigVercelLogDrains struct {
	VercelLogDrainsSecret *string                                                 `json:"vercel_log_drains_secret,omitempty" url:"vercel_log_drains_secret,omitempty"`
	AllowedHttpMethods    []SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth                  *SourceTypeConfigVercelLogDrainsAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigVercelLogDrains) GetVercelLogDrainsSecret() *string {
	if s == nil {
		return nil
	}
	return s.VercelLogDrainsSecret
}

func (s *SourceTypeConfigVercelLogDrains) GetAllowedHttpMethods() []SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigVercelLogDrains) GetAuth() *SourceTypeConfigVercelLogDrainsAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigVercelLogDrains) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigVercelLogDrains) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigVercelLogDrains
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigVercelLogDrains(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigVercelLogDrains) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItem string

const (
	SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItemGet    SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItem = "GET"
	SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItemPost   SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItem = "POST"
	SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItemPut    SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItemPatch  SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItemDelete SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigVercelLogDrainsAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItem) Ptr() *SourceTypeConfigVercelLogDrainsAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigVercelLogDrainsAuth struct {
	WebhookSecretKey *string `json:"webhook_secret_key,omitempty" url:"webhook_secret_key,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigVercelLogDrainsAuth) GetWebhookSecretKey() *string {
	if s == nil {
		return nil
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigVercelLogDrainsAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigVercelLogDrainsAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigVercelLogDrainsAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigVercelLogDrainsAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigVercelLogDrainsAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Vercel Webhooks. Requires type to be `VERCEL`.
type SourceTypeConfigVercelWebhooks struct {
	AllowedHttpMethods []SourceTypeConfigVercelWebhooksAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigVercelWebhooksAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigVercelWebhooks) GetAllowedHttpMethods() []SourceTypeConfigVercelWebhooksAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigVercelWebhooks) GetAuth() *SourceTypeConfigVercelWebhooksAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigVercelWebhooks) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigVercelWebhooks) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigVercelWebhooks
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigVercelWebhooks(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigVercelWebhooks) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigVercelWebhooksAllowedHttpMethodsItem string

const (
	SourceTypeConfigVercelWebhooksAllowedHttpMethodsItemGet    SourceTypeConfigVercelWebhooksAllowedHttpMethodsItem = "GET"
	SourceTypeConfigVercelWebhooksAllowedHttpMethodsItemPost   SourceTypeConfigVercelWebhooksAllowedHttpMethodsItem = "POST"
	SourceTypeConfigVercelWebhooksAllowedHttpMethodsItemPut    SourceTypeConfigVercelWebhooksAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigVercelWebhooksAllowedHttpMethodsItemPatch  SourceTypeConfigVercelWebhooksAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigVercelWebhooksAllowedHttpMethodsItemDelete SourceTypeConfigVercelWebhooksAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigVercelWebhooksAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigVercelWebhooksAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigVercelWebhooksAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigVercelWebhooksAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigVercelWebhooksAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigVercelWebhooksAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigVercelWebhooksAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigVercelWebhooksAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigVercelWebhooksAllowedHttpMethodsItem) Ptr() *SourceTypeConfigVercelWebhooksAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigVercelWebhooksAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigVercelWebhooksAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigVercelWebhooksAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigVercelWebhooksAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigVercelWebhooksAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigVercelWebhooksAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigVercelWebhooksAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Webhook. Requires type to be `WEBHOOK`.
type SourceTypeConfigWebhook struct {
	AllowedHttpMethods []SourceTypeConfigWebhookAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	CustomResponse     *SourceTypeConfigWebhookCustomResponse          `json:"custom_response,omitempty" url:"custom_response,omitempty"`
	Type               *SourceTypeConfigWebhookType                    `json:"type,omitempty" url:"type,omitempty"`
	Auth               *SourceTypeConfigWebhookAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWebhook) GetAllowedHttpMethods() []SourceTypeConfigWebhookAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigWebhook) GetCustomResponse() *SourceTypeConfigWebhookCustomResponse {
	if s == nil {
		return nil
	}
	return s.CustomResponse
}

func (s *SourceTypeConfigWebhook) GetType() *SourceTypeConfigWebhookType {
	if s == nil {
		return nil
	}
	return s.Type
}

func (s *SourceTypeConfigWebhook) GetAuth() *SourceTypeConfigWebhookAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigWebhook) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWebhook) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigWebhookAllowedHttpMethodsItem string

const (
	SourceTypeConfigWebhookAllowedHttpMethodsItemGet    SourceTypeConfigWebhookAllowedHttpMethodsItem = "GET"
	SourceTypeConfigWebhookAllowedHttpMethodsItemPost   SourceTypeConfigWebhookAllowedHttpMethodsItem = "POST"
	SourceTypeConfigWebhookAllowedHttpMethodsItemPut    SourceTypeConfigWebhookAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigWebhookAllowedHttpMethodsItemPatch  SourceTypeConfigWebhookAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigWebhookAllowedHttpMethodsItemDelete SourceTypeConfigWebhookAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigWebhookAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigWebhookAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigWebhookAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigWebhookAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigWebhookAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigWebhookAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigWebhookAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigWebhookAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigWebhookAllowedHttpMethodsItem) Ptr() *SourceTypeConfigWebhookAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigWebhookAuth struct {
	SourceTypeConfigWebhookAuthAlgorithm *SourceTypeConfigWebhookAuthAlgorithm
	SourceTypeConfigWebhookAuthPassword  *SourceTypeConfigWebhookAuthPassword
	SourceTypeConfigWebhookAuthApiKey    *SourceTypeConfigWebhookAuthApiKey

	typ string
}

func NewSourceTypeConfigWebhookAuthFromSourceTypeConfigWebhookAuthAlgorithm(value *SourceTypeConfigWebhookAuthAlgorithm) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceTypeConfigWebhookAuthAlgorithm", SourceTypeConfigWebhookAuthAlgorithm: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceTypeConfigWebhookAuthPassword(value *SourceTypeConfigWebhookAuthPassword) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceTypeConfigWebhookAuthPassword", SourceTypeConfigWebhookAuthPassword: value}
}

func NewSourceTypeConfigWebhookAuthFromSourceTypeConfigWebhookAuthApiKey(value *SourceTypeConfigWebhookAuthApiKey) *SourceTypeConfigWebhookAuth {
	return &SourceTypeConfigWebhookAuth{typ: "SourceTypeConfigWebhookAuthApiKey", SourceTypeConfigWebhookAuthApiKey: value}
}

func (s *SourceTypeConfigWebhookAuth) GetSourceTypeConfigWebhookAuthAlgorithm() *SourceTypeConfigWebhookAuthAlgorithm {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWebhookAuthAlgorithm
}

func (s *SourceTypeConfigWebhookAuth) GetSourceTypeConfigWebhookAuthPassword() *SourceTypeConfigWebhookAuthPassword {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWebhookAuthPassword
}

func (s *SourceTypeConfigWebhookAuth) GetSourceTypeConfigWebhookAuthApiKey() *SourceTypeConfigWebhookAuthApiKey {
	if s == nil {
		return nil
	}
	return s.SourceTypeConfigWebhookAuthApiKey
}

func (s *SourceTypeConfigWebhookAuth) UnmarshalJSON(data []byte) error {
	valueSourceTypeConfigWebhookAuthAlgorithm := new(SourceTypeConfigWebhookAuthAlgorithm)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWebhookAuthAlgorithm); err == nil {
		s.typ = "SourceTypeConfigWebhookAuthAlgorithm"
		s.SourceTypeConfigWebhookAuthAlgorithm = valueSourceTypeConfigWebhookAuthAlgorithm
		return nil
	}
	valueSourceTypeConfigWebhookAuthPassword := new(SourceTypeConfigWebhookAuthPassword)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWebhookAuthPassword); err == nil {
		s.typ = "SourceTypeConfigWebhookAuthPassword"
		s.SourceTypeConfigWebhookAuthPassword = valueSourceTypeConfigWebhookAuthPassword
		return nil
	}
	valueSourceTypeConfigWebhookAuthApiKey := new(SourceTypeConfigWebhookAuthApiKey)
	if err := json.Unmarshal(data, &valueSourceTypeConfigWebhookAuthApiKey); err == nil {
		s.typ = "SourceTypeConfigWebhookAuthApiKey"
		s.SourceTypeConfigWebhookAuthApiKey = valueSourceTypeConfigWebhookAuthApiKey
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SourceTypeConfigWebhookAuth) MarshalJSON() ([]byte, error) {
	if s.typ == "SourceTypeConfigWebhookAuthAlgorithm" || s.SourceTypeConfigWebhookAuthAlgorithm != nil {
		return json.Marshal(s.SourceTypeConfigWebhookAuthAlgorithm)
	}
	if s.typ == "SourceTypeConfigWebhookAuthPassword" || s.SourceTypeConfigWebhookAuthPassword != nil {
		return json.Marshal(s.SourceTypeConfigWebhookAuthPassword)
	}
	if s.typ == "SourceTypeConfigWebhookAuthApiKey" || s.SourceTypeConfigWebhookAuthApiKey != nil {
		return json.Marshal(s.SourceTypeConfigWebhookAuthApiKey)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SourceTypeConfigWebhookAuthVisitor interface {
	VisitSourceTypeConfigWebhookAuthAlgorithm(*SourceTypeConfigWebhookAuthAlgorithm) error
	VisitSourceTypeConfigWebhookAuthPassword(*SourceTypeConfigWebhookAuthPassword) error
	VisitSourceTypeConfigWebhookAuthApiKey(*SourceTypeConfigWebhookAuthApiKey) error
}

func (s *SourceTypeConfigWebhookAuth) Accept(visitor SourceTypeConfigWebhookAuthVisitor) error {
	if s.typ == "SourceTypeConfigWebhookAuthAlgorithm" || s.SourceTypeConfigWebhookAuthAlgorithm != nil {
		return visitor.VisitSourceTypeConfigWebhookAuthAlgorithm(s.SourceTypeConfigWebhookAuthAlgorithm)
	}
	if s.typ == "SourceTypeConfigWebhookAuthPassword" || s.SourceTypeConfigWebhookAuthPassword != nil {
		return visitor.VisitSourceTypeConfigWebhookAuthPassword(s.SourceTypeConfigWebhookAuthPassword)
	}
	if s.typ == "SourceTypeConfigWebhookAuthApiKey" || s.SourceTypeConfigWebhookAuthApiKey != nil {
		return visitor.VisitSourceTypeConfigWebhookAuthApiKey(s.SourceTypeConfigWebhookAuthApiKey)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SourceTypeConfigWebhookAuthAlgorithm struct {
	Algorithm        SourceTypeConfigWebhookAuthAlgorithmAlgorithm `json:"algorithm" url:"algorithm"`
	Encoding         SourceTypeConfigWebhookAuthAlgorithmEncoding  `json:"encoding" url:"encoding"`
	HeaderKey        string                                        `json:"header_key" url:"header_key"`
	WebhookSecretKey string                                        `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWebhookAuthAlgorithm) GetAlgorithm() SourceTypeConfigWebhookAuthAlgorithmAlgorithm {
	if s == nil {
		return ""
	}
	return s.Algorithm
}

func (s *SourceTypeConfigWebhookAuthAlgorithm) GetEncoding() SourceTypeConfigWebhookAuthAlgorithmEncoding {
	if s == nil {
		return ""
	}
	return s.Encoding
}

func (s *SourceTypeConfigWebhookAuthAlgorithm) GetHeaderKey() string {
	if s == nil {
		return ""
	}
	return s.HeaderKey
}

func (s *SourceTypeConfigWebhookAuthAlgorithm) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigWebhookAuthAlgorithm) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWebhookAuthAlgorithm) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWebhookAuthAlgorithm
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWebhookAuthAlgorithm(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWebhookAuthAlgorithm) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigWebhookAuthAlgorithmAlgorithm string

const (
	SourceTypeConfigWebhookAuthAlgorithmAlgorithmSha1   SourceTypeConfigWebhookAuthAlgorithmAlgorithm = "sha1"
	SourceTypeConfigWebhookAuthAlgorithmAlgorithmSha256 SourceTypeConfigWebhookAuthAlgorithmAlgorithm = "sha256"
	SourceTypeConfigWebhookAuthAlgorithmAlgorithmSha512 SourceTypeConfigWebhookAuthAlgorithmAlgorithm = "sha512"
	SourceTypeConfigWebhookAuthAlgorithmAlgorithmMd5    SourceTypeConfigWebhookAuthAlgorithmAlgorithm = "md5"
)

func NewSourceTypeConfigWebhookAuthAlgorithmAlgorithmFromString(s string) (SourceTypeConfigWebhookAuthAlgorithmAlgorithm, error) {
	switch s {
	case "sha1":
		return SourceTypeConfigWebhookAuthAlgorithmAlgorithmSha1, nil
	case "sha256":
		return SourceTypeConfigWebhookAuthAlgorithmAlgorithmSha256, nil
	case "sha512":
		return SourceTypeConfigWebhookAuthAlgorithmAlgorithmSha512, nil
	case "md5":
		return SourceTypeConfigWebhookAuthAlgorithmAlgorithmMd5, nil
	}
	var t SourceTypeConfigWebhookAuthAlgorithmAlgorithm
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigWebhookAuthAlgorithmAlgorithm) Ptr() *SourceTypeConfigWebhookAuthAlgorithmAlgorithm {
	return &s
}

type SourceTypeConfigWebhookAuthAlgorithmEncoding string

const (
	SourceTypeConfigWebhookAuthAlgorithmEncodingBase64    SourceTypeConfigWebhookAuthAlgorithmEncoding = "base64"
	SourceTypeConfigWebhookAuthAlgorithmEncodingBase64Url SourceTypeConfigWebhookAuthAlgorithmEncoding = "base64url"
	SourceTypeConfigWebhookAuthAlgorithmEncodingHex       SourceTypeConfigWebhookAuthAlgorithmEncoding = "hex"
)

func NewSourceTypeConfigWebhookAuthAlgorithmEncodingFromString(s string) (SourceTypeConfigWebhookAuthAlgorithmEncoding, error) {
	switch s {
	case "base64":
		return SourceTypeConfigWebhookAuthAlgorithmEncodingBase64, nil
	case "base64url":
		return SourceTypeConfigWebhookAuthAlgorithmEncodingBase64Url, nil
	case "hex":
		return SourceTypeConfigWebhookAuthAlgorithmEncodingHex, nil
	}
	var t SourceTypeConfigWebhookAuthAlgorithmEncoding
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigWebhookAuthAlgorithmEncoding) Ptr() *SourceTypeConfigWebhookAuthAlgorithmEncoding {
	return &s
}

type SourceTypeConfigWebhookAuthApiKey struct {
	HeaderKey string `json:"header_key" url:"header_key"`
	ApiKey    string `json:"api_key" url:"api_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWebhookAuthApiKey) GetHeaderKey() string {
	if s == nil {
		return ""
	}
	return s.HeaderKey
}

func (s *SourceTypeConfigWebhookAuthApiKey) GetApiKey() string {
	if s == nil {
		return ""
	}
	return s.ApiKey
}

func (s *SourceTypeConfigWebhookAuthApiKey) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWebhookAuthApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWebhookAuthApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWebhookAuthApiKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWebhookAuthApiKey) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigWebhookAuthPassword struct {
	Username *string `json:"username,omitempty" url:"username,omitempty"`
	Password *string `json:"password,omitempty" url:"password,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWebhookAuthPassword) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

func (s *SourceTypeConfigWebhookAuthPassword) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SourceTypeConfigWebhookAuthPassword) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWebhookAuthPassword) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWebhookAuthPassword
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWebhookAuthPassword(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWebhookAuthPassword) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigWebhookCustomResponse struct {
	ContentType *SourceTypeConfigWebhookCustomResponseContentType `json:"content_type,omitempty" url:"content_type,omitempty"`
	Body        string                                            `json:"body" url:"body"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWebhookCustomResponse) GetContentType() *SourceTypeConfigWebhookCustomResponseContentType {
	if s == nil {
		return nil
	}
	return s.ContentType
}

func (s *SourceTypeConfigWebhookCustomResponse) GetBody() string {
	if s == nil {
		return ""
	}
	return s.Body
}

func (s *SourceTypeConfigWebhookCustomResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWebhookCustomResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWebhookCustomResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWebhookCustomResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWebhookCustomResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigWebhookCustomResponseContentType string

const (
	SourceTypeConfigWebhookCustomResponseContentTypeJson SourceTypeConfigWebhookCustomResponseContentType = "json"
	SourceTypeConfigWebhookCustomResponseContentTypeText SourceTypeConfigWebhookCustomResponseContentType = "text"
	SourceTypeConfigWebhookCustomResponseContentTypeXml  SourceTypeConfigWebhookCustomResponseContentType = "xml"
)

func NewSourceTypeConfigWebhookCustomResponseContentTypeFromString(s string) (SourceTypeConfigWebhookCustomResponseContentType, error) {
	switch s {
	case "json":
		return SourceTypeConfigWebhookCustomResponseContentTypeJson, nil
	case "text":
		return SourceTypeConfigWebhookCustomResponseContentTypeText, nil
	case "xml":
		return SourceTypeConfigWebhookCustomResponseContentTypeXml, nil
	}
	var t SourceTypeConfigWebhookCustomResponseContentType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigWebhookCustomResponseContentType) Ptr() *SourceTypeConfigWebhookCustomResponseContentType {
	return &s
}

type SourceTypeConfigWebhookType string

const (
	SourceTypeConfigWebhookTypeHmac      SourceTypeConfigWebhookType = "HMAC"
	SourceTypeConfigWebhookTypeBasicAuth SourceTypeConfigWebhookType = "BASIC_AUTH"
	SourceTypeConfigWebhookTypeApiKey    SourceTypeConfigWebhookType = "API_KEY"
)

func NewSourceTypeConfigWebhookTypeFromString(s string) (SourceTypeConfigWebhookType, error) {
	switch s {
	case "HMAC":
		return SourceTypeConfigWebhookTypeHmac, nil
	case "BASIC_AUTH":
		return SourceTypeConfigWebhookTypeBasicAuth, nil
	case "API_KEY":
		return SourceTypeConfigWebhookTypeApiKey, nil
	}
	var t SourceTypeConfigWebhookType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigWebhookType) Ptr() *SourceTypeConfigWebhookType {
	return &s
}

// The type config for WhatsApp. Requires type to be `WHATSAPP`.
type SourceTypeConfigWhatsApp struct {
	AllowedHttpMethods []SourceTypeConfigWhatsAppAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigWhatsAppAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWhatsApp) GetAllowedHttpMethods() []SourceTypeConfigWhatsAppAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigWhatsApp) GetAuth() *SourceTypeConfigWhatsAppAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigWhatsApp) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWhatsApp) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWhatsApp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWhatsApp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWhatsApp) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigWhatsAppAllowedHttpMethodsItem string

const (
	SourceTypeConfigWhatsAppAllowedHttpMethodsItemGet    SourceTypeConfigWhatsAppAllowedHttpMethodsItem = "GET"
	SourceTypeConfigWhatsAppAllowedHttpMethodsItemPost   SourceTypeConfigWhatsAppAllowedHttpMethodsItem = "POST"
	SourceTypeConfigWhatsAppAllowedHttpMethodsItemPut    SourceTypeConfigWhatsAppAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigWhatsAppAllowedHttpMethodsItemPatch  SourceTypeConfigWhatsAppAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigWhatsAppAllowedHttpMethodsItemDelete SourceTypeConfigWhatsAppAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigWhatsAppAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigWhatsAppAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigWhatsAppAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigWhatsAppAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigWhatsAppAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigWhatsAppAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigWhatsAppAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigWhatsAppAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigWhatsAppAllowedHttpMethodsItem) Ptr() *SourceTypeConfigWhatsAppAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigWhatsAppAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWhatsAppAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigWhatsAppAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWhatsAppAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWhatsAppAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWhatsAppAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWhatsAppAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Wix. Requires type to be `WIX`.
type SourceTypeConfigWix struct {
	AllowedHttpMethods []SourceTypeConfigWixAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigWixAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWix) GetAllowedHttpMethods() []SourceTypeConfigWixAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigWix) GetAuth() *SourceTypeConfigWixAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigWix) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWix) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWix
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWix(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWix) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigWixAllowedHttpMethodsItem string

const (
	SourceTypeConfigWixAllowedHttpMethodsItemGet    SourceTypeConfigWixAllowedHttpMethodsItem = "GET"
	SourceTypeConfigWixAllowedHttpMethodsItemPost   SourceTypeConfigWixAllowedHttpMethodsItem = "POST"
	SourceTypeConfigWixAllowedHttpMethodsItemPut    SourceTypeConfigWixAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigWixAllowedHttpMethodsItemPatch  SourceTypeConfigWixAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigWixAllowedHttpMethodsItemDelete SourceTypeConfigWixAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigWixAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigWixAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigWixAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigWixAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigWixAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigWixAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigWixAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigWixAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigWixAllowedHttpMethodsItem) Ptr() *SourceTypeConfigWixAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigWixAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWixAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigWixAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWixAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWixAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWixAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWixAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for WooCommerce. Requires type to be `WOOCOMMERCE`.
type SourceTypeConfigWooCommerce struct {
	AllowedHttpMethods []SourceTypeConfigWooCommerceAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigWooCommerceAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWooCommerce) GetAllowedHttpMethods() []SourceTypeConfigWooCommerceAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigWooCommerce) GetAuth() *SourceTypeConfigWooCommerceAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigWooCommerce) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWooCommerce) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWooCommerce
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWooCommerce(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWooCommerce) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigWooCommerceAllowedHttpMethodsItem string

const (
	SourceTypeConfigWooCommerceAllowedHttpMethodsItemGet    SourceTypeConfigWooCommerceAllowedHttpMethodsItem = "GET"
	SourceTypeConfigWooCommerceAllowedHttpMethodsItemPost   SourceTypeConfigWooCommerceAllowedHttpMethodsItem = "POST"
	SourceTypeConfigWooCommerceAllowedHttpMethodsItemPut    SourceTypeConfigWooCommerceAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigWooCommerceAllowedHttpMethodsItemPatch  SourceTypeConfigWooCommerceAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigWooCommerceAllowedHttpMethodsItemDelete SourceTypeConfigWooCommerceAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigWooCommerceAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigWooCommerceAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigWooCommerceAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigWooCommerceAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigWooCommerceAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigWooCommerceAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigWooCommerceAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigWooCommerceAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigWooCommerceAllowedHttpMethodsItem) Ptr() *SourceTypeConfigWooCommerceAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigWooCommerceAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWooCommerceAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigWooCommerceAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWooCommerceAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWooCommerceAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWooCommerceAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWooCommerceAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for WorkOS. Requires type to be `WORKOS`.
type SourceTypeConfigWorkOs struct {
	AllowedHttpMethods []SourceTypeConfigWorkOsAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigWorkOsAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWorkOs) GetAllowedHttpMethods() []SourceTypeConfigWorkOsAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigWorkOs) GetAuth() *SourceTypeConfigWorkOsAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigWorkOs) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWorkOs) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWorkOs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWorkOs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWorkOs) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigWorkOsAllowedHttpMethodsItem string

const (
	SourceTypeConfigWorkOsAllowedHttpMethodsItemGet    SourceTypeConfigWorkOsAllowedHttpMethodsItem = "GET"
	SourceTypeConfigWorkOsAllowedHttpMethodsItemPost   SourceTypeConfigWorkOsAllowedHttpMethodsItem = "POST"
	SourceTypeConfigWorkOsAllowedHttpMethodsItemPut    SourceTypeConfigWorkOsAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigWorkOsAllowedHttpMethodsItemPatch  SourceTypeConfigWorkOsAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigWorkOsAllowedHttpMethodsItemDelete SourceTypeConfigWorkOsAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigWorkOsAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigWorkOsAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigWorkOsAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigWorkOsAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigWorkOsAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigWorkOsAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigWorkOsAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigWorkOsAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigWorkOsAllowedHttpMethodsItem) Ptr() *SourceTypeConfigWorkOsAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigWorkOsAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigWorkOsAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigWorkOsAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigWorkOsAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigWorkOsAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigWorkOsAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigWorkOsAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Xero. Requires type to be `XERO`.
type SourceTypeConfigXero struct {
	AllowedHttpMethods []SourceTypeConfigXeroAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigXeroAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigXero) GetAllowedHttpMethods() []SourceTypeConfigXeroAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigXero) GetAuth() *SourceTypeConfigXeroAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigXero) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigXero) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigXero
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigXero(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigXero) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigXeroAllowedHttpMethodsItem string

const (
	SourceTypeConfigXeroAllowedHttpMethodsItemGet    SourceTypeConfigXeroAllowedHttpMethodsItem = "GET"
	SourceTypeConfigXeroAllowedHttpMethodsItemPost   SourceTypeConfigXeroAllowedHttpMethodsItem = "POST"
	SourceTypeConfigXeroAllowedHttpMethodsItemPut    SourceTypeConfigXeroAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigXeroAllowedHttpMethodsItemPatch  SourceTypeConfigXeroAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigXeroAllowedHttpMethodsItemDelete SourceTypeConfigXeroAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigXeroAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigXeroAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigXeroAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigXeroAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigXeroAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigXeroAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigXeroAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigXeroAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigXeroAllowedHttpMethodsItem) Ptr() *SourceTypeConfigXeroAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigXeroAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigXeroAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigXeroAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigXeroAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigXeroAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigXeroAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigXeroAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The type config for Zoom. Requires type to be `ZOOM`.
type SourceTypeConfigZoom struct {
	AllowedHttpMethods []SourceTypeConfigZoomAllowedHttpMethodsItem `json:"allowed_http_methods,omitempty" url:"allowed_http_methods,omitempty"`
	Auth               *SourceTypeConfigZoomAuth                    `json:"auth,omitempty" url:"auth,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigZoom) GetAllowedHttpMethods() []SourceTypeConfigZoomAllowedHttpMethodsItem {
	if s == nil {
		return nil
	}
	return s.AllowedHttpMethods
}

func (s *SourceTypeConfigZoom) GetAuth() *SourceTypeConfigZoomAuth {
	if s == nil {
		return nil
	}
	return s.Auth
}

func (s *SourceTypeConfigZoom) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigZoom) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigZoom
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigZoom(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigZoom) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceTypeConfigZoomAllowedHttpMethodsItem string

const (
	SourceTypeConfigZoomAllowedHttpMethodsItemGet    SourceTypeConfigZoomAllowedHttpMethodsItem = "GET"
	SourceTypeConfigZoomAllowedHttpMethodsItemPost   SourceTypeConfigZoomAllowedHttpMethodsItem = "POST"
	SourceTypeConfigZoomAllowedHttpMethodsItemPut    SourceTypeConfigZoomAllowedHttpMethodsItem = "PUT"
	SourceTypeConfigZoomAllowedHttpMethodsItemPatch  SourceTypeConfigZoomAllowedHttpMethodsItem = "PATCH"
	SourceTypeConfigZoomAllowedHttpMethodsItemDelete SourceTypeConfigZoomAllowedHttpMethodsItem = "DELETE"
)

func NewSourceTypeConfigZoomAllowedHttpMethodsItemFromString(s string) (SourceTypeConfigZoomAllowedHttpMethodsItem, error) {
	switch s {
	case "GET":
		return SourceTypeConfigZoomAllowedHttpMethodsItemGet, nil
	case "POST":
		return SourceTypeConfigZoomAllowedHttpMethodsItemPost, nil
	case "PUT":
		return SourceTypeConfigZoomAllowedHttpMethodsItemPut, nil
	case "PATCH":
		return SourceTypeConfigZoomAllowedHttpMethodsItemPatch, nil
	case "DELETE":
		return SourceTypeConfigZoomAllowedHttpMethodsItemDelete, nil
	}
	var t SourceTypeConfigZoomAllowedHttpMethodsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceTypeConfigZoomAllowedHttpMethodsItem) Ptr() *SourceTypeConfigZoomAllowedHttpMethodsItem {
	return &s
}

type SourceTypeConfigZoomAuth struct {
	WebhookSecretKey string `json:"webhook_secret_key" url:"webhook_secret_key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceTypeConfigZoomAuth) GetWebhookSecretKey() string {
	if s == nil {
		return ""
	}
	return s.WebhookSecretKey
}

func (s *SourceTypeConfigZoomAuth) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceTypeConfigZoomAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceTypeConfigZoomAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceTypeConfigZoomAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceTypeConfigZoomAuth) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type TransformationExecution struct {
	Id                     string `json:"id" url:"id"`
	TransformedEventDataId string `json:"transformed_event_data_id" url:"transformed_event_data_id"`
	OriginalEventDataId    string `json:"original_event_data_id" url:"original_event_data_id"`
	TransformationId       string `json:"transformation_id" url:"transformation_id"`
	// ID of the project
	TeamId               string                          `json:"team_id" url:"team_id"`
	WebhookId            string                          `json:"webhook_id" url:"webhook_id"`
	LogLevel             TransformationExecutionLogLevel `json:"log_level" url:"log_level"`
	Logs                 []*ConsoleLine                  `json:"logs,omitempty" url:"logs,omitempty"`
	UpdatedAt            time.Time                       `json:"updated_at" url:"updated_at"`
	CreatedAt            time.Time                       `json:"created_at" url:"created_at"`
	OriginalEventData    *ShortEventData                 `json:"original_event_data,omitempty" url:"original_event_data,omitempty"`
	TransformedEventData *ShortEventData                 `json:"transformed_event_data,omitempty" url:"transformed_event_data,omitempty"`
	IssueId              *string                         `json:"issue_id,omitempty" url:"issue_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransformationExecution) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *TransformationExecution) GetTransformedEventDataId() string {
	if t == nil {
		return ""
	}
	return t.TransformedEventDataId
}

func (t *TransformationExecution) GetOriginalEventDataId() string {
	if t == nil {
		return ""
	}
	return t.OriginalEventDataId
}

func (t *TransformationExecution) GetTransformationId() string {
	if t == nil {
		return ""
	}
	return t.TransformationId
}

func (t *TransformationExecution) GetTeamId() string {
	if t == nil {
		return ""
	}
	return t.TeamId
}

func (t *TransformationExecution) GetWebhookId() string {
	if t == nil {
		return ""
	}
	return t.WebhookId
}

func (t *TransformationExecution) GetLogLevel() TransformationExecutionLogLevel {
	if t == nil {
		return ""
	}
	return t.LogLevel
}

func (t *TransformationExecution) GetLogs() []*ConsoleLine {
	if t == nil {
		return nil
	}
	return t.Logs
}

func (t *TransformationExecution) GetUpdatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.UpdatedAt
}

func (t *TransformationExecution) GetCreatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.CreatedAt
}

func (t *TransformationExecution) GetOriginalEventData() *ShortEventData {
	if t == nil {
		return nil
	}
	return t.OriginalEventData
}

func (t *TransformationExecution) GetTransformedEventData() *ShortEventData {
	if t == nil {
		return nil
	}
	return t.TransformedEventData
}

func (t *TransformationExecution) GetIssueId() *string {
	if t == nil {
		return nil
	}
	return t.IssueId
}

func (t *TransformationExecution) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransformationExecution) UnmarshalJSON(data []byte) error {
	type embed TransformationExecution
	var unmarshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TransformationExecution(unmarshaler.embed)
	t.UpdatedAt = unmarshaler.UpdatedAt.Time()
	t.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransformationExecution) MarshalJSON() ([]byte, error) {
	type embed TransformationExecution
	var marshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed:     embed(*t),
		UpdatedAt: internal.NewDateTime(t.UpdatedAt),
		CreatedAt: internal.NewDateTime(t.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TransformationExecution) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The minimum log level to open the issue on
type TransformationExecutionLogLevel string

const (
	TransformationExecutionLogLevelDebug TransformationExecutionLogLevel = "debug"
	TransformationExecutionLogLevelInfo  TransformationExecutionLogLevel = "info"
	TransformationExecutionLogLevelWarn  TransformationExecutionLogLevel = "warn"
	TransformationExecutionLogLevelError TransformationExecutionLogLevel = "error"
	TransformationExecutionLogLevelFatal TransformationExecutionLogLevel = "fatal"
)

func NewTransformationExecutionLogLevelFromString(s string) (TransformationExecutionLogLevel, error) {
	switch s {
	case "debug":
		return TransformationExecutionLogLevelDebug, nil
	case "info":
		return TransformationExecutionLogLevelInfo, nil
	case "warn":
		return TransformationExecutionLogLevelWarn, nil
	case "error":
		return TransformationExecutionLogLevelError, nil
	case "fatal":
		return TransformationExecutionLogLevelFatal, nil
	}
	var t TransformationExecutionLogLevel
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TransformationExecutionLogLevel) Ptr() *TransformationExecutionLogLevel {
	return &t
}

// The type config for 3d Eye. Requires type to be `THREE_D_EYE`.
type Type3DEyeConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Type3DEyeConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Type3DEyeConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler Type3DEyeConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Type3DEyeConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Type3DEyeConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Adyen. Requires type to be `ADYEN`.
type TypeAdyenConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeAdyenConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeAdyenConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeAdyenConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeAdyenConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeAdyenConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Airwallex. Requires type to be `AIRWALLEX`.
type TypeAirwallexConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeAirwallexConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeAirwallexConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeAirwallexConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeAirwallexConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeAirwallexConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Akeneo. Requires type to be `AKENEO`.
type TypeAkeneoConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeAkeneoConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeAkeneoConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeAkeneoConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeAkeneoConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeAkeneoConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for API Key. Requires type to be `API_KEY`.
type TypeApiKeyConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeApiKeyConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeApiKeyConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeApiKeyConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeApiKeyConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeApiKeyConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for AWS SNS. Requires type to be `AWS_SNS`.
type TypeAwssnsConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeAwssnsConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeAwssnsConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeAwssnsConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeAwssnsConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeAwssnsConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Basic Auth. Requires type to be `BASIC_AUTH`.
type TypeBasicAuthConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeBasicAuthConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeBasicAuthConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeBasicAuthConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeBasicAuthConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeBasicAuthConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Bondsmith. Requires type to be `BONDSMITH`.
type TypeBondsmithConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeBondsmithConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeBondsmithConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeBondsmithConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeBondsmithConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeBondsmithConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Bridge. Requires type to be `BRIDGE`.
type TypeBridgeConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeBridgeConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeBridgeConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeBridgeConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeBridgeConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeBridgeConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Cloud Signal. Requires type to be `CLOUDSIGNAL`.
type TypeCloudSignalConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeCloudSignalConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeCloudSignalConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeCloudSignalConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeCloudSignalConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeCloudSignalConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Commerce Layer. Requires type to be `COMMERCELAYER`.
type TypeCommerceLayerConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeCommerceLayerConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeCommerceLayerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeCommerceLayerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeCommerceLayerConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeCommerceLayerConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Courier. Requires type to be `COURIER`.
type TypeCourierConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeCourierConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeCourierConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeCourierConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeCourierConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeCourierConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Customer.IO. Requires type to be `CUSTOMERIO`.
type TypeCustomerIoConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeCustomerIoConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeCustomerIoConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeCustomerIoConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeCustomerIoConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeCustomerIoConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Discord. Requires type to be `DISCORD`.
type TypeDiscordConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeDiscordConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeDiscordConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeDiscordConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeDiscordConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeDiscordConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Ebay. Requires type to be `EBAY`.
type TypeEbayConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeEbayConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeEbayConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeEbayConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeEbayConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeEbayConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Enode. Requires type to be `ENODE`.
type TypeEnodeConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeEnodeConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeEnodeConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeEnodeConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeEnodeConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeEnodeConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Facebook. Requires type to be `FACEBOOK`.
type TypeFacebookConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeFacebookConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeFacebookConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeFacebookConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeFacebookConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeFacebookConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Favro. Requires type to be `FAVRO`.
type TypeFavroConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeFavroConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeFavroConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeFavroConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeFavroConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeFavroConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Fiserv. Requires type to be `FISERV`.
type TypeFiservConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeFiservConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeFiservConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeFiservConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeFiservConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeFiservConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for FrontApp. Requires type to be `FRONTAPP`.
type TypeFrontAppConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeFrontAppConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeFrontAppConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeFrontAppConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeFrontAppConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeFrontAppConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for GitHub. Requires type to be `GITHUB`.
type TypeGitHubConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeGitHubConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeGitHubConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeGitHubConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeGitHubConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeGitHubConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for GitLab. Requires type to be `GITLAB`.
type TypeGitLabConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeGitLabConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeGitLabConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeGitLabConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeGitLabConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeGitLabConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for HMAC. Requires type to be `HMAC`.
type TypeHmacConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeHmacConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeHmacConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeHmacConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeHmacConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeHmacConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for HTTP. Requires type to be `HTTP`.
type TypeHttpConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeHttpConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeHttpConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeHttpConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeHttpConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeHttpConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Hubspot. Requires type to be `HUBSPOT`.
type TypeHubspotConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeHubspotConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeHubspotConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeHubspotConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeHubspotConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeHubspotConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Linear. Requires type to be `LINEAR`.
type TypeLinearConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeLinearConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeLinearConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeLinearConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeLinearConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeLinearConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Mailchimp. Requires type to be `MAILCHIMP`.
type TypeMailchimpConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeMailchimpConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeMailchimpConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeMailchimpConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeMailchimpConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeMailchimpConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Mailgun. Requires type to be `MAILGUN`.
type TypeMailgunConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeMailgunConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeMailgunConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeMailgunConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeMailgunConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeMailgunConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for NMI Payment Gateway. Requires type to be `NMI`.
type TypeNmiPaymentGatewayConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeNmiPaymentGatewayConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeNmiPaymentGatewayConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeNmiPaymentGatewayConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeNmiPaymentGatewayConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeNmiPaymentGatewayConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Orb. Requires type to be `ORB`.
type TypeOrbConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeOrbConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeOrbConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeOrbConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeOrbConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeOrbConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Oura. Requires type to be `OURA`.
type TypeOuraConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeOuraConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeOuraConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeOuraConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeOuraConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeOuraConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Paddle. Requires type to be `PADDLE`.
type TypePaddleConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypePaddleConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypePaddleConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypePaddleConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypePaddleConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypePaddleConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Paypal. Requires type to be `PAYPAL`.
type TypePaypalConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypePaypalConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypePaypalConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypePaypalConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypePaypalConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypePaypalConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Persona. Requires type to be `PERSONA`.
type TypePersonaConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypePersonaConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypePersonaConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypePersonaConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypePersonaConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypePersonaConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Pipedrive. Requires type to be `PIPEDRIVE`.
type TypePipedriveConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypePipedriveConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypePipedriveConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypePipedriveConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypePipedriveConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypePipedriveConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Postmark. Requires type to be `POSTMARK`.
type TypePostmarkConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypePostmarkConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypePostmarkConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypePostmarkConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypePostmarkConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypePostmarkConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Praxis. Requires type to be `PRAXIS`.
type TypePraxisConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypePraxisConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypePraxisConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypePraxisConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypePraxisConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypePraxisConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Property Finder. Requires type to be `PROPERTY-FINDER`.
type TypePropertyFinderConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypePropertyFinderConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypePropertyFinderConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypePropertyFinderConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypePropertyFinderConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypePropertyFinderConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Pylon. Requires type to be `PYLON`.
type TypePylonConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypePylonConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypePylonConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypePylonConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypePylonConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypePylonConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Razorpay. Requires type to be `RAZORPAY`.
type TypeRazorpayConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeRazorpayConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeRazorpayConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeRazorpayConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeRazorpayConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeRazorpayConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Recharge. Requires type to be `RECHARGE`.
type TypeRechargeConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeRechargeConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeRechargeConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeRechargeConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeRechargeConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeRechargeConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Repay. Requires type to be `REPAY`.
type TypeRepayConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeRepayConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeRepayConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeRepayConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeRepayConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeRepayConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Replicate. Requires type to be `REPLICATE`.
type TypeReplicateConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeReplicateConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeReplicateConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeReplicateConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeReplicateConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeReplicateConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Sanity. Requires type to be `SANITY`.
type TypeSanityConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeSanityConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeSanityConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeSanityConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeSanityConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeSanityConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Sendgrid. Requires type to be `SENDGRID`.
type TypeSendgridConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeSendgridConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeSendgridConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeSendgridConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeSendgridConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeSendgridConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Shopify. Requires type to be `SHOPIFY`.
type TypeShopifyConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeShopifyConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeShopifyConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeShopifyConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeShopifyConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeShopifyConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Shopline. Requires type to be `SHOPLINE`.
type TypeShoplineConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeShoplineConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeShoplineConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeShoplineConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeShoplineConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeShoplineConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Slack. Requires type to be `SLACK`.
type TypeSlackConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeSlackConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeSlackConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeSlackConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeSlackConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeSlackConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Solidgate. Requires type to be `SOLIDGATE`.
type TypeSolidgateConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeSolidgateConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeSolidgateConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeSolidgateConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeSolidgateConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeSolidgateConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Square. Requires type to be `SQUARE`.
type TypeSquareConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeSquareConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeSquareConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeSquareConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeSquareConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeSquareConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Stripe. Requires type to be `STRIPE`.
type TypeStripeConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeStripeConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeStripeConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeStripeConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeStripeConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeStripeConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Svix. Requires type to be `SVIX`.
type TypeSvixConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeSvixConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeSvixConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeSvixConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeSvixConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeSvixConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Synctera. Requires type to be `SYNCTERA`.
type TypeSyncteraConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeSyncteraConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeSyncteraConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeSyncteraConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeSyncteraConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeSyncteraConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Tebex. Requires type to be `TEBEX`.
type TypeTebexConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeTebexConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeTebexConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeTebexConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeTebexConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeTebexConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Telnyx. Requires type to be `TELNYX`.
type TypeTelnyxConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeTelnyxConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeTelnyxConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeTelnyxConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeTelnyxConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeTelnyxConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for TikTok. Requires type to be `TIKTOK`.
type TypeTikTokConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeTikTokConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeTikTokConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeTikTokConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeTikTokConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeTikTokConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for TokenIO. Requires type to be `TOKENIO`.
type TypeTokenIoConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeTokenIoConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeTokenIoConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeTokenIoConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeTokenIoConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeTokenIoConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Treezor. Requires type to be `TREEZOR`.
type TypeTreezorConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeTreezorConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeTreezorConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeTreezorConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeTreezorConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeTreezorConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Trello. Requires type to be `TRELLO`.
type TypeTrelloConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeTrelloConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeTrelloConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeTrelloConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeTrelloConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeTrelloConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Twilio. Requires type to be `TWILIO`.
type TypeTwilioConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeTwilioConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeTwilioConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeTwilioConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeTwilioConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeTwilioConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Twitch. Requires type to be `TWITCH`.
type TypeTwitchConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeTwitchConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeTwitchConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeTwitchConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeTwitchConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeTwitchConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Twitter. Requires type to be `TWITTER`.
type TypeTwitterConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeTwitterConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeTwitterConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeTwitterConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeTwitterConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeTwitterConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Typeform. Requires type to be `TYPEFORM`.
type TypeTypeformConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeTypeformConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeTypeformConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeTypeformConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeTypeformConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeTypeformConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Upollo. Requires type to be `UPOLLO`.
type TypeUpolloConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeUpolloConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeUpolloConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeUpolloConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeUpolloConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeUpolloConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Vercel Log Drains. Requires type to be `VERCEL_LOG_DRAINS`.
type TypeVercelLogDrainsConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeVercelLogDrainsConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeVercelLogDrainsConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeVercelLogDrainsConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeVercelLogDrainsConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeVercelLogDrainsConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Vercel Webhooks. Requires type to be `VERCEL`.
type TypeVercelWebhooksConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeVercelWebhooksConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeVercelWebhooksConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeVercelWebhooksConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeVercelWebhooksConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeVercelWebhooksConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Webhook. Requires type to be `WEBHOOK`.
type TypeWebhookConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeWebhookConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeWebhookConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeWebhookConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeWebhookConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeWebhookConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for WhatsApp. Requires type to be `WHATSAPP`.
type TypeWhatsAppConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeWhatsAppConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeWhatsAppConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeWhatsAppConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeWhatsAppConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeWhatsAppConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Wix. Requires type to be `WIX`.
type TypeWixConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeWixConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeWixConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeWixConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeWixConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeWixConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for WooCommerce. Requires type to be `WOOCOMMERCE`.
type TypeWooCommerceConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeWooCommerceConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeWooCommerceConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeWooCommerceConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeWooCommerceConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeWooCommerceConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for WorkOS. Requires type to be `WORKOS`.
type TypeWorkOsConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeWorkOsConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeWorkOsConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeWorkOsConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeWorkOsConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeWorkOsConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Xero. Requires type to be `XERO`.
type TypeXeroConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeXeroConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeXeroConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeXeroConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeXeroConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeXeroConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Zendesk. Requires type to be `ZENDESK`.
type TypeZendeskConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeZendeskConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeZendeskConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeZendeskConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeZendeskConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeZendeskConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The type config for Zoom. Requires type to be `ZOOM`.
type TypeZoomConfig struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypeZoomConfig) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypeZoomConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TypeZoomConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypeZoomConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypeZoomConfig) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type VercelLogDrainsIntegrationConfigs struct {
	WebhookSecretKey      *string `json:"webhook_secret_key,omitempty" url:"webhook_secret_key,omitempty"`
	VercelLogDrainsSecret string  `json:"vercel_log_drains_secret" url:"vercel_log_drains_secret"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VercelLogDrainsIntegrationConfigs) GetWebhookSecretKey() *string {
	if v == nil {
		return nil
	}
	return v.WebhookSecretKey
}

func (v *VercelLogDrainsIntegrationConfigs) GetVercelLogDrainsSecret() string {
	if v == nil {
		return ""
	}
	return v.VercelLogDrainsSecret
}

func (v *VercelLogDrainsIntegrationConfigs) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VercelLogDrainsIntegrationConfigs) UnmarshalJSON(data []byte) error {
	type unmarshaler VercelLogDrainsIntegrationConfigs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VercelLogDrainsIntegrationConfigs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VercelLogDrainsIntegrationConfigs) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type Verification3DEye struct {
	Configs *Type3DEyeConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *Verification3DEye) GetConfigs() *Type3DEyeConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *Verification3DEye) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *Verification3DEye) UnmarshalJSON(data []byte) error {
	type unmarshaler Verification3DEye
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = Verification3DEye(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *Verification3DEye) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationAdyen struct {
	Configs *TypeAdyenConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationAdyen) GetConfigs() *TypeAdyenConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationAdyen) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationAdyen) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationAdyen
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationAdyen(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationAdyen) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationAirwallex struct {
	Configs *TypeAirwallexConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationAirwallex) GetConfigs() *TypeAirwallexConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationAirwallex) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationAirwallex) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationAirwallex
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationAirwallex(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationAirwallex) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationAkeneo struct {
	Configs *TypeAkeneoConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationAkeneo) GetConfigs() *TypeAkeneoConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationAkeneo) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationAkeneo) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationAkeneo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationAkeneo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationAkeneo) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationApiKey struct {
	Configs *TypeApiKeyConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationApiKey) GetConfigs() *TypeApiKeyConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationApiKey) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationApiKey) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationApiKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationApiKey(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationApiKey) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationAwssns struct {
	Configs *TypeAwssnsConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationAwssns) GetConfigs() *TypeAwssnsConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationAwssns) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationAwssns) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationAwssns
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationAwssns(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationAwssns) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationBasicAuth struct {
	Configs *TypeBasicAuthConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationBasicAuth) GetConfigs() *TypeBasicAuthConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationBasicAuth) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationBasicAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationBasicAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationBasicAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationBasicAuth) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationBondsmith struct {
	Configs *TypeBondsmithConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationBondsmith) GetConfigs() *TypeBondsmithConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationBondsmith) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationBondsmith) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationBondsmith
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationBondsmith(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationBondsmith) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationBridge struct {
	Configs *TypeBridgeConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationBridge) GetConfigs() *TypeBridgeConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationBridge) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationBridge) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationBridge
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationBridge(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationBridge) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationCloudSignal struct {
	Configs *TypeCloudSignalConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationCloudSignal) GetConfigs() *TypeCloudSignalConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationCloudSignal) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationCloudSignal) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationCloudSignal
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationCloudSignal(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationCloudSignal) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationCommerceLayer struct {
	Configs *TypeCommerceLayerConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationCommerceLayer) GetConfigs() *TypeCommerceLayerConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationCommerceLayer) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationCommerceLayer) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationCommerceLayer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationCommerceLayer(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationCommerceLayer) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// The verification configs for the specified verification type
type VerificationConfig struct {
	Type            string
	Hmac            *VerificationHmac
	BasicAuth       *VerificationBasicAuth
	ApiKey          *VerificationApiKey
	Webhook         *VerificationWebhook
	Http            *VerificationHttp
	Sanity          *VerificationSanity
	Bridge          *VerificationBridge
	Cloudsignal     *VerificationCloudSignal
	Courier         *VerificationCourier
	Frontapp        *VerificationFrontApp
	Zoom            *VerificationZoom
	Twitter         *VerificationTwitter
	Recharge        *VerificationRecharge
	Stripe          *VerificationStripe
	PropertyFinder  *VerificationPropertyFinder
	Shopify         *VerificationShopify
	Twilio          *VerificationTwilio
	Github          *VerificationGitHub
	Postmark        *VerificationPostmark
	Typeform        *VerificationTypeform
	Xero            *VerificationXero
	Svix            *VerificationSvix
	Adyen           *VerificationAdyen
	Akeneo          *VerificationAkeneo
	Gitlab          *VerificationGitLab
	Woocommerce     *VerificationWooCommerce
	Oura            *VerificationOura
	Commercelayer   *VerificationCommerceLayer
	Hubspot         *VerificationHubspot
	Mailgun         *VerificationMailgun
	Persona         *VerificationPersona
	Pipedrive       *VerificationPipedrive
	Sendgrid        *VerificationSendgrid
	Workos          *VerificationWorkOs
	Synctera        *VerificationSynctera
	AwsSns          *VerificationAwssns
	ThreeDEye       *Verification3DEye
	Twitch          *VerificationTwitch
	Enode           *VerificationEnode
	Favro           *VerificationFavro
	Linear          *VerificationLinear
	Shopline        *VerificationShopline
	Wix             *VerificationWix
	Nmi             *VerificationNmiPaymentGateway
	Orb             *VerificationOrb
	Pylon           *VerificationPylon
	Razorpay        *VerificationRazorpay
	Repay           *VerificationRepay
	Square          *VerificationSquare
	Solidgate       *VerificationSolidgate
	Trello          *VerificationTrello
	Ebay            *VerificationEbay
	Telnyx          *VerificationTelnyx
	Discord         *VerificationDiscord
	Tokenio         *VerificationTokenIo
	Fiserv          *VerificationFiserv
	Bondsmith       *VerificationBondsmith
	VercelLogDrains *VerificationVercelLogDrains
	Vercel          *VerificationVercelWebhooks
	Tebex           *VerificationTebex
	Slack           *VerificationSlack
	Mailchimp       *VerificationMailchimp
	Paddle          *VerificationPaddle
	Paypal          *VerificationPaypal
	Treezor         *VerificationTreezor
	Praxis          *VerificationPraxis
	Customerio      *VerificationCustomerIo
	Facebook        *VerificationFacebook
	Whatsapp        *VerificationWhatsApp
	Replicate       *VerificationReplicate
	Tiktok          *VerificationTikTok
	Airwallex       *VerificationAirwallex
	Zendesk         *VerificationZendesk
	Upollo          *VerificationUpollo
}

func NewVerificationConfigFromHmac(value *VerificationHmac) *VerificationConfig {
	return &VerificationConfig{Type: "hmac", Hmac: value}
}

func NewVerificationConfigFromBasicAuth(value *VerificationBasicAuth) *VerificationConfig {
	return &VerificationConfig{Type: "basic_auth", BasicAuth: value}
}

func NewVerificationConfigFromApiKey(value *VerificationApiKey) *VerificationConfig {
	return &VerificationConfig{Type: "api_key", ApiKey: value}
}

func NewVerificationConfigFromWebhook(value *VerificationWebhook) *VerificationConfig {
	return &VerificationConfig{Type: "webhook", Webhook: value}
}

func NewVerificationConfigFromHttp(value *VerificationHttp) *VerificationConfig {
	return &VerificationConfig{Type: "http", Http: value}
}

func NewVerificationConfigFromSanity(value *VerificationSanity) *VerificationConfig {
	return &VerificationConfig{Type: "sanity", Sanity: value}
}

func NewVerificationConfigFromBridge(value *VerificationBridge) *VerificationConfig {
	return &VerificationConfig{Type: "bridge", Bridge: value}
}

func NewVerificationConfigFromCloudsignal(value *VerificationCloudSignal) *VerificationConfig {
	return &VerificationConfig{Type: "cloudsignal", Cloudsignal: value}
}

func NewVerificationConfigFromCourier(value *VerificationCourier) *VerificationConfig {
	return &VerificationConfig{Type: "courier", Courier: value}
}

func NewVerificationConfigFromFrontapp(value *VerificationFrontApp) *VerificationConfig {
	return &VerificationConfig{Type: "frontapp", Frontapp: value}
}

func NewVerificationConfigFromZoom(value *VerificationZoom) *VerificationConfig {
	return &VerificationConfig{Type: "zoom", Zoom: value}
}

func NewVerificationConfigFromTwitter(value *VerificationTwitter) *VerificationConfig {
	return &VerificationConfig{Type: "twitter", Twitter: value}
}

func NewVerificationConfigFromRecharge(value *VerificationRecharge) *VerificationConfig {
	return &VerificationConfig{Type: "recharge", Recharge: value}
}

func NewVerificationConfigFromStripe(value *VerificationStripe) *VerificationConfig {
	return &VerificationConfig{Type: "stripe", Stripe: value}
}

func NewVerificationConfigFromPropertyFinder(value *VerificationPropertyFinder) *VerificationConfig {
	return &VerificationConfig{Type: "property-finder", PropertyFinder: value}
}

func NewVerificationConfigFromShopify(value *VerificationShopify) *VerificationConfig {
	return &VerificationConfig{Type: "shopify", Shopify: value}
}

func NewVerificationConfigFromTwilio(value *VerificationTwilio) *VerificationConfig {
	return &VerificationConfig{Type: "twilio", Twilio: value}
}

func NewVerificationConfigFromGithub(value *VerificationGitHub) *VerificationConfig {
	return &VerificationConfig{Type: "github", Github: value}
}

func NewVerificationConfigFromPostmark(value *VerificationPostmark) *VerificationConfig {
	return &VerificationConfig{Type: "postmark", Postmark: value}
}

func NewVerificationConfigFromTypeform(value *VerificationTypeform) *VerificationConfig {
	return &VerificationConfig{Type: "typeform", Typeform: value}
}

func NewVerificationConfigFromXero(value *VerificationXero) *VerificationConfig {
	return &VerificationConfig{Type: "xero", Xero: value}
}

func NewVerificationConfigFromSvix(value *VerificationSvix) *VerificationConfig {
	return &VerificationConfig{Type: "svix", Svix: value}
}

func NewVerificationConfigFromAdyen(value *VerificationAdyen) *VerificationConfig {
	return &VerificationConfig{Type: "adyen", Adyen: value}
}

func NewVerificationConfigFromAkeneo(value *VerificationAkeneo) *VerificationConfig {
	return &VerificationConfig{Type: "akeneo", Akeneo: value}
}

func NewVerificationConfigFromGitlab(value *VerificationGitLab) *VerificationConfig {
	return &VerificationConfig{Type: "gitlab", Gitlab: value}
}

func NewVerificationConfigFromWoocommerce(value *VerificationWooCommerce) *VerificationConfig {
	return &VerificationConfig{Type: "woocommerce", Woocommerce: value}
}

func NewVerificationConfigFromOura(value *VerificationOura) *VerificationConfig {
	return &VerificationConfig{Type: "oura", Oura: value}
}

func NewVerificationConfigFromCommercelayer(value *VerificationCommerceLayer) *VerificationConfig {
	return &VerificationConfig{Type: "commercelayer", Commercelayer: value}
}

func NewVerificationConfigFromHubspot(value *VerificationHubspot) *VerificationConfig {
	return &VerificationConfig{Type: "hubspot", Hubspot: value}
}

func NewVerificationConfigFromMailgun(value *VerificationMailgun) *VerificationConfig {
	return &VerificationConfig{Type: "mailgun", Mailgun: value}
}

func NewVerificationConfigFromPersona(value *VerificationPersona) *VerificationConfig {
	return &VerificationConfig{Type: "persona", Persona: value}
}

func NewVerificationConfigFromPipedrive(value *VerificationPipedrive) *VerificationConfig {
	return &VerificationConfig{Type: "pipedrive", Pipedrive: value}
}

func NewVerificationConfigFromSendgrid(value *VerificationSendgrid) *VerificationConfig {
	return &VerificationConfig{Type: "sendgrid", Sendgrid: value}
}

func NewVerificationConfigFromWorkos(value *VerificationWorkOs) *VerificationConfig {
	return &VerificationConfig{Type: "workos", Workos: value}
}

func NewVerificationConfigFromSynctera(value *VerificationSynctera) *VerificationConfig {
	return &VerificationConfig{Type: "synctera", Synctera: value}
}

func NewVerificationConfigFromAwsSns(value *VerificationAwssns) *VerificationConfig {
	return &VerificationConfig{Type: "aws_sns", AwsSns: value}
}

func NewVerificationConfigFromThreeDEye(value *Verification3DEye) *VerificationConfig {
	return &VerificationConfig{Type: "three_d_eye", ThreeDEye: value}
}

func NewVerificationConfigFromTwitch(value *VerificationTwitch) *VerificationConfig {
	return &VerificationConfig{Type: "twitch", Twitch: value}
}

func NewVerificationConfigFromEnode(value *VerificationEnode) *VerificationConfig {
	return &VerificationConfig{Type: "enode", Enode: value}
}

func NewVerificationConfigFromFavro(value *VerificationFavro) *VerificationConfig {
	return &VerificationConfig{Type: "favro", Favro: value}
}

func NewVerificationConfigFromLinear(value *VerificationLinear) *VerificationConfig {
	return &VerificationConfig{Type: "linear", Linear: value}
}

func NewVerificationConfigFromShopline(value *VerificationShopline) *VerificationConfig {
	return &VerificationConfig{Type: "shopline", Shopline: value}
}

func NewVerificationConfigFromWix(value *VerificationWix) *VerificationConfig {
	return &VerificationConfig{Type: "wix", Wix: value}
}

func NewVerificationConfigFromNmi(value *VerificationNmiPaymentGateway) *VerificationConfig {
	return &VerificationConfig{Type: "nmi", Nmi: value}
}

func NewVerificationConfigFromOrb(value *VerificationOrb) *VerificationConfig {
	return &VerificationConfig{Type: "orb", Orb: value}
}

func NewVerificationConfigFromPylon(value *VerificationPylon) *VerificationConfig {
	return &VerificationConfig{Type: "pylon", Pylon: value}
}

func NewVerificationConfigFromRazorpay(value *VerificationRazorpay) *VerificationConfig {
	return &VerificationConfig{Type: "razorpay", Razorpay: value}
}

func NewVerificationConfigFromRepay(value *VerificationRepay) *VerificationConfig {
	return &VerificationConfig{Type: "repay", Repay: value}
}

func NewVerificationConfigFromSquare(value *VerificationSquare) *VerificationConfig {
	return &VerificationConfig{Type: "square", Square: value}
}

func NewVerificationConfigFromSolidgate(value *VerificationSolidgate) *VerificationConfig {
	return &VerificationConfig{Type: "solidgate", Solidgate: value}
}

func NewVerificationConfigFromTrello(value *VerificationTrello) *VerificationConfig {
	return &VerificationConfig{Type: "trello", Trello: value}
}

func NewVerificationConfigFromEbay(value *VerificationEbay) *VerificationConfig {
	return &VerificationConfig{Type: "ebay", Ebay: value}
}

func NewVerificationConfigFromTelnyx(value *VerificationTelnyx) *VerificationConfig {
	return &VerificationConfig{Type: "telnyx", Telnyx: value}
}

func NewVerificationConfigFromDiscord(value *VerificationDiscord) *VerificationConfig {
	return &VerificationConfig{Type: "discord", Discord: value}
}

func NewVerificationConfigFromTokenio(value *VerificationTokenIo) *VerificationConfig {
	return &VerificationConfig{Type: "tokenio", Tokenio: value}
}

func NewVerificationConfigFromFiserv(value *VerificationFiserv) *VerificationConfig {
	return &VerificationConfig{Type: "fiserv", Fiserv: value}
}

func NewVerificationConfigFromBondsmith(value *VerificationBondsmith) *VerificationConfig {
	return &VerificationConfig{Type: "bondsmith", Bondsmith: value}
}

func NewVerificationConfigFromVercelLogDrains(value *VerificationVercelLogDrains) *VerificationConfig {
	return &VerificationConfig{Type: "vercel_log_drains", VercelLogDrains: value}
}

func NewVerificationConfigFromVercel(value *VerificationVercelWebhooks) *VerificationConfig {
	return &VerificationConfig{Type: "vercel", Vercel: value}
}

func NewVerificationConfigFromTebex(value *VerificationTebex) *VerificationConfig {
	return &VerificationConfig{Type: "tebex", Tebex: value}
}

func NewVerificationConfigFromSlack(value *VerificationSlack) *VerificationConfig {
	return &VerificationConfig{Type: "slack", Slack: value}
}

func NewVerificationConfigFromMailchimp(value *VerificationMailchimp) *VerificationConfig {
	return &VerificationConfig{Type: "mailchimp", Mailchimp: value}
}

func NewVerificationConfigFromPaddle(value *VerificationPaddle) *VerificationConfig {
	return &VerificationConfig{Type: "paddle", Paddle: value}
}

func NewVerificationConfigFromPaypal(value *VerificationPaypal) *VerificationConfig {
	return &VerificationConfig{Type: "paypal", Paypal: value}
}

func NewVerificationConfigFromTreezor(value *VerificationTreezor) *VerificationConfig {
	return &VerificationConfig{Type: "treezor", Treezor: value}
}

func NewVerificationConfigFromPraxis(value *VerificationPraxis) *VerificationConfig {
	return &VerificationConfig{Type: "praxis", Praxis: value}
}

func NewVerificationConfigFromCustomerio(value *VerificationCustomerIo) *VerificationConfig {
	return &VerificationConfig{Type: "customerio", Customerio: value}
}

func NewVerificationConfigFromFacebook(value *VerificationFacebook) *VerificationConfig {
	return &VerificationConfig{Type: "facebook", Facebook: value}
}

func NewVerificationConfigFromWhatsapp(value *VerificationWhatsApp) *VerificationConfig {
	return &VerificationConfig{Type: "whatsapp", Whatsapp: value}
}

func NewVerificationConfigFromReplicate(value *VerificationReplicate) *VerificationConfig {
	return &VerificationConfig{Type: "replicate", Replicate: value}
}

func NewVerificationConfigFromTiktok(value *VerificationTikTok) *VerificationConfig {
	return &VerificationConfig{Type: "tiktok", Tiktok: value}
}

func NewVerificationConfigFromAirwallex(value *VerificationAirwallex) *VerificationConfig {
	return &VerificationConfig{Type: "airwallex", Airwallex: value}
}

func NewVerificationConfigFromZendesk(value *VerificationZendesk) *VerificationConfig {
	return &VerificationConfig{Type: "zendesk", Zendesk: value}
}

func NewVerificationConfigFromUpollo(value *VerificationUpollo) *VerificationConfig {
	return &VerificationConfig{Type: "upollo", Upollo: value}
}

func (v *VerificationConfig) GetType() string {
	if v == nil {
		return ""
	}
	return v.Type
}

func (v *VerificationConfig) GetHmac() *VerificationHmac {
	if v == nil {
		return nil
	}
	return v.Hmac
}

func (v *VerificationConfig) GetBasicAuth() *VerificationBasicAuth {
	if v == nil {
		return nil
	}
	return v.BasicAuth
}

func (v *VerificationConfig) GetApiKey() *VerificationApiKey {
	if v == nil {
		return nil
	}
	return v.ApiKey
}

func (v *VerificationConfig) GetWebhook() *VerificationWebhook {
	if v == nil {
		return nil
	}
	return v.Webhook
}

func (v *VerificationConfig) GetHttp() *VerificationHttp {
	if v == nil {
		return nil
	}
	return v.Http
}

func (v *VerificationConfig) GetSanity() *VerificationSanity {
	if v == nil {
		return nil
	}
	return v.Sanity
}

func (v *VerificationConfig) GetBridge() *VerificationBridge {
	if v == nil {
		return nil
	}
	return v.Bridge
}

func (v *VerificationConfig) GetCloudsignal() *VerificationCloudSignal {
	if v == nil {
		return nil
	}
	return v.Cloudsignal
}

func (v *VerificationConfig) GetCourier() *VerificationCourier {
	if v == nil {
		return nil
	}
	return v.Courier
}

func (v *VerificationConfig) GetFrontapp() *VerificationFrontApp {
	if v == nil {
		return nil
	}
	return v.Frontapp
}

func (v *VerificationConfig) GetZoom() *VerificationZoom {
	if v == nil {
		return nil
	}
	return v.Zoom
}

func (v *VerificationConfig) GetTwitter() *VerificationTwitter {
	if v == nil {
		return nil
	}
	return v.Twitter
}

func (v *VerificationConfig) GetRecharge() *VerificationRecharge {
	if v == nil {
		return nil
	}
	return v.Recharge
}

func (v *VerificationConfig) GetStripe() *VerificationStripe {
	if v == nil {
		return nil
	}
	return v.Stripe
}

func (v *VerificationConfig) GetPropertyFinder() *VerificationPropertyFinder {
	if v == nil {
		return nil
	}
	return v.PropertyFinder
}

func (v *VerificationConfig) GetShopify() *VerificationShopify {
	if v == nil {
		return nil
	}
	return v.Shopify
}

func (v *VerificationConfig) GetTwilio() *VerificationTwilio {
	if v == nil {
		return nil
	}
	return v.Twilio
}

func (v *VerificationConfig) GetGithub() *VerificationGitHub {
	if v == nil {
		return nil
	}
	return v.Github
}

func (v *VerificationConfig) GetPostmark() *VerificationPostmark {
	if v == nil {
		return nil
	}
	return v.Postmark
}

func (v *VerificationConfig) GetTypeform() *VerificationTypeform {
	if v == nil {
		return nil
	}
	return v.Typeform
}

func (v *VerificationConfig) GetXero() *VerificationXero {
	if v == nil {
		return nil
	}
	return v.Xero
}

func (v *VerificationConfig) GetSvix() *VerificationSvix {
	if v == nil {
		return nil
	}
	return v.Svix
}

func (v *VerificationConfig) GetAdyen() *VerificationAdyen {
	if v == nil {
		return nil
	}
	return v.Adyen
}

func (v *VerificationConfig) GetAkeneo() *VerificationAkeneo {
	if v == nil {
		return nil
	}
	return v.Akeneo
}

func (v *VerificationConfig) GetGitlab() *VerificationGitLab {
	if v == nil {
		return nil
	}
	return v.Gitlab
}

func (v *VerificationConfig) GetWoocommerce() *VerificationWooCommerce {
	if v == nil {
		return nil
	}
	return v.Woocommerce
}

func (v *VerificationConfig) GetOura() *VerificationOura {
	if v == nil {
		return nil
	}
	return v.Oura
}

func (v *VerificationConfig) GetCommercelayer() *VerificationCommerceLayer {
	if v == nil {
		return nil
	}
	return v.Commercelayer
}

func (v *VerificationConfig) GetHubspot() *VerificationHubspot {
	if v == nil {
		return nil
	}
	return v.Hubspot
}

func (v *VerificationConfig) GetMailgun() *VerificationMailgun {
	if v == nil {
		return nil
	}
	return v.Mailgun
}

func (v *VerificationConfig) GetPersona() *VerificationPersona {
	if v == nil {
		return nil
	}
	return v.Persona
}

func (v *VerificationConfig) GetPipedrive() *VerificationPipedrive {
	if v == nil {
		return nil
	}
	return v.Pipedrive
}

func (v *VerificationConfig) GetSendgrid() *VerificationSendgrid {
	if v == nil {
		return nil
	}
	return v.Sendgrid
}

func (v *VerificationConfig) GetWorkos() *VerificationWorkOs {
	if v == nil {
		return nil
	}
	return v.Workos
}

func (v *VerificationConfig) GetSynctera() *VerificationSynctera {
	if v == nil {
		return nil
	}
	return v.Synctera
}

func (v *VerificationConfig) GetAwsSns() *VerificationAwssns {
	if v == nil {
		return nil
	}
	return v.AwsSns
}

func (v *VerificationConfig) GetThreeDEye() *Verification3DEye {
	if v == nil {
		return nil
	}
	return v.ThreeDEye
}

func (v *VerificationConfig) GetTwitch() *VerificationTwitch {
	if v == nil {
		return nil
	}
	return v.Twitch
}

func (v *VerificationConfig) GetEnode() *VerificationEnode {
	if v == nil {
		return nil
	}
	return v.Enode
}

func (v *VerificationConfig) GetFavro() *VerificationFavro {
	if v == nil {
		return nil
	}
	return v.Favro
}

func (v *VerificationConfig) GetLinear() *VerificationLinear {
	if v == nil {
		return nil
	}
	return v.Linear
}

func (v *VerificationConfig) GetShopline() *VerificationShopline {
	if v == nil {
		return nil
	}
	return v.Shopline
}

func (v *VerificationConfig) GetWix() *VerificationWix {
	if v == nil {
		return nil
	}
	return v.Wix
}

func (v *VerificationConfig) GetNmi() *VerificationNmiPaymentGateway {
	if v == nil {
		return nil
	}
	return v.Nmi
}

func (v *VerificationConfig) GetOrb() *VerificationOrb {
	if v == nil {
		return nil
	}
	return v.Orb
}

func (v *VerificationConfig) GetPylon() *VerificationPylon {
	if v == nil {
		return nil
	}
	return v.Pylon
}

func (v *VerificationConfig) GetRazorpay() *VerificationRazorpay {
	if v == nil {
		return nil
	}
	return v.Razorpay
}

func (v *VerificationConfig) GetRepay() *VerificationRepay {
	if v == nil {
		return nil
	}
	return v.Repay
}

func (v *VerificationConfig) GetSquare() *VerificationSquare {
	if v == nil {
		return nil
	}
	return v.Square
}

func (v *VerificationConfig) GetSolidgate() *VerificationSolidgate {
	if v == nil {
		return nil
	}
	return v.Solidgate
}

func (v *VerificationConfig) GetTrello() *VerificationTrello {
	if v == nil {
		return nil
	}
	return v.Trello
}

func (v *VerificationConfig) GetEbay() *VerificationEbay {
	if v == nil {
		return nil
	}
	return v.Ebay
}

func (v *VerificationConfig) GetTelnyx() *VerificationTelnyx {
	if v == nil {
		return nil
	}
	return v.Telnyx
}

func (v *VerificationConfig) GetDiscord() *VerificationDiscord {
	if v == nil {
		return nil
	}
	return v.Discord
}

func (v *VerificationConfig) GetTokenio() *VerificationTokenIo {
	if v == nil {
		return nil
	}
	return v.Tokenio
}

func (v *VerificationConfig) GetFiserv() *VerificationFiserv {
	if v == nil {
		return nil
	}
	return v.Fiserv
}

func (v *VerificationConfig) GetBondsmith() *VerificationBondsmith {
	if v == nil {
		return nil
	}
	return v.Bondsmith
}

func (v *VerificationConfig) GetVercelLogDrains() *VerificationVercelLogDrains {
	if v == nil {
		return nil
	}
	return v.VercelLogDrains
}

func (v *VerificationConfig) GetVercel() *VerificationVercelWebhooks {
	if v == nil {
		return nil
	}
	return v.Vercel
}

func (v *VerificationConfig) GetTebex() *VerificationTebex {
	if v == nil {
		return nil
	}
	return v.Tebex
}

func (v *VerificationConfig) GetSlack() *VerificationSlack {
	if v == nil {
		return nil
	}
	return v.Slack
}

func (v *VerificationConfig) GetMailchimp() *VerificationMailchimp {
	if v == nil {
		return nil
	}
	return v.Mailchimp
}

func (v *VerificationConfig) GetPaddle() *VerificationPaddle {
	if v == nil {
		return nil
	}
	return v.Paddle
}

func (v *VerificationConfig) GetPaypal() *VerificationPaypal {
	if v == nil {
		return nil
	}
	return v.Paypal
}

func (v *VerificationConfig) GetTreezor() *VerificationTreezor {
	if v == nil {
		return nil
	}
	return v.Treezor
}

func (v *VerificationConfig) GetPraxis() *VerificationPraxis {
	if v == nil {
		return nil
	}
	return v.Praxis
}

func (v *VerificationConfig) GetCustomerio() *VerificationCustomerIo {
	if v == nil {
		return nil
	}
	return v.Customerio
}

func (v *VerificationConfig) GetFacebook() *VerificationFacebook {
	if v == nil {
		return nil
	}
	return v.Facebook
}

func (v *VerificationConfig) GetWhatsapp() *VerificationWhatsApp {
	if v == nil {
		return nil
	}
	return v.Whatsapp
}

func (v *VerificationConfig) GetReplicate() *VerificationReplicate {
	if v == nil {
		return nil
	}
	return v.Replicate
}

func (v *VerificationConfig) GetTiktok() *VerificationTikTok {
	if v == nil {
		return nil
	}
	return v.Tiktok
}

func (v *VerificationConfig) GetAirwallex() *VerificationAirwallex {
	if v == nil {
		return nil
	}
	return v.Airwallex
}

func (v *VerificationConfig) GetZendesk() *VerificationZendesk {
	if v == nil {
		return nil
	}
	return v.Zendesk
}

func (v *VerificationConfig) GetUpollo() *VerificationUpollo {
	if v == nil {
		return nil
	}
	return v.Upollo
}

func (v *VerificationConfig) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	v.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", v)
	}
	switch unmarshaler.Type {
	case "hmac":
		value := new(VerificationHmac)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Hmac = value
	case "basic_auth":
		value := new(VerificationBasicAuth)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.BasicAuth = value
	case "api_key":
		value := new(VerificationApiKey)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.ApiKey = value
	case "webhook":
		value := new(VerificationWebhook)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Webhook = value
	case "http":
		value := new(VerificationHttp)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Http = value
	case "sanity":
		value := new(VerificationSanity)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Sanity = value
	case "bridge":
		value := new(VerificationBridge)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Bridge = value
	case "cloudsignal":
		value := new(VerificationCloudSignal)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Cloudsignal = value
	case "courier":
		value := new(VerificationCourier)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Courier = value
	case "frontapp":
		value := new(VerificationFrontApp)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Frontapp = value
	case "zoom":
		value := new(VerificationZoom)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Zoom = value
	case "twitter":
		value := new(VerificationTwitter)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Twitter = value
	case "recharge":
		value := new(VerificationRecharge)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Recharge = value
	case "stripe":
		value := new(VerificationStripe)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Stripe = value
	case "property-finder":
		value := new(VerificationPropertyFinder)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.PropertyFinder = value
	case "shopify":
		value := new(VerificationShopify)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Shopify = value
	case "twilio":
		value := new(VerificationTwilio)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Twilio = value
	case "github":
		value := new(VerificationGitHub)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Github = value
	case "postmark":
		value := new(VerificationPostmark)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Postmark = value
	case "typeform":
		value := new(VerificationTypeform)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Typeform = value
	case "xero":
		value := new(VerificationXero)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Xero = value
	case "svix":
		value := new(VerificationSvix)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Svix = value
	case "adyen":
		value := new(VerificationAdyen)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Adyen = value
	case "akeneo":
		value := new(VerificationAkeneo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Akeneo = value
	case "gitlab":
		value := new(VerificationGitLab)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Gitlab = value
	case "woocommerce":
		value := new(VerificationWooCommerce)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Woocommerce = value
	case "oura":
		value := new(VerificationOura)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Oura = value
	case "commercelayer":
		value := new(VerificationCommerceLayer)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Commercelayer = value
	case "hubspot":
		value := new(VerificationHubspot)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Hubspot = value
	case "mailgun":
		value := new(VerificationMailgun)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Mailgun = value
	case "persona":
		value := new(VerificationPersona)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Persona = value
	case "pipedrive":
		value := new(VerificationPipedrive)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Pipedrive = value
	case "sendgrid":
		value := new(VerificationSendgrid)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Sendgrid = value
	case "workos":
		value := new(VerificationWorkOs)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Workos = value
	case "synctera":
		value := new(VerificationSynctera)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Synctera = value
	case "aws_sns":
		value := new(VerificationAwssns)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.AwsSns = value
	case "three_d_eye":
		value := new(Verification3DEye)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.ThreeDEye = value
	case "twitch":
		value := new(VerificationTwitch)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Twitch = value
	case "enode":
		value := new(VerificationEnode)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Enode = value
	case "favro":
		value := new(VerificationFavro)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Favro = value
	case "linear":
		value := new(VerificationLinear)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Linear = value
	case "shopline":
		value := new(VerificationShopline)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Shopline = value
	case "wix":
		value := new(VerificationWix)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Wix = value
	case "nmi":
		value := new(VerificationNmiPaymentGateway)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Nmi = value
	case "orb":
		value := new(VerificationOrb)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Orb = value
	case "pylon":
		value := new(VerificationPylon)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Pylon = value
	case "razorpay":
		value := new(VerificationRazorpay)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Razorpay = value
	case "repay":
		value := new(VerificationRepay)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Repay = value
	case "square":
		value := new(VerificationSquare)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Square = value
	case "solidgate":
		value := new(VerificationSolidgate)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Solidgate = value
	case "trello":
		value := new(VerificationTrello)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Trello = value
	case "ebay":
		value := new(VerificationEbay)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Ebay = value
	case "telnyx":
		value := new(VerificationTelnyx)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Telnyx = value
	case "discord":
		value := new(VerificationDiscord)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Discord = value
	case "tokenio":
		value := new(VerificationTokenIo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Tokenio = value
	case "fiserv":
		value := new(VerificationFiserv)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Fiserv = value
	case "bondsmith":
		value := new(VerificationBondsmith)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Bondsmith = value
	case "vercel_log_drains":
		value := new(VerificationVercelLogDrains)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.VercelLogDrains = value
	case "vercel":
		value := new(VerificationVercelWebhooks)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Vercel = value
	case "tebex":
		value := new(VerificationTebex)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Tebex = value
	case "slack":
		value := new(VerificationSlack)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Slack = value
	case "mailchimp":
		value := new(VerificationMailchimp)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Mailchimp = value
	case "paddle":
		value := new(VerificationPaddle)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Paddle = value
	case "paypal":
		value := new(VerificationPaypal)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Paypal = value
	case "treezor":
		value := new(VerificationTreezor)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Treezor = value
	case "praxis":
		value := new(VerificationPraxis)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Praxis = value
	case "customerio":
		value := new(VerificationCustomerIo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Customerio = value
	case "facebook":
		value := new(VerificationFacebook)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Facebook = value
	case "whatsapp":
		value := new(VerificationWhatsApp)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Whatsapp = value
	case "replicate":
		value := new(VerificationReplicate)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Replicate = value
	case "tiktok":
		value := new(VerificationTikTok)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Tiktok = value
	case "airwallex":
		value := new(VerificationAirwallex)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Airwallex = value
	case "zendesk":
		value := new(VerificationZendesk)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Zendesk = value
	case "upollo":
		value := new(VerificationUpollo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Upollo = value
	}
	return nil
}

func (v VerificationConfig) MarshalJSON() ([]byte, error) {
	switch v.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", v.Type, v)
	case "hmac":
		return internal.MarshalJSONWithExtraProperty(v.Hmac, "type", "hmac")
	case "basic_auth":
		return internal.MarshalJSONWithExtraProperty(v.BasicAuth, "type", "basic_auth")
	case "api_key":
		return internal.MarshalJSONWithExtraProperty(v.ApiKey, "type", "api_key")
	case "webhook":
		return internal.MarshalJSONWithExtraProperty(v.Webhook, "type", "webhook")
	case "http":
		return internal.MarshalJSONWithExtraProperty(v.Http, "type", "http")
	case "sanity":
		return internal.MarshalJSONWithExtraProperty(v.Sanity, "type", "sanity")
	case "bridge":
		return internal.MarshalJSONWithExtraProperty(v.Bridge, "type", "bridge")
	case "cloudsignal":
		return internal.MarshalJSONWithExtraProperty(v.Cloudsignal, "type", "cloudsignal")
	case "courier":
		return internal.MarshalJSONWithExtraProperty(v.Courier, "type", "courier")
	case "frontapp":
		return internal.MarshalJSONWithExtraProperty(v.Frontapp, "type", "frontapp")
	case "zoom":
		return internal.MarshalJSONWithExtraProperty(v.Zoom, "type", "zoom")
	case "twitter":
		return internal.MarshalJSONWithExtraProperty(v.Twitter, "type", "twitter")
	case "recharge":
		return internal.MarshalJSONWithExtraProperty(v.Recharge, "type", "recharge")
	case "stripe":
		return internal.MarshalJSONWithExtraProperty(v.Stripe, "type", "stripe")
	case "property-finder":
		return internal.MarshalJSONWithExtraProperty(v.PropertyFinder, "type", "property-finder")
	case "shopify":
		return internal.MarshalJSONWithExtraProperty(v.Shopify, "type", "shopify")
	case "twilio":
		return internal.MarshalJSONWithExtraProperty(v.Twilio, "type", "twilio")
	case "github":
		return internal.MarshalJSONWithExtraProperty(v.Github, "type", "github")
	case "postmark":
		return internal.MarshalJSONWithExtraProperty(v.Postmark, "type", "postmark")
	case "typeform":
		return internal.MarshalJSONWithExtraProperty(v.Typeform, "type", "typeform")
	case "xero":
		return internal.MarshalJSONWithExtraProperty(v.Xero, "type", "xero")
	case "svix":
		return internal.MarshalJSONWithExtraProperty(v.Svix, "type", "svix")
	case "adyen":
		return internal.MarshalJSONWithExtraProperty(v.Adyen, "type", "adyen")
	case "akeneo":
		return internal.MarshalJSONWithExtraProperty(v.Akeneo, "type", "akeneo")
	case "gitlab":
		return internal.MarshalJSONWithExtraProperty(v.Gitlab, "type", "gitlab")
	case "woocommerce":
		return internal.MarshalJSONWithExtraProperty(v.Woocommerce, "type", "woocommerce")
	case "oura":
		return internal.MarshalJSONWithExtraProperty(v.Oura, "type", "oura")
	case "commercelayer":
		return internal.MarshalJSONWithExtraProperty(v.Commercelayer, "type", "commercelayer")
	case "hubspot":
		return internal.MarshalJSONWithExtraProperty(v.Hubspot, "type", "hubspot")
	case "mailgun":
		return internal.MarshalJSONWithExtraProperty(v.Mailgun, "type", "mailgun")
	case "persona":
		return internal.MarshalJSONWithExtraProperty(v.Persona, "type", "persona")
	case "pipedrive":
		return internal.MarshalJSONWithExtraProperty(v.Pipedrive, "type", "pipedrive")
	case "sendgrid":
		return internal.MarshalJSONWithExtraProperty(v.Sendgrid, "type", "sendgrid")
	case "workos":
		return internal.MarshalJSONWithExtraProperty(v.Workos, "type", "workos")
	case "synctera":
		return internal.MarshalJSONWithExtraProperty(v.Synctera, "type", "synctera")
	case "aws_sns":
		return internal.MarshalJSONWithExtraProperty(v.AwsSns, "type", "aws_sns")
	case "three_d_eye":
		return internal.MarshalJSONWithExtraProperty(v.ThreeDEye, "type", "three_d_eye")
	case "twitch":
		return internal.MarshalJSONWithExtraProperty(v.Twitch, "type", "twitch")
	case "enode":
		return internal.MarshalJSONWithExtraProperty(v.Enode, "type", "enode")
	case "favro":
		return internal.MarshalJSONWithExtraProperty(v.Favro, "type", "favro")
	case "linear":
		return internal.MarshalJSONWithExtraProperty(v.Linear, "type", "linear")
	case "shopline":
		return internal.MarshalJSONWithExtraProperty(v.Shopline, "type", "shopline")
	case "wix":
		return internal.MarshalJSONWithExtraProperty(v.Wix, "type", "wix")
	case "nmi":
		return internal.MarshalJSONWithExtraProperty(v.Nmi, "type", "nmi")
	case "orb":
		return internal.MarshalJSONWithExtraProperty(v.Orb, "type", "orb")
	case "pylon":
		return internal.MarshalJSONWithExtraProperty(v.Pylon, "type", "pylon")
	case "razorpay":
		return internal.MarshalJSONWithExtraProperty(v.Razorpay, "type", "razorpay")
	case "repay":
		return internal.MarshalJSONWithExtraProperty(v.Repay, "type", "repay")
	case "square":
		return internal.MarshalJSONWithExtraProperty(v.Square, "type", "square")
	case "solidgate":
		return internal.MarshalJSONWithExtraProperty(v.Solidgate, "type", "solidgate")
	case "trello":
		return internal.MarshalJSONWithExtraProperty(v.Trello, "type", "trello")
	case "ebay":
		return internal.MarshalJSONWithExtraProperty(v.Ebay, "type", "ebay")
	case "telnyx":
		return internal.MarshalJSONWithExtraProperty(v.Telnyx, "type", "telnyx")
	case "discord":
		return internal.MarshalJSONWithExtraProperty(v.Discord, "type", "discord")
	case "tokenio":
		return internal.MarshalJSONWithExtraProperty(v.Tokenio, "type", "tokenio")
	case "fiserv":
		return internal.MarshalJSONWithExtraProperty(v.Fiserv, "type", "fiserv")
	case "bondsmith":
		return internal.MarshalJSONWithExtraProperty(v.Bondsmith, "type", "bondsmith")
	case "vercel_log_drains":
		return internal.MarshalJSONWithExtraProperty(v.VercelLogDrains, "type", "vercel_log_drains")
	case "vercel":
		return internal.MarshalJSONWithExtraProperty(v.Vercel, "type", "vercel")
	case "tebex":
		return internal.MarshalJSONWithExtraProperty(v.Tebex, "type", "tebex")
	case "slack":
		return internal.MarshalJSONWithExtraProperty(v.Slack, "type", "slack")
	case "mailchimp":
		return internal.MarshalJSONWithExtraProperty(v.Mailchimp, "type", "mailchimp")
	case "paddle":
		return internal.MarshalJSONWithExtraProperty(v.Paddle, "type", "paddle")
	case "paypal":
		return internal.MarshalJSONWithExtraProperty(v.Paypal, "type", "paypal")
	case "treezor":
		return internal.MarshalJSONWithExtraProperty(v.Treezor, "type", "treezor")
	case "praxis":
		return internal.MarshalJSONWithExtraProperty(v.Praxis, "type", "praxis")
	case "customerio":
		return internal.MarshalJSONWithExtraProperty(v.Customerio, "type", "customerio")
	case "facebook":
		return internal.MarshalJSONWithExtraProperty(v.Facebook, "type", "facebook")
	case "whatsapp":
		return internal.MarshalJSONWithExtraProperty(v.Whatsapp, "type", "whatsapp")
	case "replicate":
		return internal.MarshalJSONWithExtraProperty(v.Replicate, "type", "replicate")
	case "tiktok":
		return internal.MarshalJSONWithExtraProperty(v.Tiktok, "type", "tiktok")
	case "airwallex":
		return internal.MarshalJSONWithExtraProperty(v.Airwallex, "type", "airwallex")
	case "zendesk":
		return internal.MarshalJSONWithExtraProperty(v.Zendesk, "type", "zendesk")
	case "upollo":
		return internal.MarshalJSONWithExtraProperty(v.Upollo, "type", "upollo")
	}
}

type VerificationConfigVisitor interface {
	VisitHmac(*VerificationHmac) error
	VisitBasicAuth(*VerificationBasicAuth) error
	VisitApiKey(*VerificationApiKey) error
	VisitWebhook(*VerificationWebhook) error
	VisitHttp(*VerificationHttp) error
	VisitSanity(*VerificationSanity) error
	VisitBridge(*VerificationBridge) error
	VisitCloudsignal(*VerificationCloudSignal) error
	VisitCourier(*VerificationCourier) error
	VisitFrontapp(*VerificationFrontApp) error
	VisitZoom(*VerificationZoom) error
	VisitTwitter(*VerificationTwitter) error
	VisitRecharge(*VerificationRecharge) error
	VisitStripe(*VerificationStripe) error
	VisitPropertyFinder(*VerificationPropertyFinder) error
	VisitShopify(*VerificationShopify) error
	VisitTwilio(*VerificationTwilio) error
	VisitGithub(*VerificationGitHub) error
	VisitPostmark(*VerificationPostmark) error
	VisitTypeform(*VerificationTypeform) error
	VisitXero(*VerificationXero) error
	VisitSvix(*VerificationSvix) error
	VisitAdyen(*VerificationAdyen) error
	VisitAkeneo(*VerificationAkeneo) error
	VisitGitlab(*VerificationGitLab) error
	VisitWoocommerce(*VerificationWooCommerce) error
	VisitOura(*VerificationOura) error
	VisitCommercelayer(*VerificationCommerceLayer) error
	VisitHubspot(*VerificationHubspot) error
	VisitMailgun(*VerificationMailgun) error
	VisitPersona(*VerificationPersona) error
	VisitPipedrive(*VerificationPipedrive) error
	VisitSendgrid(*VerificationSendgrid) error
	VisitWorkos(*VerificationWorkOs) error
	VisitSynctera(*VerificationSynctera) error
	VisitAwsSns(*VerificationAwssns) error
	VisitThreeDEye(*Verification3DEye) error
	VisitTwitch(*VerificationTwitch) error
	VisitEnode(*VerificationEnode) error
	VisitFavro(*VerificationFavro) error
	VisitLinear(*VerificationLinear) error
	VisitShopline(*VerificationShopline) error
	VisitWix(*VerificationWix) error
	VisitNmi(*VerificationNmiPaymentGateway) error
	VisitOrb(*VerificationOrb) error
	VisitPylon(*VerificationPylon) error
	VisitRazorpay(*VerificationRazorpay) error
	VisitRepay(*VerificationRepay) error
	VisitSquare(*VerificationSquare) error
	VisitSolidgate(*VerificationSolidgate) error
	VisitTrello(*VerificationTrello) error
	VisitEbay(*VerificationEbay) error
	VisitTelnyx(*VerificationTelnyx) error
	VisitDiscord(*VerificationDiscord) error
	VisitTokenio(*VerificationTokenIo) error
	VisitFiserv(*VerificationFiserv) error
	VisitBondsmith(*VerificationBondsmith) error
	VisitVercelLogDrains(*VerificationVercelLogDrains) error
	VisitVercel(*VerificationVercelWebhooks) error
	VisitTebex(*VerificationTebex) error
	VisitSlack(*VerificationSlack) error
	VisitMailchimp(*VerificationMailchimp) error
	VisitPaddle(*VerificationPaddle) error
	VisitPaypal(*VerificationPaypal) error
	VisitTreezor(*VerificationTreezor) error
	VisitPraxis(*VerificationPraxis) error
	VisitCustomerio(*VerificationCustomerIo) error
	VisitFacebook(*VerificationFacebook) error
	VisitWhatsapp(*VerificationWhatsApp) error
	VisitReplicate(*VerificationReplicate) error
	VisitTiktok(*VerificationTikTok) error
	VisitAirwallex(*VerificationAirwallex) error
	VisitZendesk(*VerificationZendesk) error
	VisitUpollo(*VerificationUpollo) error
}

func (v *VerificationConfig) Accept(visitor VerificationConfigVisitor) error {
	switch v.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", v.Type, v)
	case "hmac":
		return visitor.VisitHmac(v.Hmac)
	case "basic_auth":
		return visitor.VisitBasicAuth(v.BasicAuth)
	case "api_key":
		return visitor.VisitApiKey(v.ApiKey)
	case "webhook":
		return visitor.VisitWebhook(v.Webhook)
	case "http":
		return visitor.VisitHttp(v.Http)
	case "sanity":
		return visitor.VisitSanity(v.Sanity)
	case "bridge":
		return visitor.VisitBridge(v.Bridge)
	case "cloudsignal":
		return visitor.VisitCloudsignal(v.Cloudsignal)
	case "courier":
		return visitor.VisitCourier(v.Courier)
	case "frontapp":
		return visitor.VisitFrontapp(v.Frontapp)
	case "zoom":
		return visitor.VisitZoom(v.Zoom)
	case "twitter":
		return visitor.VisitTwitter(v.Twitter)
	case "recharge":
		return visitor.VisitRecharge(v.Recharge)
	case "stripe":
		return visitor.VisitStripe(v.Stripe)
	case "property-finder":
		return visitor.VisitPropertyFinder(v.PropertyFinder)
	case "shopify":
		return visitor.VisitShopify(v.Shopify)
	case "twilio":
		return visitor.VisitTwilio(v.Twilio)
	case "github":
		return visitor.VisitGithub(v.Github)
	case "postmark":
		return visitor.VisitPostmark(v.Postmark)
	case "typeform":
		return visitor.VisitTypeform(v.Typeform)
	case "xero":
		return visitor.VisitXero(v.Xero)
	case "svix":
		return visitor.VisitSvix(v.Svix)
	case "adyen":
		return visitor.VisitAdyen(v.Adyen)
	case "akeneo":
		return visitor.VisitAkeneo(v.Akeneo)
	case "gitlab":
		return visitor.VisitGitlab(v.Gitlab)
	case "woocommerce":
		return visitor.VisitWoocommerce(v.Woocommerce)
	case "oura":
		return visitor.VisitOura(v.Oura)
	case "commercelayer":
		return visitor.VisitCommercelayer(v.Commercelayer)
	case "hubspot":
		return visitor.VisitHubspot(v.Hubspot)
	case "mailgun":
		return visitor.VisitMailgun(v.Mailgun)
	case "persona":
		return visitor.VisitPersona(v.Persona)
	case "pipedrive":
		return visitor.VisitPipedrive(v.Pipedrive)
	case "sendgrid":
		return visitor.VisitSendgrid(v.Sendgrid)
	case "workos":
		return visitor.VisitWorkos(v.Workos)
	case "synctera":
		return visitor.VisitSynctera(v.Synctera)
	case "aws_sns":
		return visitor.VisitAwsSns(v.AwsSns)
	case "three_d_eye":
		return visitor.VisitThreeDEye(v.ThreeDEye)
	case "twitch":
		return visitor.VisitTwitch(v.Twitch)
	case "enode":
		return visitor.VisitEnode(v.Enode)
	case "favro":
		return visitor.VisitFavro(v.Favro)
	case "linear":
		return visitor.VisitLinear(v.Linear)
	case "shopline":
		return visitor.VisitShopline(v.Shopline)
	case "wix":
		return visitor.VisitWix(v.Wix)
	case "nmi":
		return visitor.VisitNmi(v.Nmi)
	case "orb":
		return visitor.VisitOrb(v.Orb)
	case "pylon":
		return visitor.VisitPylon(v.Pylon)
	case "razorpay":
		return visitor.VisitRazorpay(v.Razorpay)
	case "repay":
		return visitor.VisitRepay(v.Repay)
	case "square":
		return visitor.VisitSquare(v.Square)
	case "solidgate":
		return visitor.VisitSolidgate(v.Solidgate)
	case "trello":
		return visitor.VisitTrello(v.Trello)
	case "ebay":
		return visitor.VisitEbay(v.Ebay)
	case "telnyx":
		return visitor.VisitTelnyx(v.Telnyx)
	case "discord":
		return visitor.VisitDiscord(v.Discord)
	case "tokenio":
		return visitor.VisitTokenio(v.Tokenio)
	case "fiserv":
		return visitor.VisitFiserv(v.Fiserv)
	case "bondsmith":
		return visitor.VisitBondsmith(v.Bondsmith)
	case "vercel_log_drains":
		return visitor.VisitVercelLogDrains(v.VercelLogDrains)
	case "vercel":
		return visitor.VisitVercel(v.Vercel)
	case "tebex":
		return visitor.VisitTebex(v.Tebex)
	case "slack":
		return visitor.VisitSlack(v.Slack)
	case "mailchimp":
		return visitor.VisitMailchimp(v.Mailchimp)
	case "paddle":
		return visitor.VisitPaddle(v.Paddle)
	case "paypal":
		return visitor.VisitPaypal(v.Paypal)
	case "treezor":
		return visitor.VisitTreezor(v.Treezor)
	case "praxis":
		return visitor.VisitPraxis(v.Praxis)
	case "customerio":
		return visitor.VisitCustomerio(v.Customerio)
	case "facebook":
		return visitor.VisitFacebook(v.Facebook)
	case "whatsapp":
		return visitor.VisitWhatsapp(v.Whatsapp)
	case "replicate":
		return visitor.VisitReplicate(v.Replicate)
	case "tiktok":
		return visitor.VisitTiktok(v.Tiktok)
	case "airwallex":
		return visitor.VisitAirwallex(v.Airwallex)
	case "zendesk":
		return visitor.VisitZendesk(v.Zendesk)
	case "upollo":
		return visitor.VisitUpollo(v.Upollo)
	}
}

type VerificationCourier struct {
	Configs *TypeCourierConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationCourier) GetConfigs() *TypeCourierConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationCourier) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationCourier) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationCourier
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationCourier(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationCourier) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationCustomerIo struct {
	Configs *TypeCustomerIoConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationCustomerIo) GetConfigs() *TypeCustomerIoConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationCustomerIo) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationCustomerIo) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationCustomerIo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationCustomerIo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationCustomerIo) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationDiscord struct {
	Configs *TypeDiscordConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationDiscord) GetConfigs() *TypeDiscordConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationDiscord) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationDiscord) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationDiscord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationDiscord(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationDiscord) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationEbay struct {
	Configs *TypeEbayConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationEbay) GetConfigs() *TypeEbayConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationEbay) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationEbay) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationEbay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationEbay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationEbay) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationEnode struct {
	Configs *TypeEnodeConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationEnode) GetConfigs() *TypeEnodeConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationEnode) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationEnode) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationEnode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationEnode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationEnode) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationFacebook struct {
	Configs *TypeFacebookConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationFacebook) GetConfigs() *TypeFacebookConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationFacebook) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationFacebook) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationFacebook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationFacebook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationFacebook) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationFavro struct {
	Configs *TypeFavroConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationFavro) GetConfigs() *TypeFavroConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationFavro) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationFavro) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationFavro
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationFavro(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationFavro) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationFiserv struct {
	Configs *TypeFiservConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationFiserv) GetConfigs() *TypeFiservConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationFiserv) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationFiserv) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationFiserv
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationFiserv(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationFiserv) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationFrontApp struct {
	Configs *TypeFrontAppConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationFrontApp) GetConfigs() *TypeFrontAppConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationFrontApp) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationFrontApp) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationFrontApp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationFrontApp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationFrontApp) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationGitHub struct {
	Configs *TypeGitHubConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationGitHub) GetConfigs() *TypeGitHubConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationGitHub) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationGitHub) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationGitHub
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationGitHub(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationGitHub) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationGitLab struct {
	Configs *TypeGitLabConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationGitLab) GetConfigs() *TypeGitLabConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationGitLab) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationGitLab) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationGitLab
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationGitLab(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationGitLab) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationHmac struct {
	Configs *TypeHmacConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationHmac) GetConfigs() *TypeHmacConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationHmac) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationHmac) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationHmac
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationHmac(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationHmac) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationHttp struct {
	Configs *TypeHttpConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationHttp) GetConfigs() *TypeHttpConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationHttp) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationHttp) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationHttp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationHttp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationHttp) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationHubspot struct {
	Configs *TypeHubspotConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationHubspot) GetConfigs() *TypeHubspotConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationHubspot) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationHubspot) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationHubspot
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationHubspot(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationHubspot) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationLinear struct {
	Configs *TypeLinearConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationLinear) GetConfigs() *TypeLinearConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationLinear) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationLinear) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationLinear
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationLinear(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationLinear) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationMailchimp struct {
	Configs *TypeMailchimpConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationMailchimp) GetConfigs() *TypeMailchimpConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationMailchimp) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationMailchimp) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationMailchimp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationMailchimp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationMailchimp) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationMailgun struct {
	Configs *TypeMailgunConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationMailgun) GetConfigs() *TypeMailgunConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationMailgun) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationMailgun) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationMailgun
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationMailgun(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationMailgun) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationNmiPaymentGateway struct {
	Configs *TypeNmiPaymentGatewayConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationNmiPaymentGateway) GetConfigs() *TypeNmiPaymentGatewayConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationNmiPaymentGateway) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationNmiPaymentGateway) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationNmiPaymentGateway
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationNmiPaymentGateway(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationNmiPaymentGateway) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationOrb struct {
	Configs *TypeOrbConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationOrb) GetConfigs() *TypeOrbConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationOrb) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationOrb) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationOrb
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationOrb(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationOrb) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationOura struct {
	Configs *TypeOuraConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationOura) GetConfigs() *TypeOuraConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationOura) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationOura) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationOura
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationOura(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationOura) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationPaddle struct {
	Configs *TypePaddleConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationPaddle) GetConfigs() *TypePaddleConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationPaddle) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationPaddle) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationPaddle
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationPaddle(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationPaddle) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationPaypal struct {
	Configs *TypePaypalConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationPaypal) GetConfigs() *TypePaypalConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationPaypal) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationPaypal) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationPaypal
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationPaypal(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationPaypal) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationPersona struct {
	Configs *TypePersonaConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationPersona) GetConfigs() *TypePersonaConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationPersona) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationPersona) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationPersona
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationPersona(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationPersona) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationPipedrive struct {
	Configs *TypePipedriveConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationPipedrive) GetConfigs() *TypePipedriveConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationPipedrive) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationPipedrive) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationPipedrive
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationPipedrive(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationPipedrive) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationPostmark struct {
	Configs *TypePostmarkConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationPostmark) GetConfigs() *TypePostmarkConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationPostmark) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationPostmark) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationPostmark
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationPostmark(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationPostmark) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationPraxis struct {
	Configs *TypePraxisConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationPraxis) GetConfigs() *TypePraxisConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationPraxis) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationPraxis) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationPraxis
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationPraxis(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationPraxis) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationPropertyFinder struct {
	Configs *TypePropertyFinderConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationPropertyFinder) GetConfigs() *TypePropertyFinderConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationPropertyFinder) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationPropertyFinder) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationPropertyFinder
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationPropertyFinder(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationPropertyFinder) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationPylon struct {
	Configs *TypePylonConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationPylon) GetConfigs() *TypePylonConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationPylon) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationPylon) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationPylon
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationPylon(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationPylon) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationRazorpay struct {
	Configs *TypeRazorpayConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationRazorpay) GetConfigs() *TypeRazorpayConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationRazorpay) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationRazorpay) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationRazorpay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationRazorpay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationRazorpay) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationRecharge struct {
	Configs *TypeRechargeConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationRecharge) GetConfigs() *TypeRechargeConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationRecharge) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationRecharge) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationRecharge
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationRecharge(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationRecharge) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationRepay struct {
	Configs *TypeRepayConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationRepay) GetConfigs() *TypeRepayConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationRepay) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationRepay) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationRepay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationRepay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationRepay) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationReplicate struct {
	Configs *TypeReplicateConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationReplicate) GetConfigs() *TypeReplicateConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationReplicate) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationReplicate) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationReplicate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationReplicate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationReplicate) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationSanity struct {
	Configs *TypeSanityConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationSanity) GetConfigs() *TypeSanityConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationSanity) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationSanity) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationSanity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationSanity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationSanity) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationSendgrid struct {
	Configs *TypeSendgridConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationSendgrid) GetConfigs() *TypeSendgridConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationSendgrid) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationSendgrid) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationSendgrid
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationSendgrid(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationSendgrid) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationShopify struct {
	Configs *TypeShopifyConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationShopify) GetConfigs() *TypeShopifyConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationShopify) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationShopify) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationShopify
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationShopify(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationShopify) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationShopline struct {
	Configs *TypeShoplineConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationShopline) GetConfigs() *TypeShoplineConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationShopline) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationShopline) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationShopline
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationShopline(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationShopline) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationSlack struct {
	Configs *TypeSlackConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationSlack) GetConfigs() *TypeSlackConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationSlack) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationSlack) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationSlack
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationSlack(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationSlack) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationSolidgate struct {
	Configs *TypeSolidgateConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationSolidgate) GetConfigs() *TypeSolidgateConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationSolidgate) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationSolidgate) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationSolidgate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationSolidgate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationSolidgate) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationSquare struct {
	Configs *TypeSquareConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationSquare) GetConfigs() *TypeSquareConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationSquare) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationSquare) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationSquare
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationSquare(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationSquare) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationStripe struct {
	Configs *TypeStripeConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationStripe) GetConfigs() *TypeStripeConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationStripe) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationStripe) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationStripe
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationStripe(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationStripe) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationSvix struct {
	Configs *TypeSvixConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationSvix) GetConfigs() *TypeSvixConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationSvix) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationSvix) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationSvix
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationSvix(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationSvix) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationSynctera struct {
	Configs *TypeSyncteraConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationSynctera) GetConfigs() *TypeSyncteraConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationSynctera) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationSynctera) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationSynctera
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationSynctera(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationSynctera) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationTebex struct {
	Configs *TypeTebexConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationTebex) GetConfigs() *TypeTebexConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationTebex) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationTebex) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationTebex
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationTebex(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationTebex) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationTelnyx struct {
	Configs *TypeTelnyxConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationTelnyx) GetConfigs() *TypeTelnyxConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationTelnyx) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationTelnyx) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationTelnyx
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationTelnyx(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationTelnyx) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationTikTok struct {
	Configs *TypeTikTokConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationTikTok) GetConfigs() *TypeTikTokConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationTikTok) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationTikTok) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationTikTok
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationTikTok(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationTikTok) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationTokenIo struct {
	Configs *TypeTokenIoConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationTokenIo) GetConfigs() *TypeTokenIoConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationTokenIo) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationTokenIo) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationTokenIo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationTokenIo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationTokenIo) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationTreezor struct {
	Configs *TypeTreezorConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationTreezor) GetConfigs() *TypeTreezorConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationTreezor) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationTreezor) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationTreezor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationTreezor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationTreezor) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationTrello struct {
	Configs *TypeTrelloConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationTrello) GetConfigs() *TypeTrelloConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationTrello) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationTrello) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationTrello
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationTrello(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationTrello) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationTwilio struct {
	Configs *TypeTwilioConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationTwilio) GetConfigs() *TypeTwilioConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationTwilio) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationTwilio) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationTwilio
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationTwilio(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationTwilio) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationTwitch struct {
	Configs *TypeTwitchConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationTwitch) GetConfigs() *TypeTwitchConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationTwitch) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationTwitch) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationTwitch
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationTwitch(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationTwitch) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationTwitter struct {
	Configs *TypeTwitterConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationTwitter) GetConfigs() *TypeTwitterConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationTwitter) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationTwitter) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationTwitter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationTwitter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationTwitter) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationTypeform struct {
	Configs *TypeTypeformConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationTypeform) GetConfigs() *TypeTypeformConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationTypeform) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationTypeform) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationTypeform
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationTypeform(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationTypeform) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationUpollo struct {
	Configs *TypeUpolloConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationUpollo) GetConfigs() *TypeUpolloConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationUpollo) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationUpollo) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationUpollo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationUpollo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationUpollo) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationVercelLogDrains struct {
	Configs *TypeVercelLogDrainsConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationVercelLogDrains) GetConfigs() *TypeVercelLogDrainsConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationVercelLogDrains) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationVercelLogDrains) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationVercelLogDrains
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationVercelLogDrains(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationVercelLogDrains) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationVercelWebhooks struct {
	Configs *TypeVercelWebhooksConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationVercelWebhooks) GetConfigs() *TypeVercelWebhooksConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationVercelWebhooks) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationVercelWebhooks) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationVercelWebhooks
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationVercelWebhooks(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationVercelWebhooks) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationWebhook struct {
	Configs *TypeWebhookConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationWebhook) GetConfigs() *TypeWebhookConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationWebhook) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationWebhook) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationWebhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationWebhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationWebhook) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationWhatsApp struct {
	Configs *TypeWhatsAppConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationWhatsApp) GetConfigs() *TypeWhatsAppConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationWhatsApp) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationWhatsApp) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationWhatsApp
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationWhatsApp(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationWhatsApp) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationWix struct {
	Configs *TypeWixConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationWix) GetConfigs() *TypeWixConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationWix) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationWix) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationWix
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationWix(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationWix) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationWooCommerce struct {
	Configs *TypeWooCommerceConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationWooCommerce) GetConfigs() *TypeWooCommerceConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationWooCommerce) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationWooCommerce) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationWooCommerce
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationWooCommerce(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationWooCommerce) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationWorkOs struct {
	Configs *TypeWorkOsConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationWorkOs) GetConfigs() *TypeWorkOsConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationWorkOs) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationWorkOs) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationWorkOs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationWorkOs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationWorkOs) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationXero struct {
	Configs *TypeXeroConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationXero) GetConfigs() *TypeXeroConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationXero) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationXero) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationXero
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationXero(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationXero) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationZendesk struct {
	Configs *TypeZendeskConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationZendesk) GetConfigs() *TypeZendeskConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationZendesk) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationZendesk) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationZendesk
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationZendesk(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationZendesk) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationZoom struct {
	Configs *TypeZoomConfig `json:"configs,omitempty" url:"configs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationZoom) GetConfigs() *TypeZoomConfig {
	if v == nil {
		return nil
	}
	return v.Configs
}

func (v *VerificationZoom) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationZoom) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationZoom
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationZoom(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationZoom) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
