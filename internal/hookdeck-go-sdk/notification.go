// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/hookdeck/hookdeck-go-sdk/core"
	internal "github.com/hookdeck/hookdeck-go-sdk/internal"
)

type ToggleWebhookNotifications struct {
	Enabled  bool          `json:"enabled" url:"enabled"`
	Topics   []TopicsValue `json:"topics,omitempty" url:"topics,omitempty"`
	SourceId string        `json:"source_id" url:"source_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ToggleWebhookNotifications) GetEnabled() bool {
	if t == nil {
		return false
	}
	return t.Enabled
}

func (t *ToggleWebhookNotifications) GetTopics() []TopicsValue {
	if t == nil {
		return nil
	}
	return t.Topics
}

func (t *ToggleWebhookNotifications) GetSourceId() string {
	if t == nil {
		return ""
	}
	return t.SourceId
}

func (t *ToggleWebhookNotifications) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ToggleWebhookNotifications) UnmarshalJSON(data []byte) error {
	type unmarshaler ToggleWebhookNotifications
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ToggleWebhookNotifications(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ToggleWebhookNotifications) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Supported topics
type TopicsValue string

const (
	TopicsValueIssueOpened             TopicsValue = "issue.opened"
	TopicsValueIssueUpdated            TopicsValue = "issue.updated"
	TopicsValueDeprecatedAttemptFailed TopicsValue = "deprecated.attempt-failed"
	TopicsValueEventSuccessful         TopicsValue = "event.successful"
)

func NewTopicsValueFromString(s string) (TopicsValue, error) {
	switch s {
	case "issue.opened":
		return TopicsValueIssueOpened, nil
	case "issue.updated":
		return TopicsValueIssueUpdated, nil
	case "deprecated.attempt-failed":
		return TopicsValueDeprecatedAttemptFailed, nil
	case "event.successful":
		return TopicsValueEventSuccessful, nil
	}
	var t TopicsValue
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TopicsValue) Ptr() *TopicsValue {
	return &t
}

type NotificationUpdateRequest struct {
	// Enable or disable webhook notifications on the project
	Enabled *core.Optional[bool] `json:"enabled,omitempty" url:"-"`
	// List of topics to send notifications for
	Topics *core.Optional[[]TopicsValue] `json:"topics,omitempty" url:"-"`
	// The Hookdeck Source to send the webhook to
	SourceId *core.Optional[string] `json:"source_id,omitempty" url:"-"`
}
