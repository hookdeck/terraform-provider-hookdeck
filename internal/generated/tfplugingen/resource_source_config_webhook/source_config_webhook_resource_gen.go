// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_source_config_webhook

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func SourceConfigWebhookResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"auth_api_key": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"api_key": schema.StringAttribute{
						Required: true,
					},
					"header_key": schema.StringAttribute{
						Required: true,
					},
				},
				CustomType: AuthApiKeyType{
					ObjectType: types.ObjectType{
						AttrTypes: AuthApiKeyValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"auth_basic": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"password": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
					"username": schema.StringAttribute{
						Optional: true,
						Computed: true,
					},
				},
				CustomType: AuthBasicType{
					ObjectType: types.ObjectType{
						AttrTypes: AuthBasicValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"auth_hmac": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"algorithm": schema.StringAttribute{
						Required: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"sha1",
								"sha256",
								"sha512",
								"md5",
							),
						},
					},
					"encoding": schema.StringAttribute{
						Required: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"base64",
								"base64url",
								"hex",
							),
						},
					},
					"header_key": schema.StringAttribute{
						Required: true,
					},
					"webhook_secret_key": schema.StringAttribute{
						Required: true,
					},
				},
				CustomType: AuthHmacType{
					ObjectType: types.ObjectType{
						AttrTypes: AuthHmacValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"auth_type": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"HMAC",
						"BASIC_AUTH",
						"API_KEY",
					),
				},
			},
			"source_id": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

type SourceConfigWebhookModel struct {
	AuthApiKey AuthApiKeyValue `tfsdk:"auth_api_key"`
	AuthBasic  AuthBasicValue  `tfsdk:"auth_basic"`
	AuthHmac   AuthHmacValue   `tfsdk:"auth_hmac"`
	AuthType   types.String    `tfsdk:"auth_type"`
	SourceId   types.String    `tfsdk:"source_id"`
}

var _ basetypes.ObjectTypable = AuthApiKeyType{}

type AuthApiKeyType struct {
	basetypes.ObjectType
}

func (t AuthApiKeyType) Equal(o attr.Type) bool {
	other, ok := o.(AuthApiKeyType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AuthApiKeyType) String() string {
	return "AuthApiKeyType"
}

func (t AuthApiKeyType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	apiKeyAttribute, ok := attributes["api_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_key is missing from object`)

		return nil, diags
	}

	apiKeyVal, ok := apiKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_key expected to be basetypes.StringValue, was: %T`, apiKeyAttribute))
	}

	headerKeyAttribute, ok := attributes["header_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`header_key is missing from object`)

		return nil, diags
	}

	headerKeyVal, ok := headerKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`header_key expected to be basetypes.StringValue, was: %T`, headerKeyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AuthApiKeyValue{
		ApiKey:    apiKeyVal,
		HeaderKey: headerKeyVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewAuthApiKeyValueNull() AuthApiKeyValue {
	return AuthApiKeyValue{
		state: attr.ValueStateNull,
	}
}

func NewAuthApiKeyValueUnknown() AuthApiKeyValue {
	return AuthApiKeyValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAuthApiKeyValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AuthApiKeyValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AuthApiKeyValue Attribute Value",
				"While creating a AuthApiKeyValue value, a missing attribute value was detected. "+
					"A AuthApiKeyValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuthApiKeyValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AuthApiKeyValue Attribute Type",
				"While creating a AuthApiKeyValue value, an invalid attribute value was detected. "+
					"A AuthApiKeyValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuthApiKeyValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AuthApiKeyValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AuthApiKeyValue Attribute Value",
				"While creating a AuthApiKeyValue value, an extra attribute value was detected. "+
					"A AuthApiKeyValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AuthApiKeyValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAuthApiKeyValueUnknown(), diags
	}

	apiKeyAttribute, ok := attributes["api_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_key is missing from object`)

		return NewAuthApiKeyValueUnknown(), diags
	}

	apiKeyVal, ok := apiKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_key expected to be basetypes.StringValue, was: %T`, apiKeyAttribute))
	}

	headerKeyAttribute, ok := attributes["header_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`header_key is missing from object`)

		return NewAuthApiKeyValueUnknown(), diags
	}

	headerKeyVal, ok := headerKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`header_key expected to be basetypes.StringValue, was: %T`, headerKeyAttribute))
	}

	if diags.HasError() {
		return NewAuthApiKeyValueUnknown(), diags
	}

	return AuthApiKeyValue{
		ApiKey:    apiKeyVal,
		HeaderKey: headerKeyVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewAuthApiKeyValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AuthApiKeyValue {
	object, diags := NewAuthApiKeyValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAuthApiKeyValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AuthApiKeyType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAuthApiKeyValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAuthApiKeyValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAuthApiKeyValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAuthApiKeyValueMust(AuthApiKeyValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AuthApiKeyType) ValueType(ctx context.Context) attr.Value {
	return AuthApiKeyValue{}
}

var _ basetypes.ObjectValuable = AuthApiKeyValue{}

type AuthApiKeyValue struct {
	ApiKey    basetypes.StringValue `tfsdk:"api_key"`
	HeaderKey basetypes.StringValue `tfsdk:"header_key"`
	state     attr.ValueState
}

func (v AuthApiKeyValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["api_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["header_key"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.ApiKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["api_key"] = val

		val, err = v.HeaderKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["header_key"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AuthApiKeyValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AuthApiKeyValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AuthApiKeyValue) String() string {
	return "AuthApiKeyValue"
}

func (v AuthApiKeyValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"api_key":    basetypes.StringType{},
		"header_key": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"api_key":    v.ApiKey,
			"header_key": v.HeaderKey,
		})

	return objVal, diags
}

func (v AuthApiKeyValue) Equal(o attr.Value) bool {
	other, ok := o.(AuthApiKeyValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ApiKey.Equal(other.ApiKey) {
		return false
	}

	if !v.HeaderKey.Equal(other.HeaderKey) {
		return false
	}

	return true
}

func (v AuthApiKeyValue) Type(ctx context.Context) attr.Type {
	return AuthApiKeyType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AuthApiKeyValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"api_key":    basetypes.StringType{},
		"header_key": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AuthBasicType{}

type AuthBasicType struct {
	basetypes.ObjectType
}

func (t AuthBasicType) Equal(o attr.Type) bool {
	other, ok := o.(AuthBasicType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AuthBasicType) String() string {
	return "AuthBasicType"
}

func (t AuthBasicType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AuthBasicValue{
		Password: passwordVal,
		Username: usernameVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewAuthBasicValueNull() AuthBasicValue {
	return AuthBasicValue{
		state: attr.ValueStateNull,
	}
}

func NewAuthBasicValueUnknown() AuthBasicValue {
	return AuthBasicValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAuthBasicValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AuthBasicValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AuthBasicValue Attribute Value",
				"While creating a AuthBasicValue value, a missing attribute value was detected. "+
					"A AuthBasicValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuthBasicValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AuthBasicValue Attribute Type",
				"While creating a AuthBasicValue value, an invalid attribute value was detected. "+
					"A AuthBasicValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuthBasicValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AuthBasicValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AuthBasicValue Attribute Value",
				"While creating a AuthBasicValue value, an extra attribute value was detected. "+
					"A AuthBasicValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AuthBasicValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAuthBasicValueUnknown(), diags
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewAuthBasicValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewAuthBasicValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return NewAuthBasicValueUnknown(), diags
	}

	return AuthBasicValue{
		Password: passwordVal,
		Username: usernameVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewAuthBasicValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AuthBasicValue {
	object, diags := NewAuthBasicValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAuthBasicValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AuthBasicType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAuthBasicValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAuthBasicValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAuthBasicValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAuthBasicValueMust(AuthBasicValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AuthBasicType) ValueType(ctx context.Context) attr.Value {
	return AuthBasicValue{}
}

var _ basetypes.ObjectValuable = AuthBasicValue{}

type AuthBasicValue struct {
	Password basetypes.StringValue `tfsdk:"password"`
	Username basetypes.StringValue `tfsdk:"username"`
	state    attr.ValueState
}

func (v AuthBasicValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AuthBasicValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AuthBasicValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AuthBasicValue) String() string {
	return "AuthBasicValue"
}

func (v AuthBasicValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"password": basetypes.StringType{},
		"username": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"password": v.Password,
			"username": v.Username,
		})

	return objVal, diags
}

func (v AuthBasicValue) Equal(o attr.Value) bool {
	other, ok := o.(AuthBasicValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	return true
}

func (v AuthBasicValue) Type(ctx context.Context) attr.Type {
	return AuthBasicType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AuthBasicValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"password": basetypes.StringType{},
		"username": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AuthHmacType{}

type AuthHmacType struct {
	basetypes.ObjectType
}

func (t AuthHmacType) Equal(o attr.Type) bool {
	other, ok := o.(AuthHmacType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AuthHmacType) String() string {
	return "AuthHmacType"
}

func (t AuthHmacType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	algorithmAttribute, ok := attributes["algorithm"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`algorithm is missing from object`)

		return nil, diags
	}

	algorithmVal, ok := algorithmAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`algorithm expected to be basetypes.StringValue, was: %T`, algorithmAttribute))
	}

	encodingAttribute, ok := attributes["encoding"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`encoding is missing from object`)

		return nil, diags
	}

	encodingVal, ok := encodingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`encoding expected to be basetypes.StringValue, was: %T`, encodingAttribute))
	}

	headerKeyAttribute, ok := attributes["header_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`header_key is missing from object`)

		return nil, diags
	}

	headerKeyVal, ok := headerKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`header_key expected to be basetypes.StringValue, was: %T`, headerKeyAttribute))
	}

	webhookSecretKeyAttribute, ok := attributes["webhook_secret_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`webhook_secret_key is missing from object`)

		return nil, diags
	}

	webhookSecretKeyVal, ok := webhookSecretKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`webhook_secret_key expected to be basetypes.StringValue, was: %T`, webhookSecretKeyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AuthHmacValue{
		Algorithm:        algorithmVal,
		Encoding:         encodingVal,
		HeaderKey:        headerKeyVal,
		WebhookSecretKey: webhookSecretKeyVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAuthHmacValueNull() AuthHmacValue {
	return AuthHmacValue{
		state: attr.ValueStateNull,
	}
}

func NewAuthHmacValueUnknown() AuthHmacValue {
	return AuthHmacValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAuthHmacValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AuthHmacValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AuthHmacValue Attribute Value",
				"While creating a AuthHmacValue value, a missing attribute value was detected. "+
					"A AuthHmacValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuthHmacValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AuthHmacValue Attribute Type",
				"While creating a AuthHmacValue value, an invalid attribute value was detected. "+
					"A AuthHmacValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AuthHmacValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AuthHmacValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AuthHmacValue Attribute Value",
				"While creating a AuthHmacValue value, an extra attribute value was detected. "+
					"A AuthHmacValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AuthHmacValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAuthHmacValueUnknown(), diags
	}

	algorithmAttribute, ok := attributes["algorithm"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`algorithm is missing from object`)

		return NewAuthHmacValueUnknown(), diags
	}

	algorithmVal, ok := algorithmAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`algorithm expected to be basetypes.StringValue, was: %T`, algorithmAttribute))
	}

	encodingAttribute, ok := attributes["encoding"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`encoding is missing from object`)

		return NewAuthHmacValueUnknown(), diags
	}

	encodingVal, ok := encodingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`encoding expected to be basetypes.StringValue, was: %T`, encodingAttribute))
	}

	headerKeyAttribute, ok := attributes["header_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`header_key is missing from object`)

		return NewAuthHmacValueUnknown(), diags
	}

	headerKeyVal, ok := headerKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`header_key expected to be basetypes.StringValue, was: %T`, headerKeyAttribute))
	}

	webhookSecretKeyAttribute, ok := attributes["webhook_secret_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`webhook_secret_key is missing from object`)

		return NewAuthHmacValueUnknown(), diags
	}

	webhookSecretKeyVal, ok := webhookSecretKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`webhook_secret_key expected to be basetypes.StringValue, was: %T`, webhookSecretKeyAttribute))
	}

	if diags.HasError() {
		return NewAuthHmacValueUnknown(), diags
	}

	return AuthHmacValue{
		Algorithm:        algorithmVal,
		Encoding:         encodingVal,
		HeaderKey:        headerKeyVal,
		WebhookSecretKey: webhookSecretKeyVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewAuthHmacValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AuthHmacValue {
	object, diags := NewAuthHmacValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAuthHmacValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AuthHmacType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAuthHmacValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAuthHmacValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAuthHmacValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAuthHmacValueMust(AuthHmacValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AuthHmacType) ValueType(ctx context.Context) attr.Value {
	return AuthHmacValue{}
}

var _ basetypes.ObjectValuable = AuthHmacValue{}

type AuthHmacValue struct {
	Algorithm        basetypes.StringValue `tfsdk:"algorithm"`
	Encoding         basetypes.StringValue `tfsdk:"encoding"`
	HeaderKey        basetypes.StringValue `tfsdk:"header_key"`
	WebhookSecretKey basetypes.StringValue `tfsdk:"webhook_secret_key"`
	state            attr.ValueState
}

func (v AuthHmacValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["algorithm"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["encoding"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["header_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["webhook_secret_key"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Algorithm.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["algorithm"] = val

		val, err = v.Encoding.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["encoding"] = val

		val, err = v.HeaderKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["header_key"] = val

		val, err = v.WebhookSecretKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["webhook_secret_key"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AuthHmacValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AuthHmacValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AuthHmacValue) String() string {
	return "AuthHmacValue"
}

func (v AuthHmacValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"algorithm":          basetypes.StringType{},
		"encoding":           basetypes.StringType{},
		"header_key":         basetypes.StringType{},
		"webhook_secret_key": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"algorithm":          v.Algorithm,
			"encoding":           v.Encoding,
			"header_key":         v.HeaderKey,
			"webhook_secret_key": v.WebhookSecretKey,
		})

	return objVal, diags
}

func (v AuthHmacValue) Equal(o attr.Value) bool {
	other, ok := o.(AuthHmacValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Algorithm.Equal(other.Algorithm) {
		return false
	}

	if !v.Encoding.Equal(other.Encoding) {
		return false
	}

	if !v.HeaderKey.Equal(other.HeaderKey) {
		return false
	}

	if !v.WebhookSecretKey.Equal(other.WebhookSecretKey) {
		return false
	}

	return true
}

func (v AuthHmacValue) Type(ctx context.Context) attr.Type {
	return AuthHmacType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AuthHmacValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"algorithm":          basetypes.StringType{},
		"encoding":           basetypes.StringType{},
		"header_key":         basetypes.StringType{},
		"webhook_secret_key": basetypes.StringType{},
	}
}
