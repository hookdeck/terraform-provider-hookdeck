// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_source

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func SourceResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"ebay": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{},
						CustomType: EbayType{
							ObjectType: types.ObjectType{
								AttrTypes: EbayValue{}.AttributeTypes(ctx),
							},
						},
						Optional: true,
					},
					"http": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"allowed_http_methods": schema.ListAttribute{
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(
										stringvalidator.OneOf(
											"GET",
											"POST",
											"PUT",
											"PATCH",
											"DELETE",
										),
									),
								},
								Default: listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{types.StringValue("POST"), types.StringValue("PUT"), types.StringValue("PATCH"), types.StringValue("DELETE")})),
							},
							"custom_response": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"body": schema.StringAttribute{
										Required: true,
									},
									"content_type": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"json",
												"text",
												"xml",
											),
										},
									},
								},
								CustomType: CustomResponseType{
									ObjectType: types.ObjectType{
										AttrTypes: CustomResponseValue{}.AttributeTypes(ctx),
									},
								},
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.UseStateForUnknown(),
								},
							},
						},
						CustomType: HttpType{
							ObjectType: types.ObjectType{
								AttrTypes: HttpValue{}.AttributeTypes(ctx),
							},
						},
						Optional: true,
					},
				},
				CustomType: ConfigType{
					ObjectType: types.ObjectType{
						AttrTypes: ConfigValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"description": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"disabled_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"team_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"url": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

type SourceModel struct {
	Config      ConfigValue  `tfsdk:"config"`
	CreatedAt   types.String `tfsdk:"created_at"`
	Description types.String `tfsdk:"description"`
	DisabledAt  types.String `tfsdk:"disabled_at"`
	Id          types.String `tfsdk:"id"`
	Name        types.String `tfsdk:"name"`
	TeamId      types.String `tfsdk:"team_id"`
	UpdatedAt   types.String `tfsdk:"updated_at"`
	Url         types.String `tfsdk:"url"`
}

var _ basetypes.ObjectTypable = ConfigType{}

type ConfigType struct {
	basetypes.ObjectType
}

func (t ConfigType) Equal(o attr.Type) bool {
	other, ok := o.(ConfigType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ConfigType) String() string {
	return "ConfigType"
}

func (t ConfigType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ebayAttribute, ok := attributes["ebay"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ebay is missing from object`)

		return nil, diags
	}

	ebayVal, ok := ebayAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ebay expected to be basetypes.ObjectValue, was: %T`, ebayAttribute))
	}

	httpAttribute, ok := attributes["http"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`http is missing from object`)

		return nil, diags
	}

	httpVal, ok := httpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`http expected to be basetypes.ObjectValue, was: %T`, httpAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ConfigValue{
		Ebay:  ebayVal,
		Http:  httpVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewConfigValueNull() ConfigValue {
	return ConfigValue{
		state: attr.ValueStateNull,
	}
}

func NewConfigValueUnknown() ConfigValue {
	return ConfigValue{
		state: attr.ValueStateUnknown,
	}
}

func NewConfigValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ConfigValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ConfigValue Attribute Value",
				"While creating a ConfigValue value, a missing attribute value was detected. "+
					"A ConfigValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConfigValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ConfigValue Attribute Type",
				"While creating a ConfigValue value, an invalid attribute value was detected. "+
					"A ConfigValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConfigValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ConfigValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ConfigValue Attribute Value",
				"While creating a ConfigValue value, an extra attribute value was detected. "+
					"A ConfigValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ConfigValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewConfigValueUnknown(), diags
	}

	ebayAttribute, ok := attributes["ebay"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ebay is missing from object`)

		return NewConfigValueUnknown(), diags
	}

	ebayVal, ok := ebayAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ebay expected to be basetypes.ObjectValue, was: %T`, ebayAttribute))
	}

	httpAttribute, ok := attributes["http"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`http is missing from object`)

		return NewConfigValueUnknown(), diags
	}

	httpVal, ok := httpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`http expected to be basetypes.ObjectValue, was: %T`, httpAttribute))
	}

	if diags.HasError() {
		return NewConfigValueUnknown(), diags
	}

	return ConfigValue{
		Ebay:  ebayVal,
		Http:  httpVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewConfigValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ConfigValue {
	object, diags := NewConfigValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewConfigValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ConfigType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewConfigValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewConfigValueUnknown(), nil
	}

	if in.IsNull() {
		return NewConfigValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewConfigValueMust(ConfigValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ConfigType) ValueType(ctx context.Context) attr.Value {
	return ConfigValue{}
}

var _ basetypes.ObjectValuable = ConfigValue{}

type ConfigValue struct {
	Ebay  basetypes.ObjectValue `tfsdk:"ebay"`
	Http  basetypes.ObjectValue `tfsdk:"http"`
	state attr.ValueState
}

func (v ConfigValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["ebay"] = basetypes.ObjectType{
		AttrTypes: EbayValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["http"] = basetypes.ObjectType{
		AttrTypes: HttpValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Ebay.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ebay"] = val

		val, err = v.Http.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["http"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ConfigValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ConfigValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ConfigValue) String() string {
	return "ConfigValue"
}

func (v ConfigValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var ebay basetypes.ObjectValue

	if v.Ebay.IsNull() {
		ebay = types.ObjectNull(
			EbayValue{}.AttributeTypes(ctx),
		)
	}

	if v.Ebay.IsUnknown() {
		ebay = types.ObjectUnknown(
			EbayValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Ebay.IsNull() && !v.Ebay.IsUnknown() {
		ebay = types.ObjectValueMust(
			EbayValue{}.AttributeTypes(ctx),
			v.Ebay.Attributes(),
		)
	}

	var http basetypes.ObjectValue

	if v.Http.IsNull() {
		http = types.ObjectNull(
			HttpValue{}.AttributeTypes(ctx),
		)
	}

	if v.Http.IsUnknown() {
		http = types.ObjectUnknown(
			HttpValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Http.IsNull() && !v.Http.IsUnknown() {
		http = types.ObjectValueMust(
			HttpValue{}.AttributeTypes(ctx),
			v.Http.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"ebay": basetypes.ObjectType{
			AttrTypes: EbayValue{}.AttributeTypes(ctx),
		},
		"http": basetypes.ObjectType{
			AttrTypes: HttpValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"ebay": ebay,
			"http": http,
		})

	return objVal, diags
}

func (v ConfigValue) Equal(o attr.Value) bool {
	other, ok := o.(ConfigValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Ebay.Equal(other.Ebay) {
		return false
	}

	if !v.Http.Equal(other.Http) {
		return false
	}

	return true
}

func (v ConfigValue) Type(ctx context.Context) attr.Type {
	return ConfigType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ConfigValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ebay": basetypes.ObjectType{
			AttrTypes: EbayValue{}.AttributeTypes(ctx),
		},
		"http": basetypes.ObjectType{
			AttrTypes: HttpValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = EbayType{}

type EbayType struct {
	basetypes.ObjectType
}

func (t EbayType) Equal(o attr.Type) bool {
	other, ok := o.(EbayType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t EbayType) String() string {
	return "EbayType"
}

func (t EbayType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return EbayValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewEbayValueNull() EbayValue {
	return EbayValue{
		state: attr.ValueStateNull,
	}
}

func NewEbayValueUnknown() EbayValue {
	return EbayValue{
		state: attr.ValueStateUnknown,
	}
}

func NewEbayValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (EbayValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing EbayValue Attribute Value",
				"While creating a EbayValue value, a missing attribute value was detected. "+
					"A EbayValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EbayValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid EbayValue Attribute Type",
				"While creating a EbayValue value, an invalid attribute value was detected. "+
					"A EbayValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EbayValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("EbayValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra EbayValue Attribute Value",
				"While creating a EbayValue value, an extra attribute value was detected. "+
					"A EbayValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra EbayValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewEbayValueUnknown(), diags
	}

	if diags.HasError() {
		return NewEbayValueUnknown(), diags
	}

	return EbayValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewEbayValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) EbayValue {
	object, diags := NewEbayValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewEbayValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t EbayType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewEbayValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewEbayValueUnknown(), nil
	}

	if in.IsNull() {
		return NewEbayValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewEbayValueMust(EbayValue{}.AttributeTypes(ctx), attributes), nil
}

func (t EbayType) ValueType(ctx context.Context) attr.Value {
	return EbayValue{}
}

var _ basetypes.ObjectValuable = EbayValue{}

type EbayValue struct {
	state attr.ValueState
}

func (v EbayValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v EbayValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v EbayValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v EbayValue) String() string {
	return "EbayValue"
}

func (v EbayValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v EbayValue) Equal(o attr.Value) bool {
	other, ok := o.(EbayValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v EbayValue) Type(ctx context.Context) attr.Type {
	return EbayType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v EbayValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

var _ basetypes.ObjectTypable = HttpType{}

type HttpType struct {
	basetypes.ObjectType
}

func (t HttpType) Equal(o attr.Type) bool {
	other, ok := o.(HttpType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t HttpType) String() string {
	return "HttpType"
}

func (t HttpType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	allowedHttpMethodsAttribute, ok := attributes["allowed_http_methods"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allowed_http_methods is missing from object`)

		return nil, diags
	}

	allowedHttpMethodsVal, ok := allowedHttpMethodsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allowed_http_methods expected to be basetypes.ListValue, was: %T`, allowedHttpMethodsAttribute))
	}

	customResponseAttribute, ok := attributes["custom_response"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_response is missing from object`)

		return nil, diags
	}

	customResponseVal, ok := customResponseAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_response expected to be basetypes.ObjectValue, was: %T`, customResponseAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return HttpValue{
		AllowedHttpMethods: allowedHttpMethodsVal,
		CustomResponse:     customResponseVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewHttpValueNull() HttpValue {
	return HttpValue{
		state: attr.ValueStateNull,
	}
}

func NewHttpValueUnknown() HttpValue {
	return HttpValue{
		state: attr.ValueStateUnknown,
	}
}

func NewHttpValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (HttpValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing HttpValue Attribute Value",
				"While creating a HttpValue value, a missing attribute value was detected. "+
					"A HttpValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HttpValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid HttpValue Attribute Type",
				"While creating a HttpValue value, an invalid attribute value was detected. "+
					"A HttpValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HttpValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("HttpValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra HttpValue Attribute Value",
				"While creating a HttpValue value, an extra attribute value was detected. "+
					"A HttpValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra HttpValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewHttpValueUnknown(), diags
	}

	allowedHttpMethodsAttribute, ok := attributes["allowed_http_methods"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allowed_http_methods is missing from object`)

		return NewHttpValueUnknown(), diags
	}

	allowedHttpMethodsVal, ok := allowedHttpMethodsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allowed_http_methods expected to be basetypes.ListValue, was: %T`, allowedHttpMethodsAttribute))
	}

	customResponseAttribute, ok := attributes["custom_response"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_response is missing from object`)

		return NewHttpValueUnknown(), diags
	}

	customResponseVal, ok := customResponseAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_response expected to be basetypes.ObjectValue, was: %T`, customResponseAttribute))
	}

	if diags.HasError() {
		return NewHttpValueUnknown(), diags
	}

	return HttpValue{
		AllowedHttpMethods: allowedHttpMethodsVal,
		CustomResponse:     customResponseVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewHttpValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) HttpValue {
	object, diags := NewHttpValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewHttpValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t HttpType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewHttpValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewHttpValueUnknown(), nil
	}

	if in.IsNull() {
		return NewHttpValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewHttpValueMust(HttpValue{}.AttributeTypes(ctx), attributes), nil
}

func (t HttpType) ValueType(ctx context.Context) attr.Value {
	return HttpValue{}
}

var _ basetypes.ObjectValuable = HttpValue{}

type HttpValue struct {
	AllowedHttpMethods basetypes.ListValue   `tfsdk:"allowed_http_methods"`
	CustomResponse     basetypes.ObjectValue `tfsdk:"custom_response"`
	state              attr.ValueState
}

func (v HttpValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["allowed_http_methods"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["custom_response"] = basetypes.ObjectType{
		AttrTypes: CustomResponseValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.AllowedHttpMethods.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allowed_http_methods"] = val

		val, err = v.CustomResponse.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["custom_response"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v HttpValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v HttpValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v HttpValue) String() string {
	return "HttpValue"
}

func (v HttpValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var customResponse basetypes.ObjectValue

	if v.CustomResponse.IsNull() {
		customResponse = types.ObjectNull(
			CustomResponseValue{}.AttributeTypes(ctx),
		)
	}

	if v.CustomResponse.IsUnknown() {
		customResponse = types.ObjectUnknown(
			CustomResponseValue{}.AttributeTypes(ctx),
		)
	}

	if !v.CustomResponse.IsNull() && !v.CustomResponse.IsUnknown() {
		customResponse = types.ObjectValueMust(
			CustomResponseValue{}.AttributeTypes(ctx),
			v.CustomResponse.Attributes(),
		)
	}

	var allowedHttpMethodsVal basetypes.ListValue
	switch {
	case v.AllowedHttpMethods.IsUnknown():
		allowedHttpMethodsVal = types.ListUnknown(types.StringType)
	case v.AllowedHttpMethods.IsNull():
		allowedHttpMethodsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		allowedHttpMethodsVal, d = types.ListValue(types.StringType, v.AllowedHttpMethods.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"allowed_http_methods": basetypes.ListType{
				ElemType: types.StringType,
			},
			"custom_response": basetypes.ObjectType{
				AttrTypes: CustomResponseValue{}.AttributeTypes(ctx),
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"allowed_http_methods": basetypes.ListType{
			ElemType: types.StringType,
		},
		"custom_response": basetypes.ObjectType{
			AttrTypes: CustomResponseValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"allowed_http_methods": allowedHttpMethodsVal,
			"custom_response":      customResponse,
		})

	return objVal, diags
}

func (v HttpValue) Equal(o attr.Value) bool {
	other, ok := o.(HttpValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AllowedHttpMethods.Equal(other.AllowedHttpMethods) {
		return false
	}

	if !v.CustomResponse.Equal(other.CustomResponse) {
		return false
	}

	return true
}

func (v HttpValue) Type(ctx context.Context) attr.Type {
	return HttpType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v HttpValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"allowed_http_methods": basetypes.ListType{
			ElemType: types.StringType,
		},
		"custom_response": basetypes.ObjectType{
			AttrTypes: CustomResponseValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = CustomResponseType{}

type CustomResponseType struct {
	basetypes.ObjectType
}

func (t CustomResponseType) Equal(o attr.Type) bool {
	other, ok := o.(CustomResponseType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CustomResponseType) String() string {
	return "CustomResponseType"
}

func (t CustomResponseType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bodyAttribute, ok := attributes["body"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`body is missing from object`)

		return nil, diags
	}

	bodyVal, ok := bodyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`body expected to be basetypes.StringValue, was: %T`, bodyAttribute))
	}

	contentTypeAttribute, ok := attributes["content_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`content_type is missing from object`)

		return nil, diags
	}

	contentTypeVal, ok := contentTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`content_type expected to be basetypes.StringValue, was: %T`, contentTypeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CustomResponseValue{
		Body:        bodyVal,
		ContentType: contentTypeVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewCustomResponseValueNull() CustomResponseValue {
	return CustomResponseValue{
		state: attr.ValueStateNull,
	}
}

func NewCustomResponseValueUnknown() CustomResponseValue {
	return CustomResponseValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCustomResponseValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CustomResponseValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CustomResponseValue Attribute Value",
				"While creating a CustomResponseValue value, a missing attribute value was detected. "+
					"A CustomResponseValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CustomResponseValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CustomResponseValue Attribute Type",
				"While creating a CustomResponseValue value, an invalid attribute value was detected. "+
					"A CustomResponseValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CustomResponseValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CustomResponseValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CustomResponseValue Attribute Value",
				"While creating a CustomResponseValue value, an extra attribute value was detected. "+
					"A CustomResponseValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CustomResponseValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCustomResponseValueUnknown(), diags
	}

	bodyAttribute, ok := attributes["body"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`body is missing from object`)

		return NewCustomResponseValueUnknown(), diags
	}

	bodyVal, ok := bodyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`body expected to be basetypes.StringValue, was: %T`, bodyAttribute))
	}

	contentTypeAttribute, ok := attributes["content_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`content_type is missing from object`)

		return NewCustomResponseValueUnknown(), diags
	}

	contentTypeVal, ok := contentTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`content_type expected to be basetypes.StringValue, was: %T`, contentTypeAttribute))
	}

	if diags.HasError() {
		return NewCustomResponseValueUnknown(), diags
	}

	return CustomResponseValue{
		Body:        bodyVal,
		ContentType: contentTypeVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewCustomResponseValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CustomResponseValue {
	object, diags := NewCustomResponseValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCustomResponseValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CustomResponseType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCustomResponseValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCustomResponseValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCustomResponseValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCustomResponseValueMust(CustomResponseValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CustomResponseType) ValueType(ctx context.Context) attr.Value {
	return CustomResponseValue{}
}

var _ basetypes.ObjectValuable = CustomResponseValue{}

type CustomResponseValue struct {
	Body        basetypes.StringValue `tfsdk:"body"`
	ContentType basetypes.StringValue `tfsdk:"content_type"`
	state       attr.ValueState
}

func (v CustomResponseValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["body"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["content_type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Body.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["body"] = val

		val, err = v.ContentType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["content_type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CustomResponseValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CustomResponseValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CustomResponseValue) String() string {
	return "CustomResponseValue"
}

func (v CustomResponseValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"body":         basetypes.StringType{},
		"content_type": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"body":         v.Body,
			"content_type": v.ContentType,
		})

	return objVal, diags
}

func (v CustomResponseValue) Equal(o attr.Value) bool {
	other, ok := o.(CustomResponseValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Body.Equal(other.Body) {
		return false
	}

	if !v.ContentType.Equal(other.ContentType) {
		return false
	}

	return true
}

func (v CustomResponseValue) Type(ctx context.Context) attr.Type {
	return CustomResponseType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CustomResponseValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"body":         basetypes.StringType{},
		"content_type": basetypes.StringType{},
	}
}
